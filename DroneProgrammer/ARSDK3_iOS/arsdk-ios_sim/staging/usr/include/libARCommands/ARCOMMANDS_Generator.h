/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.
    * Neither the name of Parrot nor the names
    of its contributors may be used to endorse or promote products
    derived from this software without specific prior written
    permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
/**
 * @file libARCommands/ARCOMMANDS_Generator.h
 * @brief libARCommands generator header.
 * This file contains all declarations needed to generate commands
 * @note Autogenerated file
 **/
#ifndef _LIBARCOMMANDS_ARCOMMANDS_GENERATOR_H_
#define _LIBARCOMMANDS_ARCOMMANDS_GENERATOR_H_
#include <libARCommands/ARCOMMANDS_Types.h>
#include <inttypes.h>


/**
 * @brief Error codes for ARCOMMANDS_Generator_GenerateCommand functions
 */
typedef enum {
    ARCOMMANDS_GENERATOR_OK = 0, ///< No error occured
    ARCOMMANDS_GENERATOR_ERROR_BAD_ARGS, ///< At least one of the arguments is invalid
    ARCOMMANDS_GENERATOR_ERROR_NOT_ENOUGH_SPACE, ///< The given output buffer was not large enough for the command
    ARCOMMANDS_GENERATOR_ERROR, ///< Any other error
} eARCOMMANDS_GENERATOR_ERROR;


// Feature generic


/**
 * @brief default
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateGenericDefault (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set several drone settings in only one command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _settings Drone settings
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateGenericSetDroneSettings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const ARCOMMANDS_Generic_DroneSettings_t * _settings);

/**
 * @brief Informs that several drones settings changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _settings Drone settings changed
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateGenericDroneSettingsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const ARCOMMANDS_Generic_DroneSettingsChanged_t * _settings);


// Feature animation


/**
 * @brief Cancel current animation.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationCancel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Start a flip animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type Type of the flip\nAnimation flip type.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationStartFlip (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_FLIP_TYPE _type);

/**
 * @brief Start an horizontal panorama animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone horizontaly rotates on itself.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _provided_params Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nHorizontal panorama configuration parameter.
 * @param _provided_params a combination of ; ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM_ROTATION_ANGLE ; ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM_ROTATION_SPEED
 * @param _rotation_angle Desired rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise.\nNot used when rotation angle of provided_params param is 0.
 * @param _rotation_speed The desired rotation speed of the anim in rad/s\nNot used when rotation speed of provided_params param is 0.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationStartHorizontalPanorama (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _provided_params, float _rotation_angle, float _rotation_speed);

/**
 * @brief Start a dronie animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone flies away on a given distance with a computed angle.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _provided_params Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nDronie animation configuration parameter.
 * @param _provided_params a combination of ; ARCOMMANDS_FLAG_ANIMATION_DRONIE_CONFIG_PARAM_SPEED ; ARCOMMANDS_FLAG_ANIMATION_DRONIE_CONFIG_PARAM_DISTANCE ; ARCOMMANDS_FLAG_ANIMATION_DRONIE_CONFIG_PARAM_PLAY_MODE
 * @param _speed Desired speed in m/s.\nNot used when speed of provided_params param is 0.
 * @param _distance Desired dronie distance in m (length of the hypotenuse).\nNot used when distance of provided_params param is 0.
 * @param _play_mode Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationStartDronie (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _provided_params, float _speed, float _distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief Start an horizontal reveal animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone starts looking down, then moves forward while slowly looking at the horizon.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _provided_params Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nHorizontal reveal animation configuration parameter.
 * @param _provided_params a combination of ; ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_SPEED ; ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_DISTANCE ; ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_PLAY_MODE
 * @param _speed Desired speed in m/s.\nNot used when speed of provided_params param is 0.
 * @param _distance Desired distance in m.\nNot used when distance of provided_params param is 0.
 * @param _play_mode Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationStartHorizontalReveal (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _provided_params, float _speed, float _distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief Start a vertical reveal animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone starts looking down, then moves up while slowly looking at the horizon. When it reaches its target altitude, it rotates on itself to do a panorama.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _provided_params Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nVertical reveal animation configuration parameter.
 * @param _provided_params a combination of ; ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_SPEED ; ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_VERTICAL_DISTANCE ; ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_ROTATION_ANGLE ; ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_ROTATION_SPEED ; ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_PLAY_MODE
 * @param _speed Desired speed in m/s.\nNot used when speed of provided_params param is 0.
 * @param _vertical_distance Desired vertical distance in m.\nNot used when vertical distance of provided_params param is 0.
 * @param _rotation_angle Desired rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise.\nNot used when rotation angle of provided_params param is 0.
 * @param _rotation_speed The desired rotation speed of the anim in rad/s\nNot used when rotation speed of provided_params param is 0.
 * @param _play_mode Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationStartVerticalReveal (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _provided_params, float _speed, float _vertical_distance, float _rotation_angle, float _rotation_speed, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief Start a spiral animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone circles around its target.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _provided_params Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nSpiral animation configuration parameter.
 * @param _provided_params a combination of ; ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_SPEED ; ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_RADIUS_VARIATION ; ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_VERTICAL_DISTANCE ; ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_REVOLUTION_NB ; ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_PLAY_MODE
 * @param _speed Desired speed in m/s.\nNot used when speed of provided_params param is 0.
 * @param _radius_variation Desired relative radius variation in m.\nA value of 2 means that the ending radius will be twice as big as the starting radius.\nA value of -2 means that the ending radius will half of the size of the starting radius.\nA value of 1 means that the radius will not change during the animation.\nNot used when radius variation of provided_params param is 0.
 * @param _vertical_distance Desired vertical distance in m.\nIf negative, the spiral will be directed to the ground.\nNot used when vertical distance of provided_params param is 0.
 * @param _revolution_nb The number of revolution (in turn).\nPositive value makes a clockwise spiral, negative is anti-clockwise.\nExample: 1.5 makes an entire turn plus half of a turn
 * @param _play_mode Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationStartSpiral (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _provided_params, float _speed, float _radius_variation, float _vertical_distance, float _revolution_nb, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief Start a parabola animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone makes a parabola on top of its target and ends on the other side of it.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _provided_params Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nParabola animation configuration parameter.
 * @param _provided_params a combination of ; ARCOMMANDS_FLAG_ANIMATION_PARABOLA_CONFIG_PARAM_SPEED ; ARCOMMANDS_FLAG_ANIMATION_PARABOLA_CONFIG_PARAM_VERTICAL_DISTANCE ; ARCOMMANDS_FLAG_ANIMATION_PARABOLA_CONFIG_PARAM_PLAY_MODE
 * @param _speed Desired speed in m/s.\nNot used when speed of provided_params param is 0.
 * @param _vertical_distance Desired vertical distance in m.\nNot used when vertical distance of provided_params param is 0.
 * @param _play_mode Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationStartParabola (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _provided_params, float _speed, float _vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief Start a candle animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone flies horizontally in direction of the target then flies up.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _provided_params Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nCandle animation configuration parameter.
 * @param _provided_params a combination of ; ARCOMMANDS_FLAG_ANIMATION_CANDLE_CONFIG_PARAM_SPEED ; ARCOMMANDS_FLAG_ANIMATION_CANDLE_CONFIG_PARAM_VERTICAL_DISTANCE ; ARCOMMANDS_FLAG_ANIMATION_CANDLE_CONFIG_PARAM_PLAY_MODE
 * @param _speed Desired speed in m/s.\nNot used when speed of provided_params param is 0.
 * @param _vertical_distance Desired vertical distance in m.\nNot used when vertical distance of provided_params param is 0.
 * @param _play_mode Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationStartCandle (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _provided_params, float _speed, float _vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief Start a dolly slide animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone slides horizontally.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _provided_params Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nDolly slide animation configuration parameter.
 * @param _provided_params a combination of ; ARCOMMANDS_FLAG_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_SPEED ; ARCOMMANDS_FLAG_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_ANGLE ; ARCOMMANDS_FLAG_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_HORIZONTAL_DISTANCE ; ARCOMMANDS_FLAG_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_PLAY_MODE
 * @param _speed Desired speed in m/s.\nNot used when speed of provided_params param is 0.
 * @param _angle Desired drone-target-destination angle in rad.\nNot used when angle of provided_params param is 0.
 * @param _horizontal_distance Desired horizontal distance in m..\nNot used when angle of provided_params param is 0.
 * @param _play_mode Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationStartDollySlide (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _provided_params, float _speed, float _angle, float _horizontal_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _values Bitfield of available animation types\nAnimation type.
 * @param _values a combination of ; ARCOMMANDS_FLAG_ANIMATION_TYPE_NONE ; ARCOMMANDS_FLAG_ANIMATION_TYPE_FLIP ; ARCOMMANDS_FLAG_ANIMATION_TYPE_HORIZONTAL_PANORAMA ; ARCOMMANDS_FLAG_ANIMATION_TYPE_DRONIE ; ARCOMMANDS_FLAG_ANIMATION_TYPE_HORIZONTAL_REVEAL ; ARCOMMANDS_FLAG_ANIMATION_TYPE_VERTICAL_REVEAL ; ARCOMMANDS_FLAG_ANIMATION_TYPE_SPIRAL ; ARCOMMANDS_FLAG_ANIMATION_TYPE_PARABOLA ; ARCOMMANDS_FLAG_ANIMATION_TYPE_CANDLE ; ARCOMMANDS_FLAG_ANIMATION_TYPE_DOLLY_SLIDE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationAvailability (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _values);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type Type of the animation. None if no animation is currently running or canceling.\nAnimation type.
 * @param _percent Percentage of the animation (only accurate if type is not none) (from 0 to 100).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_TYPE _type, uint8_t _percent);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the animation\nAnimation state.
 * @param _type Type of the flip (only accurate if state is not idle)\nAnimation flip type.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationFlipState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_STATE _state, eARCOMMANDS_ANIMATION_FLIP_TYPE _type);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the animation\nAnimation state.
 * @param _rotation_angle Rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise.\n(only accurate if state is not idle)
 * @param _rotation_speed The rotation speed of the anim in rad/s\n(only accurate if state is not idle)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationHorizontalPanoramaState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_STATE _state, float _rotation_angle, float _rotation_speed);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the animation\nAnimation state.
 * @param _speed Speed in m/s.\n(only accurate if state is not idle)
 * @param _distance Dronie distance in m.\n(only accurate if state is not idle)
 * @param _play_mode Play mode.\n(only accurate if state is not idle)\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationDronieState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the animation\nAnimation state.
 * @param _speed Speed in m/s.\n(only accurate if state is not idle)
 * @param _distance Distance in m.\n(only accurate if state is not idle)
 * @param _play_mode Play mode.\n(only accurate if state is not idle)\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationHorizontalRevealState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the animation\nAnimation state.
 * @param _speed Speed in m/s.\n(only accurate if state is not idle)
 * @param _vertical_distance Vertical distance in m.\n(only accurate if state is not idle)
 * @param _rotation_angle Rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise.\n(only accurate if state is not idle)
 * @param _rotation_speed The rotation speed of the anim in rad/s\n(only accurate if state is not idle)
 * @param _play_mode Play mode.\n(only accurate if state is not idle)\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationVerticalRevealState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _vertical_distance, float _rotation_angle, float _rotation_speed, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the animation\nAnimation state.
 * @param _speed Speed in m/s.\n(only accurate if state is not idle)
 * @param _radius_variation Relative radius variation in m.\n(only accurate if state is not idle)
 * @param _vertical_distance Vertical distance in m. Negative value means the animation is directed toward the ground.\n(only accurate if state is not idle)
 * @param _revolution_nb The number of revolution (in turn).\n(only accurate if state is not idle)
 * @param _play_mode Play mode.\n(only accurate if state is not idle)\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationSpiralState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _radius_variation, float _vertical_distance, float _revolution_nb, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the animation\nAnimation state.
 * @param _speed Speed in m/s.\n(only accurate if state is not idle)
 * @param _vertical_distance Vertical distance in m.\n(only accurate if state is not idle)
 * @param _play_mode Play mode.\n(only accurate if state is not idle)\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationParabolaState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the animation\nAnimation state.
 * @param _speed Speed in m/s.\n(only accurate if state is not idle)
 * @param _vertical_distance Vertical distance in m.\n(only accurate if state is not idle)
 * @param _play_mode Play mode.\n(only accurate if state is not idle)\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationCandleState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the animation\nAnimation state.
 * @param _speed Speed in m/s.\n(only accurate if state is not idle)
 * @param _angle Drone-target-destination angle in rad.\n(only accurate if state is not idle)
 * @param _horizontal_distance Horizontal distance in m.\n(only accurate if state is not idle)
 * @param _play_mode Play mode.\n(only accurate if state is not idle)\nAnimation play mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateAnimationDollySlideState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ANIMATION_STATE _state, float _speed, float _angle, float _horizontal_distance, eARCOMMANDS_ANIMATION_PLAY_MODE _play_mode);


// Feature ARDrone3


/**
 * @brief Do a flat trim of the accelerometer/gyro.
 * Could be useful when the drone is sliding in hover mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingFlatTrim (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Ask the drone to take off.
 * On the fixed wings (such as Disco): not used except to cancel a land.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingTakeOff (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _flag Boolean flag: 1 if the roll and pitch values should be taken in consideration. 0 otherwise
 * @param _roll Roll angle as signed percentage.\nOn copters:\nRoll angle expressed as signed percentage of the max pitch/roll setting, in range [-100, 100]\n-100 corresponds to a roll angle of max pitch/roll to the left (drone will fly left)\n100 corresponds to a roll angle of max pitch/roll to the right (drone will fly right)\nThis value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.\n\nOn fixed wings:\nRoll angle expressed as signed percentage of the physical max roll of the wing, in range [-100, 100]\nNegative value makes the plane fly to the left\nPositive value makes the plane fly to the right
 * @param _pitch Pitch angle as signed percentage.\nOn copters:\nExpressed as signed percentage of the max pitch/roll setting, in range [-100, 100]\n-100 corresponds to a pitch angle of max pitch/roll towards sky (drone will fly backward)\n100 corresponds to a pitch angle of max pitch/roll towards ground (drone will fly forward)\nThis value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.\n\nOn fixed wings:\nExpressed as signed percentage of the physical max pitch of the wing, in range [-100, 100]\nNegative value makes the plane fly in direction of the sky\nPositive value makes the plane fly in direction of the ground
 * @param _yaw Yaw rotation speed as signed percentage.\nOn copters:\nExpressed as signed percentage of the max yaw rotation speed setting, in range [-100, 100].\n-100 corresponds to a counter-clockwise rotation of max yaw rotation speed\n100 corresponds to a clockwise rotation of max yaw rotation speed\nThis value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.\n\nOn fixed wings:\nGiving more than a fixed value (75% for the moment) triggers a circle.\nPositive value will trigger a clockwise circling\nNegative value will trigger a counter-clockwise circling
 * @param _gaz Throttle as signed percentage.\nOn copters:\nExpressed as signed percentage of the max vertical speed setting, in range [-100, 100]\n-100 corresponds to a max vertical speed towards ground\n100 corresponds to a max vertical speed towards sky\nThis value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.\nDuring the landing phase, putting some positive gaz will cancel the land.\n\nOn fixed wings:\nExpressed as signed percentage of the physical max throttle, in range [-100, 100]\nNegative value makes the plane fly slower\nPositive value makes the plane fly faster
 * @param _timestampAndSeqNum Command timestamp in milliseconds (low 24 bits) + command sequence number (high 8 bits) [0;255].
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingPCMD (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _flag, int8_t _roll, int8_t _pitch, int8_t _yaw, int8_t _gaz, uint32_t _timestampAndSeqNum);

/**
 * @brief Land.
 * Please note that on copters, if you put some positive gaz (in the [PilotingCommand](#1-0-2)) during the landing, it will cancel it.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingLanding (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Cut out the motors.
 * This cuts immediatly the motors. The drone will fall.
 * This command is sent on a dedicated high priority buffer which will infinitely retry to send it if the command is not delivered.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingEmergency (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Return home.
 * Ask the drone to fly to its [HomePosition](#1-24-0).
 * The availability of the return home can be get from [ReturnHomeState](#1-4-3).
 * Please note that the drone will wait to be hovering to start its return home. This means that it will wait to have a [flag](#1-0-2) set at 0.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _start 1 to start the navigate home, 0 to stop it
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingNavigateHome (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _start);

/**
 * @brief Auto take off mode.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of automatic take off mode (1 for autotake off enabled)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingAutoTakeOffMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief Move the drone to a relative position and rotate heading by a given angle.
 * Moves are relative to the current drone orientation, (drone's reference).
 * Also note that the given rotation will not modify the move (i.e. moves are always rectilinear).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _dX Wanted displacement along the front axis [m]
 * @param _dY Wanted displacement along the right axis [m]
 * @param _dZ Wanted displacement along the down axis [m]
 * @param _dPsi Wanted rotation of heading [rad]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingMoveBy (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _dX, float _dY, float _dZ, float _dPsi);

/**
 * @brief Prepare the drone to take off.
 * On copters: initiates the thrown takeoff. Note that the drone will do the thrown take off even if it is steady.
 * On fixed wings: initiates the take off process on the fixed wings.
 * 
 * Setting the state to 0 will cancel the preparation. You can cancel it before that the drone takes off.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of user take off mode\n- 1 to enter in user take off.\n- 0 to exit from user take off.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingUserTakeOff (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief Make the fixed wing circle.
 * The circle will use the [CirclingAltitude](#1-6-14) and the [CirclingRadius](#1-6-13)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _direction The circling direction
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingCircle (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION _direction);

/**
 * @brief Move the drone to a specified location.
 * If a new command moveTo is sent, the drone will immediatly run it (no cancel will be issued).
 * If a [CancelMoveTo](#1-0-11) command is sent, the moveTo is stopped.
 * During the moveTo, all pitch, roll and gaz values of the piloting command will be ignored by the drone.
 * However, the yaw value can be used.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Latitude of the location (in degrees) to reach
 * @param _longitude Longitude of the location (in degrees) to reach
 * @param _altitude Altitude above sea level (in m) to reach
 * @param _orientation_mode Orientation mode of the move to
 * @param _heading Heading (relative to the North in degrees).\nThis value is only used if the orientation mode is HEADING_START or HEADING_DURING
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingMoveTo (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude, eARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE _orientation_mode, float _heading);

/**
 * @brief Cancel the current moveTo.
 * If there is no current moveTo, this command has no effect.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingCancelMoveTo (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Start a piloted Point Of Interest.
 * During a piloted POI, the drone will always look at the given POI but can be piloted normally. However, yaw value is ignored. Camera tilt and pan command is also ignored.
 * Ignored if [PilotedPOI](#1-4-14) state is UNAVAILABLE.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Latitude of the location (in degrees) to look at
 * @param _longitude Longitude of the location (in degrees) to look at
 * @param _altitude Altitude above sea level (in m) to look at
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStartPilotedPOI (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude);

/**
 * @brief Stop the piloted Point Of Interest.
 * If [PilotedPOI](#1-4-14) state is RUNNING or PENDING, stop it.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStopPilotedPOI (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Make a flip.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _direction Direction for the flip
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3AnimationsFlip (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION _direction);

/**
 * @brief Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _tilt Tilt camera consign for the drone (in degree)\nThe value is saturated by the drone.\nSaturation value is sent by thre drone through CameraSettingsChanged command.
 * @param _pan Pan camera consign for the drone (in degree)\nThe value is saturated by the drone.\nSaturation value is sent by thre drone through CameraSettingsChanged command.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3CameraOrientation (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int8_t _tilt, int8_t _pan);

/**
 * @brief Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _tilt Tilt camera consign for the drone (in degree)\nThe value is saturated by the drone.\nSaturation value is sent by thre drone through CameraSettingsChanged command.
 * @param _pan Pan camera consign for the drone (in degree)\nThe value is saturated by the drone.\nSaturation value is sent by thre drone through CameraSettingsChanged command.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3CameraOrientationV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _tilt, float _pan);

/**
 * @brief Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _tilt Tilt camera velocity consign [deg/s]\nNegative tilt velocity move camera to bottom\nPositive tilt velocity move camera to top
 * @param _pan Pan camera velocity consign [deg/s]\nNegative pan velocity move camera to left\nPositive pan velocity move camera to right
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3CameraVelocity (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _tilt, float _pan);

/**
 * @brief Take a picture.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage id to take picture
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordPicture (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id);

/**
 * @brief Record a video.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _record Command to record video
 * @param _mass_storage_id Mass storage id to record
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordVideo (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD _record, uint8_t _mass_storage_id);

/**
 * @brief Take a picture.
 * The type of picture taken is related to the picture setting.
 * You can set the picture format by sending the command [SetPictureFormat](#1-19-0). You can also get the current picture format with [PictureFormat](#1-20-0).
 * Please note that the time required to take the picture is highly related to this format.
 * 
 * You can check if the picture taking is available with [PictureState](#1-8-2).
 * Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after that the picture has been taken).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordPictureV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Record a video (or start timelapse).
 * You can check if the video recording is available with [VideoState](#1-8-3).
 * This command can start a video (obvious huh?), but also a timelapse if the timelapse mode is set. You can check if the timelapse mode is set with the event [TimelapseMode](#1-20-4).
 * Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after the picture has been taken).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _record Command to record video
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordVideoV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD _record);

/**
 * @brief Scan wifi network to get a list of all networks found by the drone
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkWifiScan (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND _band);

/**
 * @brief Ask for available wifi channels.
 * The list of available Wifi channels is related to the country of the drone. You can get this country from the event [CountryChanged](#0-3-6).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkWifiAuthChannel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set max altitude.
 * The drone will not fly over this max altitude when it is in manual piloting.
 * Please note that if you set a max altitude which is below the current drone altitude, the drone will not go to given max altitude.
 * You can get the bounds in the event [MaxAltitude](#1-6-0).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current altitude max in m
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsMaxAltitude (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set max pitch/roll.
 * This represent the max inclination allowed by the drone.
 * You can get the bounds with the commands [MaxPitchRoll](#1-6-1).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current tilt max in degree
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsMaxTilt (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set absolut control.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _on 1 to enable, 0 to disable
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsAbsolutControl (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _on);

/**
 * @brief Set max distance.
 * You can get the bounds from the event [MaxDistance](#1-6-3).
 * 
 * If [Geofence](#1-6-4) is activated, the drone won't fly over the given max distance.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value Current max distance in meter
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsMaxDistance (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Enable geofence.
 * If geofence is enabled, the drone won't fly over the given max distance.
 * You can get the max distance from the event [MaxDistance](#1-6-3).
 * For copters: the distance is computed from the controller position, if this position is not known, it will use the take off.
 * For fixed wings: the distance is computed from the take off position.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _shouldNotFlyOver 1 if the drone can't fly further than max distance, 0 if no limitation on the drone should be done
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsNoFlyOverMaxDistance (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _shouldNotFlyOver);

/**
 * @brief Set autonomous flight max horizontal speed.
 * This will only be used during autonomous flights such as moveBy.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum horizontal speed [m/s]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsSetAutonomousFlightMaxHorizontalSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Set autonomous flight max vertical speed.
 * This will only be used during autonomous flights such as moveBy.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum vertical speed [m/s]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsSetAutonomousFlightMaxVerticalSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Set autonomous flight max horizontal acceleration.
 * This will only be used during autonomous flights such as moveBy.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum horizontal acceleration [m/s2]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Set autonomous flight max vertical acceleration.
 * This will only be used during autonomous flights such as moveBy.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum vertical acceleration [m/s2]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsSetAutonomousFlightMaxVerticalAcceleration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Set autonomous flight max rotation speed.
 * This will only be used during autonomous flights such as moveBy.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum yaw rotation speed [deg/s]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsSetAutonomousFlightMaxRotationSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Set banked turn mode.
 * When banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value 1 to enable, 0 to disable
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsBankedTurn (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _value);

/**
 * @brief Set minimum altitude.
 * Only available for fixed wings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current altitude min in m
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsMinAltitude (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set default circling direction. This direction will be used when the drone use an automatic circling or when [CIRCLE](#1-0-9) is sent with direction *default*.
 * Only available for fixed wings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value The circling direction
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsCirclingDirection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE _value);

/**
 * @brief Set circling radius.
 * Only available for fixed wings.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value The circling radius in meter
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsCirclingRadius (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _value);

/**
 * @brief Set min circling altitude (not used during take off).
 * Only available for fixed wings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value The circling altitude in meter
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsCirclingAltitude (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _value);

/**
 * @brief Set pitch mode.
 * Only available for fixed wings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value The Pitch mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsPitchMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE _value);

/**
 * @brief Enable/disable the motion detection.
 * If the motion detection is enabled, the drone will send its [MotionState](#1-4-13) when its [FlyingState](#1-4-1) is landed. If the motion detection is disabled, [MotionState](#1-4-13) is steady.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable 1 to enable the motion detection, 0 to disable it.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsSetMotionDetectionMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief Set max vertical speed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max vertical speed in m/s
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsMaxVerticalSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set max rotation speed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max yaw rotation speed in degree/s
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsMaxRotationSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set the presence of hull protection.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _present 1 if present, 0 if not present
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsHullProtection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _present);

/**
 * @brief Set outdoor mode.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _outdoor 1 if outdoor flight, 0 if indoor flight
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsOutdoor (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _outdoor);

/**
 * @brief Set max pitch/roll rotation speed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max pitch/roll rotation speed in degree/s
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsMaxPitchRollRotationSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Select or auto-select channel of choosen band.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi selection (auto, manual)
 * @param _band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param _channel The channel (not used in auto mode)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkSettingsWifiSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE _type, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND _band, uint8_t _channel);

/**
 * @brief Set wifi security type.
 * The security will be changed on the next restart
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi security (open, wpa2)
 * @param _key The key to secure the network (empty if type is open)
 * @param _keyType Type of the key
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkSettingsWifiSecurity (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE _type, const char * _key, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_KEYTYPE _keyType);

/**
 * @brief Set picture format.
 * Please note that the time required to take the picture is highly related to this format.
 * Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after the picture has been taken).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of photo format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsPictureFormatSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE _type);

/**
 * @brief Set White Balance mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type auto white balance
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsAutoWhiteBalanceSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE _type);

/**
 * @brief Set image exposure.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value Exposition value (bounds given by ExpositionChanged arg min and max, by default [-3:3])
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsExpositionSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Set image saturation.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value Saturation value (bounds given by SaturationChanged arg min and max, by default [-100:100])
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsSaturationSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Set timelapse mode.
 * If timelapse mode is set, instead of taking a video, the drone will take picture regularly.
 * Watch out, this command only configure the timelapse mode. Once it is configured, you can start/stop the timelapse with the [RecordVideo](#1-7-3) command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 1 if timelapse is enabled, 0 otherwise
 * @param _interval interval in seconds for taking pictures
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsTimelapseSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled, float _interval);

/**
 * @brief Set video autorecord mode.
 * If autorecord is set, video record will be automatically started when the drone takes off and stopped slightly after landing.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 1 if video autorecord is enabled, 0 otherwise
 * @param _mass_storage_id Mass storage id to take video
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsVideoAutorecordSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled, uint8_t _mass_storage_id);

/**
 * @brief Set video stabilization mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Video stabilization mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsVideoStabilizationMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE _mode);

/**
 * @brief Set video recording mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Video recording mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsVideoRecordingMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORECORDINGMODE_MODE _mode);

/**
 * @brief Set video framerate.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _framerate Video framerate
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsVideoFramerate (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE _framerate);

/**
 * @brief Set video streaming and recording resolutions.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type Video streaming and recording resolutions
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsVideoResolutions (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORESOLUTIONS_TYPE _type);

/**
 * @brief Enable/disable video streaming.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable 1 to enable, 0 to disable.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaStreamingVideoEnable (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief Set the stream mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode stream mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaStreamingVideoStreamMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE _mode);

/**
 * @brief Set home position.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Home latitude in decimal degrees
 * @param _longitude Home longitude in decimal degrees
 * @param _altitude Home altitude in meters
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsSetHome (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude);

/**
 * @brief Reset home position.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsResetHome (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set controller gps location.
 * The user location might be used in case of return home, according to the home type and the accuracy of the given position. You can get the current home type with the event [HomeType](#1-24-4).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude GPS latitude in decimal degrees
 * @param _longitude GPS longitude in decimal degrees
 * @param _altitude GPS altitude in meters
 * @param _horizontalAccuracy Horizontal Accuracy in meter ; equal -1 if no horizontal Accuracy
 * @param _verticalAccuracy Vertical Accuracy in meter ; equal -1 if no vertical Accuracy
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsSendControllerGPS (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude, double _horizontalAccuracy, double _verticalAccuracy);

/**
 * @brief Set the preferred home type.
 * Please note that this is only a preference. The actual type chosen is given by the event [HomeType](#1-31-2).
 * You can get the currently available types with the event [HomeTypeAvailability](#1-31-1).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of the home position
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsHomeType (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE _type);

/**
 * @brief Set the delay after which the drone will automatically try to return home after a disconnection.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _delay Delay in second
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsReturnHomeDelay (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _delay);

/**
 * @brief Set the electric frequency of the surrounding lights.
 * This is used to avoid the video flickering in auto mode. You can get the current antiflickering mode with the event [AntiflickeringModeChanged](#1-30-1).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _frequency Type of the electric frequency
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3AntiflickeringElectricFrequency (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY _frequency);

/**
 * @brief Set the antiflickering mode.
 * If auto, the drone will detect when flickers appears on the video and trigger the antiflickering.
 * In this case, this electric frequency it will use will be the one specified in the event [ElectricFrequency](#1-29-0).
 * Forcing the antiflickering (FixedFiftyHertz or FixedFiftyHertz) can reduce luminosity of the video.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Mode of the anti flickering functionnality
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3AntiflickeringSetMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE _mode);

/**
 * @brief Start the alert sound. The alert sound can only be started when the drone is not flying.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SoundStartAlertSound (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Stop the alert sound.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SoundStopAlertSound (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Picture state.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state 1 if picture has been taken, 0 otherwise
 * @param _mass_storage_id Mass storage id where the picture was recorded
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordStatePictureStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state, uint8_t _mass_storage_id);

/**
 * @brief Picture record state.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of video
 * @param _mass_storage_id Mass storage id where the video was recorded
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordStateVideoStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE _state, uint8_t _mass_storage_id);

/**
 * @brief Picture state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of device picture recording
 * @param _error Error to explain the state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordStatePictureStateChangedV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error);

/**
 * @brief Video record state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of device video recording
 * @param _error Error to explain the state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordStateVideoStateChangedV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE _state, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR _error);

/**
 * @brief Video resolution.
 * Informs about streaming and recording video resolutions.
 * Note that this is only an indication about what the resolution should be. To know the real resolution, you should get it from the frame.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _streaming Streaming resolution
 * @param _recording Recording resolution
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordStateVideoResolutionState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING _streaming, eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING _recording);

/**
 * @brief Picture taken.
 * 
 * **This event is a notification, you can't retrieve it in the cache of the device controller.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _event Last event of picture recording
 * @param _error Error to explain the event
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordEventPictureEventChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error);

/**
 * @brief Video record notification.
 * 
 * **This event is a notification, you can't retrieve it in the cache of the device controller.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _event Event of video recording
 * @param _error Error to explain the event
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaRecordEventVideoEventChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT _event, eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR _error);

/**
 * @brief Drone acknowledges that flat trim was correctly processed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateFlatTrimChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Flying state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Drone flying state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateFlyingStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE _state);

/**
 * @brief Alert state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Drone alert state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateAlertStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state);

/**
 * @brief Return home state.
 * Availability is related to gps fix, magnetometer calibration.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of navigate home
 * @param _reason Reason of the state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateNavigateHomeStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE _state, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON _reason);

/**
 * @brief Drone's position changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Latitude position in decimal degrees (500.0 if not available)
 * @param _longitude Longitude position in decimal degrees (500.0 if not available)
 * @param _altitude Altitude in meters (from GPS)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStatePositionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude);

/**
 * @brief Drone's speed changed.
 * Expressed in the NED referential (North-East-Down).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _speedX Speed relative to the North (when drone moves to the north, speed is > 0) (in m/s)
 * @param _speedY Speed relative to the East (when drone moves to the east, speed is > 0) (in m/s)
 * @param _speedZ Speed on the z axis (when drone moves down, speed is > 0) (in m/s)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _speedX, float _speedY, float _speedZ);

/**
 * @brief Drone's attitude changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _roll roll value (in radian)
 * @param _pitch Pitch value (in radian)
 * @param _yaw Yaw value (in radian)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateAttitudeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _roll, float _pitch, float _yaw);

/**
 * @brief Auto takeoff mode
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of automatic take off mode (1 if enabled)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateAutoTakeOffModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief Drone's altitude changed.
 * The altitude reported is the altitude above the take off point.
 * To get the altitude above sea level, see [PositionChanged](#1-4-4).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _altitude Altitude in meters
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateAltitudeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _altitude);

/**
 * @brief Drone's location changed.
 * This event is meant to replace [PositionChanged](#1-4-4).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Latitude location in decimal degrees (500.0 if not available)
 * @param _longitude Longitude location in decimal degrees (500.0 if not available)
 * @param _altitude Altitude location in meters.
 * @param _latitude_accuracy Latitude location error in meters (1 sigma/standard deviation)\n-1 if not available.
 * @param _longitude_accuracy Longitude location error in meters (1 sigma/standard deviation)\n-1 if not available.
 * @param _altitude_accuracy Altitude location error in meters (1 sigma/standard deviation)\n-1 if not available.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateGpsLocationChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude, int8_t _latitude_accuracy, int8_t _longitude_accuracy, int8_t _altitude_accuracy);

/**
 * @brief Landing state.
 * Only available for fixed wings (which have two landing modes).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Drone landing state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateLandingStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE _state);

/**
 * @brief Drone's air speed changed
 * Expressed in the drone's referential.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _airSpeed Speed relative to air on x axis\n(speed is always > 0) (in m/s)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateAirSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _airSpeed);

/**
 * @brief The drone moves or moved to a given location.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Latitude of the location (in degrees) to reach
 * @param _longitude Longitude of the location (in degrees) to reach
 * @param _altitude Altitude above sea level (in m) to reach
 * @param _orientation_mode Orientation mode of the move to
 * @param _heading Heading (relative to the North in degrees).\nThis value is only used if the orientation mode is HEADING_START or HEADING_DURING
 * @param _status Status of the move to
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateMoveToChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE _orientation_mode, float _heading, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS _status);

/**
 * @brief Motion state.
 * If [MotionDetection](#1-6-16) is disabled, motion is steady.
 * This information is only valid when the drone is not flying.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Motion state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateMotionState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE _state);

/**
 * @brief Piloted POI state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Latitude of the location (in degrees) to look at.\nThis information is only valid when the state is pending or running.
 * @param _longitude Longitude of the location (in degrees) to look at.\nThis information is only valid when the state is pending or running.
 * @param _altitude Altitude above sea level (in m) to look at.\nThis information is only valid when the state is pending or running.
 * @param _status Status of the move to
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStatePilotedPOI (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS _status);

/**
 * @brief Battery capacity status to return home.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _status Status of battery to return home
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingStateReturnHomeBatteryCapacity (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS _status);

/**
 * @brief Relative move ended.
 * Informs about the move that the drone managed to do and why it stopped.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _dX Distance traveled along the front axis [m]
 * @param _dY Distance traveled along the right axis [m]
 * @param _dZ Distance traveled along the down axis [m]
 * @param _dPsi Applied angle on heading [rad]
 * @param _error Error to explain the event
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingEventMoveByEnd (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _dX, float _dY, float _dZ, float _dPsi, eARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR _error);

/**
 * @brief Wifi scan results.
 * Please note that the list is not complete until you receive the event [WifiScanEnded](#1-14-1).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _ssid SSID of the AP
 * @param _rssi RSSI of the AP in dbm (negative value)
 * @param _band The band : 2.4 GHz or 5 GHz
 * @param _channel Channel of the AP
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkStateWifiScanListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _ssid, int16_t _rssi, eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND _band, uint8_t _channel);

/**
 * @brief Wifi scan ended.
 * When receiving this event, the list of [WifiScanResults](#1-14-0) is complete.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkStateAllWifiScanChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Available wifi channels.
 * Please note that the list is not complete until you receive the event [AvailableWifiChannelsCompleted](#1-14-3).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band of this channel : 2.4 GHz or 5 GHz
 * @param _channel The authorized channel.
 * @param _in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkStateWifiAuthChannelListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out);

/**
 * @brief Available wifi channels completed.
 * When receiving this event, the list of [AvailableWifiChannels](#1-14-2) is complete.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkStateAllWifiAuthChannelChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Max altitude.
 * The drone will not fly higher than this altitude (above take off point).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current altitude max
 * @param _min Range min of altitude
 * @param _max Range max of altitude
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateMaxAltitudeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Max pitch/roll.
 * The drone will not fly higher than this altitude (above take off point).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max tilt
 * @param _min Range min of tilt
 * @param _max Range max of tilt
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateMaxTiltChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Absolut control.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _on 1 if enabled, 0 if disabled
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateAbsolutControlChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _on);

/**
 * @brief Max distance.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max distance in meter
 * @param _min Minimal possible max distance
 * @param _max Maximal possible max distance
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateMaxDistanceChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Geofencing.
 * If set, the drone won't fly over the [MaxDistance](#1-6-3).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _shouldNotFlyOver 1 if the drone won't fly further than max distance, 0 if no limitation on the drone will be done
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateNoFlyOverMaxDistanceChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _shouldNotFlyOver);

/**
 * @brief Autonomous flight max horizontal speed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum horizontal speed [m/s]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateAutonomousFlightMaxHorizontalSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Autonomous flight max vertical speed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum vertical speed [m/s]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateAutonomousFlightMaxVerticalSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Autonomous flight max horizontal acceleration.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum horizontal acceleration [m/s2]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateAutonomousFlightMaxHorizontalAcceleration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Autonomous flight max vertical acceleration.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum vertical acceleration [m/s2]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateAutonomousFlightMaxVerticalAcceleration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Autonomous flight max rotation speed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value maximum yaw rotation speed [deg/s]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateAutonomousFlightMaxRotationSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value);

/**
 * @brief Banked Turn mode.
 * If banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state 1 if enabled, 0 if disabled
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateBankedTurnChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief Min altitude.
 * Only sent by fixed wings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current altitude min
 * @param _min Range min of altitude min
 * @param _max Range max of altitude min
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateMinAltitudeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Circling direction.
 * Only sent by fixed wings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value The circling direction
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateCirclingDirectionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE _value);

/**
 * @brief Circling radius.
 * Only sent by fixed wings.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current The current circling radius in meter
 * @param _min Range min of circling radius in meter
 * @param _max Range max of circling radius in meter
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateCirclingRadiusChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _current, uint16_t _min, uint16_t _max);

/**
 * @brief Circling altitude.
 * Bounds will be automatically adjusted according to the [MaxAltitude](#1-6-0).
 * Only sent by fixed wings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current The current circling altitude in meter
 * @param _min Range min of circling altitude in meter
 * @param _max Range max of circling altitude in meter
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateCirclingAltitudeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _current, uint16_t _min, uint16_t _max);

/**
 * @brief Pitch mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value The Pitch mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStatePitchModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE _value);

/**
 * @brief State of the motion detection.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 1 if motion detection is enabled, 0 otherwise.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PilotingSettingsStateMotionDetection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled);

/**
 * @brief Max vertical speed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max vertical speed in m/s
 * @param _min Range min of vertical speed
 * @param _max Range max of vertical speed
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsStateMaxVerticalSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Max rotation speed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max yaw rotation speed in degree/s
 * @param _min Range min of yaw rotation speed
 * @param _max Range max of yaw rotation speed
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsStateMaxRotationSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Presence of hull protection.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _present 1 if present, 0 if not present
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsStateHullProtectionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _present);

/**
 * @brief Outdoor mode.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _outdoor 1 if outdoor flight, 0 if indoor flight
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsStateOutdoorChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _outdoor);

/**
 * @brief Max pitch/roll rotation speed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max pitch/roll rotation speed in degree/s
 * @param _min Range min of pitch/roll rotation speed
 * @param _max Range max of pitch/roll rotation speed
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SpeedSettingsStateMaxPitchRollRotationSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Wifi selection.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi selection settings
 * @param _band The actual wifi band state
 * @param _channel The channel (depends of the band)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkSettingsStateWifiSelectionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel);

/**
 * @brief Wifi security type.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi security (open, wpa2)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkSettingsStateWifiSecurityChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE _type);

/**
 * @brief Wifi security type.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi security (open, wpa2)
 * @param _key The key used to secure the network (empty if type is open)
 * @param _keyType Type of the key
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3NetworkSettingsStateWifiSecurity (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE _type, const char * _key, eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE _keyType);

/**
 * @brief Motor version.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _motor_number Product Motor number
 * @param _type Product Motor type
 * @param _software Product Motors software version
 * @param _hardware Product Motors hardware version
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SettingsStateProductMotorVersionListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _motor_number, const char * _type, const char * _software, const char * _hardware);

/**
 * @brief GPS version.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _software Product GPS software version
 * @param _hardware Product GPS hardware version
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SettingsStateProductGPSVersionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _software, const char * _hardware);

/**
 * @brief Motor error.
 * This event is sent back to *noError* as soon as the motor error disappear. To get the last motor error, see [LastMotorError](#1-16-5)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _motorIds Bit field for concerned motor. If bit 0 = 1, motor 1 is affected by this error. Same with bit 1, 2 and 3.\nMotor 1: front left\nMotor 2: front right\nMotor 3: back right\nMotor 4: back left
 * @param _motorError Enumeration of the motor error
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SettingsStateMotorErrorStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _motorIds, eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR _motorError);

/**
 * @brief Motor version.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _version name of the version : dot separated fields (major version - minor version - firmware type - nb motors handled). Firmware types : Release, Debug, Alpha, Test-bench
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SettingsStateMotorSoftwareVersionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _version);

/**
 * @brief Motor flight status.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _nbFlights total number of flights
 * @param _lastFlightDuration Duration of the last flight (in seconds)
 * @param _totalFlightDuration Duration of all flights (in seconds)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SettingsStateMotorFlightsStatusChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _nbFlights, uint16_t _lastFlightDuration, uint32_t _totalFlightDuration);

/**
 * @brief Last motor error.
 * This is a reminder of the last error. To know if a motor error is currently happening, see [MotorError](#1-16-2).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _motorError Enumeration of the motor error
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SettingsStateMotorErrorLastErrorChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR _motorError);

/**
 * @brief P7ID.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _serialID Product P7ID
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SettingsStateP7ID (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _serialID);

/**
 * @brief Product main cpu id
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Product main cpu id
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SettingsStateCPUID (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _id);

/**
 * @brief Picture format.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of photo format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStatePictureFormatChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE _type);

/**
 * @brief White balance mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type auto white balance
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStateAutoWhiteBalanceChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE _type);

/**
 * @brief Image exposure.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value Exposure value
 * @param _min Min exposure value
 * @param _max Max exposure value
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStateExpositionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value, float _min, float _max);

/**
 * @brief Image saturation.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value Saturation value
 * @param _min Min saturation value
 * @param _max Max saturation value
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStateSaturationChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _value, float _min, float _max);

/**
 * @brief Timelapse mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 1 if timelapse is enabled, 0 otherwise
 * @param _interval interval in seconds for taking pictures
 * @param _minInterval Minimal interval for taking pictures
 * @param _maxInterval Maximal interval for taking pictures
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStateTimelapseChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled, float _interval, float _minInterval, float _maxInterval);

/**
 * @brief Video Autorecord mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 1 if video autorecord is enabled, 0 otherwise
 * @param _mass_storage_id Mass storage id for the taken video
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStateVideoAutorecordChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled, uint8_t _mass_storage_id);

/**
 * @brief Video stabilization mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Video stabilization mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStateVideoStabilizationModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE _mode);

/**
 * @brief Video recording mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Video recording mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStateVideoRecordingModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE _mode);

/**
 * @brief Video framerate.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _framerate Video framerate
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStateVideoFramerateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE _framerate);

/**
 * @brief Video resolutions.
 * This event informs about the recording AND streaming resolutions.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type Video resolution type.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PictureSettingsStateVideoResolutionsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE _type);

/**
 * @brief Video stream state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled Current video streaming status.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaStreamingStateVideoEnableChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED _enabled);

/**
 * @brief Video stream mode state
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode stream mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3MediaStreamingStateVideoStreamModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE _mode);

/**
 * @brief Home location.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Home latitude in decimal degrees
 * @param _longitude Home longitude in decimal degrees
 * @param _altitude Home altitude in meters
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsStateHomeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude);

/**
 * @brief Home location has been reset.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Home latitude in decimal degrees
 * @param _longitude Home longitude in decimal degrees
 * @param _altitude Home altitude in meters
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsStateResetHomeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude);

/**
 * @brief Gps fix info.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _fixed 1 if gps on drone is fixed, 0 otherwise
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsStateGPSFixStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _fixed);

/**
 * @brief Gps update state.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state The state of the gps update
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsStateGPSUpdateStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE _state);

/**
 * @brief User preference for the home type.
 * See [HomeType](#1-31-2) to get the drone actual home type.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of the home position
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsStateHomeTypeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE _type);

/**
 * @brief Return home trigger delay. This delay represents the time after which the return home is automatically triggered after a disconnection.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _delay Delay in second
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsStateReturnHomeDelayChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _delay);

/**
 * @brief Geofence center location. This location represents the center of the geofence zone. This is updated at a maximum frequency of 1 Hz.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude GPS latitude in decimal degrees
 * @param _longitude GPS longitude in decimal degrees
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSSettingsStateGeofenceCenterChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude);

/**
 * @brief Camera orientation.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _tilt Tilt camera consign for the drone [-100;100]
 * @param _pan Pan camera consign for the drone [-100;100]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3CameraStateOrientation (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int8_t _tilt, int8_t _pan);

/**
 * @brief Orientation of the center of the camera.
 * This is the value to send when you want to center the camera.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _tilt Tilt value (in degree)
 * @param _pan Pan value (in degree)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3CameraStateDefaultCameraOrientation (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int8_t _tilt, int8_t _pan);

/**
 * @brief Camera orientation with float arguments.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _tilt Tilt camera consign for the drone [deg]
 * @param _pan Pan camera consign for the drone [deg]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3CameraStateOrientationV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _tilt, float _pan);

/**
 * @brief Orientation of the center of the camera.
 * This is the value to send when you want to center the camera.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _tilt Tilt value [deg]
 * @param _pan Pan value [deg]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3CameraStateDefaultCameraOrientationV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _tilt, float _pan);

/**
 * @brief Camera Orientation velocity limits.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _max_tilt Absolute max tilt velocity [deg/s]
 * @param _max_pan Absolute max pan velocity [deg/s]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3CameraStateVelocityRange (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _max_tilt, float _max_pan);

/**
 * @brief Electric frequency.
 * This piece of information is used for the antiflickering when the [AntiflickeringMode](#1-30-1) is set to *auto*.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _frequency Type of the electric frequency
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3AntiflickeringStateElectricFrequencyChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY _frequency);

/**
 * @brief Antiflickering mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Mode of the anti flickering functionnality
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3AntiflickeringStateModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE _mode);

/**
 * @brief Number of GPS satellites.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _numberOfSatellite The number of satellite
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSStateNumberOfSatelliteChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _numberOfSatellite);

/**
 * @brief Home type availability.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of the return home
 * @param _available 1 if this type is available, 0 otherwise
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSStateHomeTypeAvailabilityChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE _type, uint8_t _available);

/**
 * @brief Home type.
 * This choice is made by the drone, according to the [PreferredHomeType](#1-24-4) and the [HomeTypeAvailability](#1-31-1). The drone will choose the type matching with the user preference only if this type is available. If not, it will chose a type in this order:
 * FOLLOWEE ; TAKEOFF ; PILOT ; FIRST_FIX
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of the return home chosen
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3GPSStateHomeTypeChosenChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE _type);

/**
 * @brief Pro features.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _features Bitfield representing enabled features.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3PROStateFeatures (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint64_t _features);

/**
 * @brief List of all connected accessories. This event presents the list of all connected accessories. To actually use the component, use the component dedicated feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Id of the accessory for the session.
 * @param _accessory_type Accessory type
 * @param _uid Unique Id of the accessory.\nThis id is unique by accessory_type.
 * @param _swVersion Software Version of the accessory.
 * @param _list_flags List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3AccessoryStateConnectedAccessories (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _id, eARCOMMANDS_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE _accessory_type, const char * _uid, const char * _swVersion, uint8_t _list_flags);

/**
 * @brief Connected accessories battery.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Id of the accessory for the session.
 * @param _batteryLevel Battery level in percentage.
 * @param _list_flags List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3AccessoryStateBattery (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _id, uint8_t _batteryLevel, uint8_t _list_flags);

/**
 * @brief Alert sound state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the alert sound
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateARDrone3SoundStateAlertSound (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE _state);


// Feature common


/**
 * @brief Signals the remote that the host will disconnect.
 * 
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonNetworkDisconnect (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Ask for all settings.
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsAllSettings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Reset all settings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsReset (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set the product name.
 * It also sets the name of the SSID for Wifi products and advertisement name for BLE products (changed after a reboot of the product).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _name Product name
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsProductName (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _name);

/**
 * @brief Set the country for Wifi products.
 * This can modify Wifi band and/or channel.
 * **Please note that you might be disconnected from the product after changing the country as it changes Wifi parameters.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _code Country code with ISO 3166 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsCountry (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _code);

/**
 * @brief Enable auto-country.
 * If auto-country is set, the drone will guess its Wifi country by itself by checking other Wifi country around it.
 * **Please note that you might be disconnected from the product after changing the country as it changes Wifi parameters.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _automatic Boolean : 0 : Manual / 1 : Auto
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsAutoCountry (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _automatic);

/**
 * @brief Ask for all states.
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonAllStates (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set the date.
 * This date is taken by the drone as its own date.
 * So medias and other files will be dated from this date
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _date Date with ISO-8601 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonCurrentDate (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _date);

/**
 * @brief Set the time.
 * This time is taken by the drone as its own time.
 * So medias and other files will be dated from this time
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _time Time with ISO-8601 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonCurrentTime (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _time);

/**
 * @brief Reboot the product.
 * The product will accept this command only if is not flying.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonReboot (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Switch off after an overheat.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonOverHeatSwitchOff (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Ventilate after an overheat.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonOverHeatVentilate (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Inform about hud entering.
 * Tell the drone that the controller enters/leaves the piloting hud.
 * On a non-flying products it is used to know when a run begins.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _piloting 0 when the application is not in the piloting HUD, 1 when it enters the HUD.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonControllerIsPiloting (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _piloting);

/**
 * @brief Set wifi indoor/outdoor mode.
 * **Please note that you might be disconnected from the product after changing the indoor/outdoor setting as it changes Wifi parameters.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _outdoor 1 if it should use outdoor wifi settings, 0 otherwise
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonWifiSettingsOutdoorSetting (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _outdoor);

/**
 * @brief Start a FlightPlan based on a mavlink file existing on the drone.
 * 
 * Requirements are:
 * * Product is calibrated
 * * Product should be in outdoor mode
 * * Product has fixed its GPS
 * 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _filepath flight plan file path from the mavlink ftp root
 * @param _type type of the played mavlink file
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkStart (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _filepath, eARCOMMANDS_COMMON_MAVLINK_START_TYPE _type);

/**
 * @brief Pause a FlightPlan that was playing.
 * To unpause a FlightPlan, see [StartFlightPlan](#0-11-0)
 * 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkPause (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Stop a FlightPlan that was playing.
 * 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkStop (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set ReturnHome behavior during FlightPlan
 * When set, drone will return home, after return home delay, if a disconnection occurs during execution of FlightPlan
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value 1 to enable, 0 to disable
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanSettingsReturnHomeOnDisconnect (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _value);

/**
 * @brief Start or abort magnetometer calibration process.
 * 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _calibrate 1 if the calibration should be started, 0 if it should be aborted
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationMagnetoCalibration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _calibrate);

/**
 * @brief Start or abort Pitot tube calibration process.
 * 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _calibrate 1 if the calibration should be started, 0 if it should be aborted
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationPitotCalibration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _calibrate);

/**
 * @brief Set the position of a run.
 * This will let the product know the controller location for the flight/run. The location is typically used to geotag medias.
 * Only used on products that have no gps.
 * Watch out, this command is not used by BLE products.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Controller latitude in decimal degrees
 * @param _longitude Controller longitude in decimal degrees
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonGPSControllerPositionForRun (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude);

/**
 * @brief Set audio stream direction.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _ready Bit field for TX and RX ready.\nbit 0 is 1 if controller is ready and wants to receive sound (Drone TX)\nbit 1 is 1 if controller is ready and wants to send sound (Drone RX)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAudioControllerReadyForStreaming (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _ready);

/**
 * @brief Set lighting LEDs intensity.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _left Set the left LED intensity value (0 through 255).
 * @param _right Set the right LED intensity value (0 through 255).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonHeadlightsIntensity (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _left, uint8_t _right);

/**
 * @brief Start a paramaterless animation.
 * List of available animations can be retrieved from [AnimationsStateList](#0-25-0).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _anim Animation to start.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAnimationsStartAnimation (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM _anim);

/**
 * @brief Stop a paramaterless animation.
 * List of running animations can be retrieved from [AnimationsStateList](#0-25-0).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _anim Animation to stop.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAnimationsStopAnimation (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM _anim);

/**
 * @brief Stop all running paramaterless animations.
 * List of running animations can be retrieved from [AnimationsStateList](#0-25-0).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAnimationsStopAllAnimations (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Declare an accessory.
 * You can choose the accessory between all accessible for this product.
 * You can get this list through event [SupportedAccessories](#0-27-0).
 * 
 * You can only set the accessory when the modification is enabled.
 * You can know if it possible with the event [AccessoryDeclarationAvailability](#0-27-2).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _accessory Accessory configuration to set.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAccessoryConfig (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY _accessory);

/**
 * @brief The product will inform itself the controller about its charging type (see [ChargingInfoChanged](#0-29-3)).
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _rate The new maximum charge rate.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonChargerSetMaxChargeRate (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE _rate);

/**
 * @brief This command will request a factory reset from the prodcut. *The factory reset procedure implies an automatic reboot*, which will be done immediately after receiving this command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFactoryReset (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Drone will disconnect.
 * This event is mainly triggered when the user presses on the power button of the product.
 * 
 * **This event is a notification, you can't retrieve it in the cache of the device controller.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _cause Cause of the disconnection of the product
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonNetworkEventDisconnection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE _cause);

/**
 * @brief All settings have been sent.
 * 
 * **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateAllSettingsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief All settings have been reset.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateResetChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Product name changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _name Product name
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateProductNameChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _name);

/**
 * @brief Product version.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _software Product software version
 * @param _hardware Product hardware version
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateProductVersionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _software, const char * _hardware);

/**
 * @brief Product serial (1st part).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _high Serial high number (hexadecimal value)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateProductSerialHighChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _high);

/**
 * @brief Product serial (2nd part).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _low Serial low number (hexadecimal value)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateProductSerialLowChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _low);

/**
 * @brief Country changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _code Country code with ISO 3166 format, empty string means unknown country.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateCountryChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _code);

/**
 * @brief Auto-country changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _automatic Boolean : 0 : Manual / 1 : Auto
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonSettingsStateAutoCountryChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _automatic);

/**
 * @brief All states have been sent.
 * 
 * **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateAllStatesChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Battery state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _percent Battery percentage
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateBatteryStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _percent);

/**
 * @brief Mass storage state list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage id (unique)
 * @param _name Mass storage name
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateMassStorageStateListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id, const char * _name);

/**
 * @brief Mass storage info state list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage state id (unique)
 * @param _size Mass storage size in MBytes
 * @param _used_size Mass storage used size in MBytes
 * @param _plugged Mass storage plugged (1 if mass storage is plugged, otherwise 0)
 * @param _full Mass storage full information state (1 if mass storage full, 0 otherwise).
 * @param _internal Mass storage internal type state (1 if mass storage is internal, 0 otherwise)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateMassStorageInfoStateListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id, uint32_t _size, uint32_t _used_size, uint8_t _plugged, uint8_t _full, uint8_t _internal);

/**
 * @brief Date changed.
 * Corresponds to the latest date set on the drone.
 * 
 * **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _date Date with ISO-8601 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateCurrentDateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _date);

/**
 * @brief Time changed.
 * Corresponds to the latest time set on the drone.
 * 
 * **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _time Time with ISO-8601 format
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateCurrentTimeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _time);

/**
 * @brief Mass storage remaining data list.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _free_space Mass storage free space in MBytes
 * @param _rec_time Mass storage record time reamining in minute
 * @param _photo_remaining Mass storage photo remaining
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateMassStorageInfoRemainingListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _free_space, uint16_t _rec_time, uint32_t _photo_remaining);

/**
 * @brief Rssi (Wifi Signal between controller and product) changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _rssi RSSI of the signal between controller and the product (in dbm)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateWifiSignalChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int16_t _rssi);

/**
 * @brief Sensors state list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _sensorName Sensor name
 * @param _sensorState Sensor state (1 if the sensor is OK, 0 if the sensor is NOT OK)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateSensorsStatesListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME _sensorName, uint8_t _sensorState);

/**
 * @brief Product sub-model.
 * This can be used to customize the UI depending on the product.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _model The Model of the product.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateProductModel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL _model);

/**
 * @brief List of countries known by the drone.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _listFlags List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.
 * @param _countryCodes Following of country code with ISO 3166 format, separated by ";". Be careful of the command size allowed by the network used. If necessary, split the list in several commands.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateCountryListKnown (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _listFlags, const char * _countryCodes);

/**
 * @brief Mass storage content changed.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage id (unique)
 * @param _nbPhotos Number of photos (does not include raw photos)
 * @param _nbVideos Number of videos
 * @param _nbPuds Number of puds
 * @param _nbCrashLogs Number of crash logs
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateDeprecatedMassStorageContentChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id, uint16_t _nbPhotos, uint16_t _nbVideos, uint16_t _nbPuds, uint16_t _nbCrashLogs);

/**
 * @brief Mass storage content.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage id (unique)
 * @param _nbPhotos Number of photos (does not include raw photos)
 * @param _nbVideos Number of videos
 * @param _nbPuds Number of puds
 * @param _nbCrashLogs Number of crash logs
 * @param _nbRawPhotos Number of raw photos
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateMassStorageContent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id, uint16_t _nbPhotos, uint16_t _nbVideos, uint16_t _nbPuds, uint16_t _nbCrashLogs, uint16_t _nbRawPhotos);

/**
 * @brief Mass storage content for current run.
 * Only counts the files related to the current run (see [RunId](#0-30-0))
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage id (unique)
 * @param _nbPhotos Number of photos (does not include raw photos)
 * @param _nbVideos Number of videos
 * @param _nbRawPhotos Number of raw photos
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateMassStorageContentForCurrentRun (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id, uint16_t _nbPhotos, uint16_t _nbVideos, uint16_t _nbRawPhotos);

/**
 * @brief Current or last video recording timestamp.
 * Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970.
 * **Please note that values don't persist after drone reboot**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _startTimestamp Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970.
 * @param _stopTimestamp Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970. 0 mean that video is still recording.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCommonStateVideoRecordingTimestamp (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint64_t _startTimestamp, uint64_t _stopTimestamp);

/**
 * @brief Overheat temperature reached.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonOverHeatStateOverHeatChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Overheat regulation type.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _regulationType Type of overheat regulation : 0 for ventilation, 1 for switch off
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonOverHeatStateOverHeatRegulationChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _regulationType);

/**
 * @brief Wifi outdoor mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _outdoor 1 if it should use outdoor wifi settings, 0 otherwise
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonWifiSettingsStateOutdoorSettingsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _outdoor);

/**
 * @brief Playing state of a FlightPlan.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the mavlink
 * @param _filepath flight plan file path from the mavlink ftp root
 * @param _type type of the played mavlink file
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkStateMavlinkFilePlayingStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE _state, const char * _filepath, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE _type);

/**
 * @brief FlightPlan error.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _error State of play error
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkStateMavlinkPlayErrorStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR _error);

/**
 * @brief Mission item has been executed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _idx Index of the mission item. This is the place of the mission item in the list of the items of the mission.\nBegins at 0.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonMavlinkStateMissionItemExecuted (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _idx);

/**
 * @brief Define behavior of drone when disconnection occurs during a flight plan
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state 1 if enabled, 0 if disabled
 * @param _isReadOnly 1 if readOnly, 0 if writable
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanSettingsStateReturnHomeOnDisconnectChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state, uint8_t _isReadOnly);

/**
 * @brief Magneto calib process axis state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _xAxisCalibration State of the x axis (roll) calibration : 1 if calibration is done, 0 otherwise
 * @param _yAxisCalibration State of the y axis (pitch) calibration : 1 if calibration is done, 0 otherwise
 * @param _zAxisCalibration State of the z axis (yaw) calibration : 1 if calibration is done, 0 otherwise
 * @param _calibrationFailed 1 if calibration has failed, 0 otherwise. If this arg is 1, consider all previous arg as 0
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationStateMagnetoCalibrationStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _xAxisCalibration, uint8_t _yAxisCalibration, uint8_t _zAxisCalibration, uint8_t _calibrationFailed);

/**
 * @brief Calibration required.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _required 1 if calibration is required, 0 if current calibration is still valid
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationStateMagnetoCalibrationRequiredState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _required);

/**
 * @brief Axis to calibrate during calibration process.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _axis The axis to calibrate
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationStateMagnetoCalibrationAxisToCalibrateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS _axis);

/**
 * @brief Calibration process state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _started 1 if calibration has started, 0 otherwise
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationStateMagnetoCalibrationStartedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _started);

/**
 * @brief Sent when the state of the pitot calibration has changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of pitot calibration
 * @param _lastError lastError : 1 if an error occured and 0 if not
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCalibrationStatePitotCalibrationStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE _state, uint8_t _lastError);

/**
 * @brief Camera info.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _fov Value of the camera horizontal fov (in degree)
 * @param _panMax Value of max pan (right pan) (in degree)
 * @param _panMin Value of min pan (left pan) (in degree)
 * @param _tiltMax Value of max tilt (top tilt) (in degree)
 * @param _tiltMin Value of min tilt (bottom tilt) (in degree)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonCameraSettingsStateCameraSettingsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _fov, float _panMax, float _panMin, float _tiltMax, float _tiltMin);

/**
 * @brief FlightPlan availability.
 * Availability is linked to GPS fix, magnetometer calibration, sensor states...
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _AvailabilityState Running a flightPlan file is available (1 running a flightPlan file is available, otherwise 0)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanStateAvailabilityStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _AvailabilityState);

/**
 * @brief FlightPlan components state list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _component Drone FlightPlan component id (unique)
 * @param _State State of the FlightPlan component (1 FlightPlan component OK, otherwise 0)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanStateComponentStateListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT _component, uint8_t _State);

/**
 * @brief FlightPlan lock state.
 * Represents the fact that the controller is able or not to stop or pause a playing FlightPlan
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _LockState 1 if FlightPlan is locked: can't pause or stop FlightPlan.\n0 if FlightPlan is unlocked: pause or stop available.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanStateLockStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _LockState);

/**
 * @brief FlightPlan start error.
 * 
 * **This event is a notification, you can't retrieve it in the cache of the device controller.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanEventStartingErrorEvent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief FlightPlan speed clamping.
 * Sent when a speed specified in the FlightPlan file is considered too high by the drone.
 * 
 * **This event is a notification, you can't retrieve it in the cache of the device controller.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonFlightPlanEventSpeedBridleEvent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Controller libARCommands version
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _version version of libARCommands ("1.2.3.4" format)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonARLibsVersionsStateControllerLibARCommandsVersion (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _version);

/**
 * @brief SkyController libARCommands version
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _version version of libARCommands ("1.2.3.4" format)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonARLibsVersionsStateSkyControllerLibARCommandsVersion (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _version);

/**
 * @brief Device libARCommands version
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _version version of libARCommands ("1.2.3.4" format)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonARLibsVersionsStateDeviceLibARCommandsVersion (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _version);

/**
 * @brief Audio stream direction.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _running Bit field for TX and RX running\nbit 0 is 1 if Drone TX is running\nbit 1 is 1 if Drone RX is running
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAudioStateAudioStreamingRunning (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _running);

/**
 * @brief Lighting LEDs intensity.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _left The intensity value for the left LED (0 through 255).
 * @param _right The intensity value for the right LED (0 through 255).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonHeadlightsStateIntensityChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _left, uint8_t _right);

/**
 * @brief Paramaterless animations state list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _anim Animation type.
 * @param _state State of the animation
 * @param _error Error to explain the state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAnimationsStateList (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM _anim, eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE _state, eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ERROR _error);

/**
 * @brief Supported accessories list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _accessory Accessory configurations supported by the product.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAccessoryStateSupportedAccessoriesListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY _accessory);

/**
 * @brief Accessory config.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _newAccessory Accessory configuration reported by firmware.
 * @param _error Error code.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAccessoryStateAccessoryConfigChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY _newAccessory, eARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR _error);

/**
 * @brief Availability to declare or not an accessory.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 1 if the modification of the accessory Config is enabled, 0 otherwise
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonAccessoryStateAccessoryConfigModificationEnabled (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled);

/**
 * @brief Max charge rate.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _rate The current maximum charge rate.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonChargerStateMaxChargeRateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE _rate);

/**
 * @brief Current charge state.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _status Charger status.
 * @param _phase The current charging phase.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonChargerStateCurrentChargeStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS _status, eARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE _phase);

/**
 * @brief Last charge rate.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _rate The charge rate recorded by the firmware for the last charge.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonChargerStateLastChargeRateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE _rate);

/**
 * @brief Charging information.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _phase The current charging phase.
 * @param _rate The charge rate. If phase is DISCHARGING, refers to the last charge.
 * @param _intensity The charging intensity, in dA. (12dA = 1,2A) ; If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known.
 * @param _fullChargingTime The full charging time estimated, in minute. If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonChargerStateChargingInfo (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE _phase, eARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE _rate, uint8_t _intensity, uint8_t _fullChargingTime);

/**
 * @brief Current run id.
 * A run id is uniquely identifying a run or a flight.
 * For each run is generated on the drone a file which can be used by Academy to sum up the run.
 * Also, each medias taken during a run has a filename containing the run id.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _runId Id of the run
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateCommonRunStateRunIdChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _runId);


// Feature controller_info


/**
 * @brief Controller gps info.
 * This command is not acknowledged by the drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Latitude of the controller (in deg)
 * @param _longitude Longitude of the controller (in deg)
 * @param _altitude Altitude of the controller (in meters, according to sea level)
 * @param _horizontal_accuracy Horizontal accuracy (in meter)
 * @param _vertical_accuracy Vertical accuracy (in meter)
 * @param _north_speed North speed (in meter per second)
 * @param _east_speed East speed (in meter per second)
 * @param _down_speed Vertical speed (in meter per second) (down is positive)
 * @param _timestamp Timestamp of the gps info
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateControllerInfoGps (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, float _altitude, float _horizontal_accuracy, float _vertical_accuracy, float _north_speed, float _east_speed, float _down_speed, double _timestamp);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _pressure Atmospheric pressure in Pa
 * @param _timestamp Timestamp of the barometer info
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateControllerInfoBarometer (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _pressure, double _timestamp);


// Feature debug


/**
 * @brief Cmd sent by controller to get all settings info (generate "settings_info" events).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDebugGetAllSettings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Change setting value.
 * Cmd sent by controller to change a writable setting.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Setting Id.
 * @param _value New setting value (string encoded).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDebugSetSetting (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _id, const char * _value);

/**
 * @brief Sent by the drone as answer to get_settings_info
 * Describe a debug setting and give the current value.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _list_flags List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\nFlags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @param _id Setting Id.
 * @param _label Setting displayed label (single line).
 * @param _type Setting type.\nSetting type.
 * @param _mode Setting mode.\nSetting mode.
 * @param _range_min Setting range minimal value for decimal type.
 * @param _range_max Setting range max value for decimal type.
 * @param _range_step Setting step value for decimal type
 * @param _value Current Setting value (string encoded).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDebugSettingsInfo (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _list_flags, uint16_t _id, const char * _label, eARCOMMANDS_DEBUG_SETTING_TYPE _type, eARCOMMANDS_DEBUG_SETTING_MODE _mode, const char * _range_min, const char * _range_max, const char * _range_step, const char * _value);

/**
 * @brief Setting value changed.
 * Cmd sent by drone when setting changed occurred.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Setting Id.
 * @param _value New setting value (string encoded).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDebugSettingsList (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _id, const char * _value);


// Feature drone_manager


/**
 * @brief The list will contain:
 * * known drones not currently visible. * known drones currently visible. * unknown drones currently visible.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDroneManagerDiscoverDrones (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Request connection to a specific drone. Override the auto-selected drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _serial Serial number of the drone.
 * @param _key Security key (passphrase) to use.\nThis arg is ignored if the drone security is 'none'.\nIf the drone manager has a saved key for the drone, pass an empty string to use it
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDroneManagerConnect (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _serial, const char * _key);

/**
 * @brief Forget the given drone. If the drone is the selected one, the auto-selection will run again.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _serial Serial number of the drone to forget.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDroneManagerForget (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _serial);

/**
 * @brief Item describing a drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _serial Serial number of the drone.
 * @param _model Model id of the drone.
 * @param _name Name (SSID) of the drone.
 * @param _connection_order 0 if the drone is unknwon (never connected).\nElse, order of last connection (1 = most recent)
 * @param _active 1 if the drone is active (the drone manager tries to connect or is connected to it)\n0 if the drone is not the active one.
 * @param _visible 1 if the drone is currently visible, 0 otherwise.
 * @param _security Security method used by the drone.\nThe security of the drone network.
 * @param _has_saved_key 1 if the drone manager has a saved security key for the drone, 0 otherwise.\nIf security method is not 'none', and this value is 0, then the controller should prompt the user for a passphrase before sending a connect.
 * @param _rssi The drone rssi (wifi signal strength estimation).\nThe value is meaningless if the drone is not visible.
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDroneManagerDroneListItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _serial, uint16_t _model, const char * _name, uint8_t _connection_order, uint8_t _active, uint8_t _visible, eARCOMMANDS_DRONE_MANAGER_SECURITY _security, uint8_t _has_saved_key, int8_t _rssi, uint8_t _list_flags);

/**
 * @brief State of the connection.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Current state of the connection.\nThe state of the connection to a drone.
 * @param _serial Serial number of the drone.
 * @param _model Model id of the drone.
 * @param _name Name (SSID) of the drone.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDroneManagerConnectionState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE _state, const char * _serial, uint16_t _model, const char * _name);

/**
 * @brief Authentication failed because of a wrong key (passphrase).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _serial Serial number of the drone.
 * @param _model Model id of the drone.
 * @param _name Name (SSID) of the drone.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDroneManagerAuthenticationFailed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _serial, uint16_t _model, const char * _name);

/**
 * @brief Connection refused by the drone because another peer is already connected to.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _serial Serial number of the drone.
 * @param _model Model id of the drone.
 * @param _name Name (SSID) of the drone.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDroneManagerConnectionRefused (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _serial, uint16_t _model, const char * _name);

/**
 * @brief Item describing a known drone (already connected).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _serial Serial number of the drone.
 * @param _model Model id of the drone.
 * @param _name Last visible Name (SSID) of the drone.
 * @param _security Security method used by the drone.\nThe security of the drone network.
 * @param _has_saved_key 1 if the drone manager has a saved security key for the drone, 0 otherwise.\nIf security method is not 'none', and this value is 0, then the controller should prompt the user for a passphrase before sending a connect.
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateDroneManagerKnownDroneItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _serial, uint16_t _model, const char * _name, eARCOMMANDS_DRONE_MANAGER_SECURITY _security, uint8_t _has_saved_key, uint8_t _list_flags);


// Feature follow_me


/**
 * @brief Start a FollowMe with all its params set to the default params.
 * Sending this command will stop other running followMe.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode FollowMe mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeStart (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_FOLLOW_ME_MODE _mode);

/**
 * @brief Stop current followMe.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeStop (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Configure the geographic FollowMe.
 * This should only be taken in account if arg behavior in [state](#134-3) is equal to Follow.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Geographic and Relative follow me configuration parameters
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_DISTANCE ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_ELEVATION ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_AZIMUTH
 * @param _distance The distance leader-follower in meter\nNot used when arg start is at 0
 * @param _elevation The elevation leader-follower in rad (not used when arg start is at 0)
 * @param _azimuth The azimuth north-leader-follower in rad (not used when arg start is at 0)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeConfigureGeographic (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _distance, float _elevation, float _azimuth);

/**
 * @brief Configure the relative FollowMe.
 * This should only be taken in account if arg behavior in [state](#134-3) is equal to Follow
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Geographic and Relative follow me configuration parameters
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_DISTANCE ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_ELEVATION ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_AZIMUTH
 * @param _distance The distance leader-follower in meter
 * @param _elevation The elevation leader-follower in rad
 * @param _azimuth The azimuth north-leader-follower in rad
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeConfigureRelative (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _distance, float _elevation, float _azimuth);

/**
 * @brief Stop current followMe animation.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeStopAnimation (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Start a helicoid animation.
 * The helicoid animation allows the drone to revolve around the target while going up, with a fixed radius.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Helicoid animation configuration parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_REVOLUTION_NB ; ARCOMMANDS_FLAG_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_VERTICAL_DISTANCE
 * @param _speed The desired speed of the anim in m/s\nNot used when speed_is_default is 1
 * @param _revolution_number The number of revolution (in turn)\nNegative value is infinite\nExample: 1.5 makes an entire turn plus half of a turn\nNot used when revolutionNb_is_default is 1
 * @param _vertical_distance Distance that should be made by the product to reach the top of the helicoid in m\nNot used when verticalDistance_is_default is 1
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeStartHelicoidAnim (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _revolution_number, float _vertical_distance);

/**
 * @brief Start a swing animation.
 * The swing animation enables a vertical point of view while the drone passes over the target.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Swing configure parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_SWING_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_SWING_CONFIGURE_PARAM_VERTICAL_DISTANCE
 * @param _speed The desired speed of the anim in m/s\nNot used when speed_is_default is 1\nNot used when start is 0
 * @param _vertical_distance Distance that should be made by the product to reach the top of the swing in m\nNot used when verticalDistance_is_default is 1\nNot used when start is 0
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeStartSwingAnim (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _vertical_distance);

/**
 * @brief Start a boomerang animation.
 * The boomerang animation enables a zoom-out/zoom-in trajectory while preserving the framing chosen by the user.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Boomerang animation configure parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_DISTANCE
 * @param _speed The desired speed of the anim in m/s\nNot used when speed_is_default is 1\nNot used when start is 0
 * @param _distance Distance that should be made by the product to reach its return point in m\nNot used when distance_is_default is 1\nNot used when start is 0
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeStartBoomerangAnim (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _distance);

/**
 * @brief Start a candle animation.
 * The candle animation enables a zoom-in directly on the target followed by a vertical zoom-out.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Candle animation configure parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_VERTICAL_DISTANCE
 * @param _speed The desired speed of the anim in m/s\nNot used when speed_is_default is 1\nNot used when start is 0
 * @param _vertical_distance Distance that should be made by the product to reach the top of the vertical zoom-out in m\nNot used when verticalDistance_is_default is 1\nNot used when start is 0
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeStartCandleAnim (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _vertical_distance);

/**
 * @brief Start a dolly slide animation.
 * Allows the drone to catch up to the target before flying past it, creating a zoom-in/zoom_out effect without a curved path.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Dolly slide animation configure parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_ANGLE ; ARCOMMANDS_FLAG_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_HORIZONTAL_DISTANCE
 * @param _speed The desired speed of the anim in m/s\nNot used when speed_is_default is 1\nNot used when start is 0
 * @param _angle Desired angle Product-User-Target in rad\nNot used when angle_is_default is 1\nNot used when start is 0
 * @param _horizontal_distance Distance that should be made by the product to reach its target in m\nNot used when horizontalDistance_is_default is 1\nNot used when start is 0
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeStartDollySlideAnim (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _angle, float _horizontal_distance);

/**
 * @brief Set the desired target framing in the video.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _horizontal Horizontal position in the video (in %, from left to right)
 * @param _vertical Vertical position in the video (in %, from bottom to top)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeTargetFramingPosition (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int8_t _horizontal, int8_t _vertical);

/**
 * @brief Send vision detection results.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _target_azimuth Horizontal north-drone-target angle in radian
 * @param _target_elevation Vertical angle horizon-drone-target in radian
 * @param _change_of_scale Normalized relative radial speed in 1/second
 * @param _confidence_index Confidence index of the detection (from 0 to 255, the highest is the best)
 * @param _is_new_selection Boolean. 1 if the selection is new, 0 otherwise
 * @param _timestamp Acquisition time of processed picture in millisecond
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeTargetImageDetection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _target_azimuth, float _target_elevation, float _change_of_scale, uint8_t _confidence_index, uint8_t _is_new_selection, uint64_t _timestamp);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Mode asked by user\nFollowMe mode
 * @param _behavior Behavior of the drone according to the asked mode\nFollowMe behavior
 * @param _animation Current animation.\nThis parameter has been deprecated. Please use the animation feature.\nFollowMe animation type
 * @param _animation_available List of available animations\nThis parameter has been deprecated. Please use the animation feature.\nFollowMe animation type
 * @param _animation_available a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_NONE ; ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_HELICOID ; ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_SWING ; ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_BOOMERANG ; ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_CANDLE ; ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_DOLLY_SLIDE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_FOLLOW_ME_MODE _mode, eARCOMMANDS_FOLLOW_ME_BEHAVIOR _behavior, eARCOMMANDS_FOLLOW_ME_ANIMATION _animation, uint16_t _animation_available);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode FollowMe mode
 * @param _missing_requirements List of missing requirements to enter this mode on start.\nBit is 0 if the input is not ok, 1 if the input is ok.\nIf at least one input is missing, drone won't able to follow the target.\nIt won't use any fallback either\nInput values used by the FollowMe
 * @param _missing_requirements a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_CALIBRATED ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_GPS_GOOD_ACCURACY ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_TARGET_GPS_GOOD_ACCURACY ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_TARGET_BAROMETER_OK ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_FAR_ENOUGH ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_HIGH_ENOUGH ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_IMAGE_DETECTION
 * @param _improvements List of inputs that can improve the mode.\nBit is 0 if the input is not ok, 1 if the input is ok.\nIf at least one input is missing, a downgraded mode will be used. See behavior\nInput values used by the FollowMe
 * @param _improvements a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_CALIBRATED ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_GPS_GOOD_ACCURACY ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_TARGET_GPS_GOOD_ACCURACY ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_TARGET_BAROMETER_OK ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_FAR_ENOUGH ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_HIGH_ENOUGH ; ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_IMAGE_DETECTION
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeModeInfo (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_FOLLOW_ME_MODE _mode, uint16_t _missing_requirements, uint16_t _improvements);

/**
 * @brief Geographic configuration changed.
 * This event is only valid when arg behavior in [state](#134-3) is equal to Follow.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Geographic and Relative follow me configuration parameters
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_DISTANCE ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_ELEVATION ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_AZIMUTH
 * @param _distance The distance leader-follower in meter\nIf distance is default, this value is the current drone distance
 * @param _elevation The elevation leader-follower in rad\nIf elevation is default, this value is the current leader to drone elevation
 * @param _azimuth The azimuth north-leader-follower in rad\nIf azimuth is default, this value is the current leader to drone azimuth
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeGeographicConfig (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _distance, float _elevation, float _azimuth);

/**
 * @brief Relative configuration changed.
 * This event is only valid when arg behavior in [state](#134-3) is equal to Follow.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Geographic and Relative follow me configuration parameters
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_DISTANCE ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_ELEVATION ; ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_AZIMUTH
 * @param _distance The distance leader-follower in meter\nIf distance is default, this value is the current drone distance
 * @param _elevation The elevation leader-follower in rad\nIf elevation is default, this value is the current leader to drone elevation
 * @param _azimuth The azimuth course-leader-follower in rad\nIf azimuth is default, this value is the current leader to drone azimuth
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeRelativeConfig (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _distance, float _elevation, float _azimuth);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Target latitude (in degrees)
 * @param _longitude Target longitude (in degrees)
 * @param _altitude Target altitude (in meters, relative to sea level)
 * @param _north_speed Target north speed (in m/s)
 * @param _east_speed Target east speed (in m/s)
 * @param _down_speed Target down speed (in m/s)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeTargetTrajectory (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, float _altitude, float _north_speed, float _east_speed, float _down_speed);

/**
 * @brief Helicoid animation configuration.
 * This should only be taken in account if arg animation in [state](#134-3) is equal to helicoid.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Helicoid animation configuration parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_REVOLUTION_NB ; ARCOMMANDS_FLAG_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_VERTICAL_DISTANCE
 * @param _speed The speed of the anim in m/s
 * @param _revolution_nb The number of revolution (in turn)\nNegative value is infinite
 * @param _vertical_distance Distance that will be made by the product to reach the top of the helicoid in m
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeHelicoidAnimConfig (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _revolution_nb, float _vertical_distance);

/**
 * @brief Swing animation configuration changed.
 * This should only be taken in account if arg animation in [state](#134-3) is equal to swing.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Swing configure parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_SWING_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_SWING_CONFIGURE_PARAM_VERTICAL_DISTANCE
 * @param _speed The speed of the anim in m/s
 * @param _vertical_distance Distance that will be made by the product to reach the top of the swing in m
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeSwingAnimConfig (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _vertical_distance);

/**
 * @brief Boomerang animation configuration changed.
 * This should only be taken in account if arg animation in [state](#134-3) is equal to boomerang.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Boomerang animation configure parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_DISTANCE
 * @param _speed The speed of the anim in m/s
 * @param _distance Distance that will be made by the product to reach its return point in m
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeBoomerangAnimConfig (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _distance);

/**
 * @brief Candle animation configuration changed.
 * This should only be taken in account if arg animation in [state](#134-3) is equal to candle.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Candle animation configure parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_VERTICAL_DISTANCE
 * @param _speed The speed of the anim in m/s
 * @param _vertical_distance Distance that will be made by the product to reach the top of the vertical zoom-out in m
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeCandleAnimConfig (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _vertical_distance);

/**
 * @brief DollySlide animation configuration changed.
 * This should only be taken in account if arg animation in [state](#134-3) is equal to dolly_slide.
 * This message has been deprecated. Please use the animation feature.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _use_default Dolly slide animation configure parameters.
 * @param _use_default a combination of ; ARCOMMANDS_FLAG_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_SPEED ; ARCOMMANDS_FLAG_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_ANGLE ; ARCOMMANDS_FLAG_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_HORIZONTAL_DISTANCE
 * @param _speed The speed of the anim in m/s
 * @param _angle Angle Product-User-Target in rad
 * @param _horizontal_distance Distance that will be made by the product to reach its target in m
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeDollySlideAnimConfig (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _use_default, float _speed, float _angle, float _horizontal_distance);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _horizontal Horizontal position in the video (in %, from left to right)
 * @param _vertical Vertical position in the video (in %, from bottom to top)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeTargetFramingPositionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int8_t _horizontal, int8_t _vertical);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the image detection
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateFollowMeTargetImageDetectionState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_FOLLOW_ME_IMAGE_DETECTION_STATUS _state);


// Feature JumpingSumo


/**
 * @brief Ask the JS speed and turn ratio.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _flag Boolean for "touch screen".
 * @param _speed Speed value [-100:100].
 * @param _turn Turn value. [-100:100]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoPilotingPCMD (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _flag, int8_t _speed, int8_t _turn);

/**
 * @brief Request a posture
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type Type of Posture
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoPilotingPosture (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE _type);

/**
 * @brief Add the specified offset to the current cap.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _offset Offset value in radians.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoPilotingAddCapOffset (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _offset);

/**
 * @brief Stop jump, emergency jump stop, stop jump motor and stay there.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAnimationsJumpStop (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Cancel jump and come back to previous state (if possible).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAnimationsJumpCancel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Request jump loading
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAnimationsJumpLoad (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Request a jump
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type Type of jump
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAnimationsJump (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE _type);

/**
 * @brief Play a parameterless animation.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Animation ID.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAnimationsSimpleAnimation (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID _id);

/**
 * @brief @deprecated
 * Take picture
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage id to take picture
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordPicture (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id);

/**
 * @brief @deprecated
 * Video record
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _record Command to record video
 * @param _mass_storage_id Mass storage id to record
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordVideo (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD _record, uint8_t _mass_storage_id);

/**
 * @brief Take picture
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordPictureV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Video record
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _record Command to record video
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordVideoV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD _record);

/**
 * @brief Auto-select channel of choosen band
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi selection (auto, manual)
 * @param _band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param _channel The channel (not used in auto mode)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoNetworkSettingsWifiSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE _type, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND _band, uint8_t _channel);

/**
 * @brief Launches wifi network scan
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoNetworkWifiScan (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND _band);

/**
 * @brief Controller inquire the list of authorized wifi channels.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoNetworkWifiAuthChannel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Master volume control.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _volume Master audio volume [0:100].
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAudioSettingsMasterVolume (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _volume);

/**
 * @brief Audio Theme.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _theme The audio theme to set.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAudioSettingsTheme (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME _theme);

/**
 * @brief Command to ask device all metadata scripts.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoRoadPlanAllScriptsMetadata (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Notify device that a new file has been uploaded.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uuid UUID of uploaded file.
 * @param _md5Hash MD5 hash code computed over file.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoRoadPlanScriptUploaded (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _uuid, const char * _md5Hash);

/**
 * @brief Ask the device to delete a script.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uuid UUID of the file to delete.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoRoadPlanScriptDelete (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _uuid);

/**
 * @brief Ask the device to play a script.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uuid UUID of the file to play.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoRoadPlanPlayScript (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _uuid);

/**
 * @brief @deprecated
 * Outdoor property
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _outdoor 1 if outdoor, 0 if indoor
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoSpeedSettingsOutdoor (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _outdoor);

/**
 * @brief Enable/disable video streaming.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable 1 to enable, 0 to disable.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaStreamingVideoEnable (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief Set video automatic recording state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 0: Disabled 1: Enabled.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoVideoSettingsAutorecord (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled);

/**
 * @brief State of posture changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of posture
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoPilotingStatePostureChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE _state);

/**
 * @brief JS alert state changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state JS alert state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoPilotingStateAlertStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state);

/**
 * @brief Notification sent when JS speed changes.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _speed Speed command applied to motors in range [-100;100].
 * @param _realSpeed Actual real-world speed in cm/s. Value -32768 returned if not available.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoPilotingStateSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int8_t _speed, int16_t _realSpeed);

/**
 * @brief State of jump load changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of jump load
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAnimationsStateJumpLoadChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE _state);

/**
 * @brief State of jump type changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of jump type.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAnimationsStateJumpTypeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE _state);

/**
 * @brief State about the jump motor problem
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _error Enum describing the problem of the motor
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAnimationsStateJumpMotorProblemChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR _error);

/**
 * @brief @deprecated
 * Product GPS versions
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _software Product GPS software version
 * @param _hardware Product GPS hardware version
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoSettingsStateProductGPSVersionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _software, const char * _hardware);

/**
 * @brief @deprecated
 * State of picture recording
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state 1 if picture has been taken, 0 otherwise
 * @param _mass_storage_id Mass storage id where the picture was recorded
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordStatePictureStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state, uint8_t _mass_storage_id);

/**
 * @brief @deprecated
 * State of video recording
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of video
 * @param _mass_storage_id Mass storage id where the video was recorded
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordStateVideoStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE _state, uint8_t _mass_storage_id);

/**
 * @brief State of device picture recording changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of device picture recording
 * @param _error Error to explain the state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordStatePictureStateChangedV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error);

/**
 * @brief State of device video recording changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of device video recording
 * @param _error Error to explain the state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordStateVideoStateChangedV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE _state, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR _error);

/**
 * @brief Event of picture recording
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _event Last event of picture recording
 * @param _error Error to explain the event
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordEventPictureEventChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error);

/**
 * @brief Event of video recording
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _event Event of video recording
 * @param _error Error to explain the event
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaRecordEventVideoEventChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT _event, eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR _error);

/**
 * @brief Wifi selection from product
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi selection settings
 * @param _band The actual wifi band state
 * @param _channel The channel (depends of the band)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoNetworkSettingsStateWifiSelectionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel);

/**
 * @brief One scanning result found
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _ssid SSID of the AP
 * @param _rssi RSSI of the AP in dbm (negative value)
 * @param _band The band : 2.4 GHz or 5 GHz
 * @param _channel Channel of the AP
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoNetworkStateWifiScanListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _ssid, int16_t _rssi, eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND _band, uint8_t _channel);

/**
 * @brief State sent when all scanning result sent
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoNetworkStateAllWifiScanChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Notify of an Authorized Channel.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band of this channel : 2.4 GHz or 5 GHz
 * @param _channel The authorized channel.
 * @param _in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoNetworkStateWifiAuthChannelListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out);

/**
 * @brief Notify the end of the list of Authorized wifi Channel.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoNetworkStateAllWifiAuthChannelChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Notification sent by the firmware to give an indication of the WiFi link quality.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _quality The WiFi link quality in range 0-6, the higher the value, the higher the link quality.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoNetworkStateLinkQualityChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _quality);

/**
 * @brief Master volume control.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _volume Master audio volume [0:100].
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAudioSettingsStateMasterVolumeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _volume);

/**
 * @brief Command to notify controller of new Audio Theme.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _theme The audio theme to set.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoAudioSettingsStateThemeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME _theme);

/**
 * @brief Update the controller with metadata.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uuid Script uuid for which metadata changed.
 * @param _version Version number for this script.
 * @param _product Product targeted by script.
 * @param _name Display name of the script.
 * @param _lastModified Timestamp relative to the UNIX epoch of the last time the file was modified.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoRoadPlanStateScriptMetadataListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _uuid, uint8_t _version, const char * _product, const char * _name, uint64_t _lastModified);

/**
 * @brief Notify controller that all script metadatas are updated.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoRoadPlanStateAllScriptsMetadataChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Device response to ScriptUploaded command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _resultCode Error code.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoRoadPlanStateScriptUploadChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE _resultCode);

/**
 * @brief Device response to ScriptDelete command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _resultCode Error code.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoRoadPlanStateScriptDeleteChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE _resultCode);

/**
 * @brief Device response to PlayScript command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _resultCode Error code.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoRoadPlanStatePlayScriptChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE _resultCode);

/**
 * @brief @deprecated
 * Outdoor property sent by product
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _outdoor 1 if outdoor, 0 if indoor
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoSpeedSettingsStateOutdoorChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _outdoor);

/**
 * @brief Return video streaming status.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled Current video streaming status.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoMediaStreamingStateVideoEnableChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED _enabled);

/**
 * @brief Get video automatic recording status.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 0: Disabled 1: Enabled.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateJumpingSumoVideoSettingsStateAutorecordChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled);


// Feature mapper


/**
 * @brief Grabbed buttons are sent to the app and are not handled by the mapper
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _buttons Buttons to grab/ungrab (bitfield)
 * @param _axes Axes to grab/ungrab (bitfield)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperGrab (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _buttons, uint32_t _axes);

/**
 * @brief An action can only be mapped to one button set.
 * Each action can be mapped to different buttons for different products.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _product Product (see libARDiscovery for list)
 * @param _action The action (mapped on a button)
 * @param _buttons Buttons combination mapped to the action (bitfield).\nSet 0 (no button) to unmap an action
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperMapButtonAction (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _product, eARCOMMANDS_MAPPER_BUTTON_ACTION _action, uint32_t _buttons);

/**
 * @brief An action can only be mapped to one axis/button set.
 * Each action can be mapped to different axes/buttons for different products.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _product Product (see libARDiscovery for list)
 * @param _action The action (mapped on an axis)
 * @param _axis The axis number on which the action will be mapped.\nSet a negative value to unmap the action.
 * @param _buttons Buttons combination mapped to the action (bitfield).\nCan be zero if no buttons are required.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperMapAxisAction (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _product, eARCOMMANDS_MAPPER_AXIS_ACTION _action, int32_t _axis, uint32_t _buttons);

/**
 * @brief Resets the mappings, axis exponential parameters, and axis inversion for the given product.
 * If the product is given as 0 (zero), the all products are reset.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _product The product to reset, or 0 to reset all products.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperResetMapping (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _product);

/**
 * @brief By default, each axis can have a different expo value.
 * For some products/mappings configuration, the expo values of two axes belonging to the same physical joystick can be locked to the same value. In this case, setting the value for one axis will automatically change both values.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _product Product (see libARDiscovery for list).\nSet to 0 to apply to all products
 * @param _axis Axis number. Set to -1 to apply to all axes.
 * @param _expo Expo type
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperSetExpo (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _product, int32_t _axis, eARCOMMANDS_MAPPER_EXPO_TYPE _expo);

/**
 * @brief Axis inversion has no effect on grabbed axes, nor on virtual buttons that might be generated from axes.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _product Product (see libARDiscovery for list).\nSet to 0 to apply to all products
 * @param _axis Axis number
 * @param _inverted 0 : Axis not inverted.\n1 : Axis inverted
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperSetInverted (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _product, int32_t _axis, uint8_t _inverted);

/**
 * @brief Grabbed buttons are sent to the app and are not handled by the mapper
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _buttons Grabbed buttons (bitfield)
 * @param _axes Grabbed axes (bitfield)
 * @param _buttons_state For grabbed buttons only.\nState of the button when the grab starts (bitfield)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperGrabState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _buttons, uint32_t _axes, uint32_t _buttons_state);

/**
 * @brief The state of a grabbed button changes
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _button Button id
 * @param _event Button event
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperGrabButtonEvent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _button, eARCOMMANDS_MAPPER_BUTTON_EVENT _event);

/**
 * @brief The state of a grabbed axis changes
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _axis Axis id
 * @param _value Value in range [-100; 100].
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperGrabAxisEvent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _axis, int8_t _value);

/**
 * @brief The resulting map describes all active button mappings of the mapper.
 * Each action can only be mapped once per product.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uid Unique ID of the mapping.
 * @param _product Product (see libARDiscovery for list)
 * @param _action The action (mapped on a button)
 * @param _buttons Buttons combination mapped to the action (bitfield).
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperButtonMappingItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _uid, uint16_t _product, eARCOMMANDS_MAPPER_BUTTON_ACTION _action, uint32_t _buttons, uint8_t _list_flags);

/**
 * @brief The resulting map describes all active axis mappings of the mapper.
 * Each action can only be mapped once per product.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uid Unique ID of the mapping.
 * @param _product Product (see libARDiscovery for list)
 * @param _action The action (mapped on an axis)
 * @param _axis The axis number on which the action is mapped.
 * @param _buttons Buttons combination mapped to the action (bitfield).
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperAxisMappingItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _uid, uint16_t _product, eARCOMMANDS_MAPPER_AXIS_ACTION _action, int32_t _axis, uint32_t _buttons, uint8_t _list_flags);

/**
 * @brief This event signals the controller application when an application specific axis_event is triggered.
 * Application specific actions are typically used for UI interaction which does not involves the drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _action The action (mapped on an axis)
 * @param _value The current value of the axis.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperApplicationAxisEvent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MAPPER_AXIS_ACTION _action, int8_t _value);

/**
 * @brief This event signals the controller application when an application specific button_event is triggered.
 * Application specific actions are typically used for UI interaction which does not involves the drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _action The action (mapped on a button)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperApplicationButtonEvent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MAPPER_BUTTON_ACTION _action);

/**
 * @brief By default, each axis can have a different expo value.
 * For some products/mappings configuration, the expo values of two axes belonging to the same physical joystick can be locked to the same value. In this case, setting the value for one axis will automatically change both values.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uid Unique ID (for MAP_ITEM type)
 * @param _product Product (see libARDiscovery for list)
 * @param _axis Axis number
 * @param _expo Expo type
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperExpoMapItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _uid, uint16_t _product, int32_t _axis, eARCOMMANDS_MAPPER_EXPO_TYPE _expo, uint8_t _list_flags);

/**
 * @brief Axis inversion has no effect on grabbed axes, nor on virtual buttons that might be generated from axes.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uid Unique ID (for MAP_ITEM type)
 * @param _product Product (see libARDiscovery for list)
 * @param _axis Axis number
 * @param _inverted 0 : Axis not inverted.\n1 : Axis inverted
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperInvertedMapItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint32_t _uid, uint16_t _product, int32_t _axis, uint8_t _inverted, uint8_t _list_flags);

/**
 * @brief This event notifies the application about the currently active product, thus allowing the application to diplay and edit the current mapping without having to guess from other sources.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _product Product (see libARDiscovery for list)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperActiveProduct (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _product);


// Feature mapper_mini


/**
 * @brief An action can only be mapped to one button set.
 * Each action can be mapped to different buttons for different modes.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _modes The modes on which the mapping will be set\nThe piloting mode of the product
 * @param _modes a combination of ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_QUAD ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_PLANE
 * @param _action The action (mapped on a button)
 * @param _buttons Buttons combination mapped to the action (bitfield).\nSet 0 (no button) to unmap an action
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperMiniMapButtonAction (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _modes, eARCOMMANDS_MAPPER_MINI_BUTTON_ACTION _action, uint32_t _buttons);

/**
 * @brief An action can only be mapped to one axis/button set.
 * Each action can be mapped to different axes/buttons for different modes.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _modes The modes on which the mapping will be set\nThe piloting mode of the product
 * @param _modes a combination of ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_QUAD ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_PLANE
 * @param _action The action (mapped on an axis)
 * @param _axis The axis number on which the action will be mapped.\nSet a negative value to unmap the action.
 * @param _buttons Buttons combination mapped to the action (bitfield).\nCan be zero if no buttons are required.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperMiniMapAxisAction (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _modes, eARCOMMANDS_MAPPER_MINI_AXIS_ACTION _action, int8_t _axis, uint32_t _buttons);

/**
 * @brief Resets the mappings for the given mode(s) to their default value.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _modes The mode(s) to reset.\nThe piloting mode of the product
 * @param _modes a combination of ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_QUAD ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_PLANE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperMiniResetMapping (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _modes);

/**
 * @brief The resulting map describes all active button mappings of the product.
 * A mapping can affect one or mode modes, but each action can only be mapped once per mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uid Unique ID of the mapping.
 * @param _modes The modes on which the mapping is set\nThe piloting mode of the product
 * @param _modes a combination of ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_QUAD ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_PLANE
 * @param _action The action (mapped on a button)
 * @param _buttons Buttons combination mapped to the action (bitfield).
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperMiniButtonMappingItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _uid, uint8_t _modes, eARCOMMANDS_MAPPER_MINI_BUTTON_ACTION _action, uint32_t _buttons, uint8_t _list_flags);

/**
 * @brief The resulting map describes all active axis mappings of the product.
 * A mapping can affect one or mode modes, but each action can only be mapped once per mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _uid Unique ID of the mapping.
 * @param _modes The modes on which the mapping is set\nThe piloting mode of the product
 * @param _modes a combination of ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_QUAD ; ARCOMMANDS_FLAG_MAPPER_MINI_MODE_PLANE
 * @param _action The action (mapped on an axis)
 * @param _axis The axis number on which the action is mapped.
 * @param _buttons Buttons combination mapped to the action (bitfield).
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMapperMiniAxisMappingItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _uid, uint8_t _modes, eARCOMMANDS_MAPPER_MINI_AXIS_ACTION _action, int8_t _axis, uint32_t _buttons, uint8_t _list_flags);


// Feature MiniDrone


/**
 * @brief Do a flat trim
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingFlatTrim (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Ask the drone to take off
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingTakeOff (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Ask the drone to move around.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _flag Boolean flag to activate roll/pitch movement
 * @param _roll Roll consign for the MiniDrone [-100;100]
 * @param _pitch Pitch consign for the MiniDrone [-100;100]
 * @param _yaw Yaw consign for the MiniDrone [-100;100]
 * @param _gaz Gaz consign for the MiniDrone [-100;100]
 * @param _timestamp Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingPCMD (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _flag, int8_t _roll, int8_t _pitch, int8_t _yaw, int8_t _gaz, uint32_t _timestamp);

/**
 * @brief Ask the MiniDrone to land
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingLanding (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Put drone in emergency state
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingEmergency (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set MiniDrone automatic take off mode
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of automatic take off mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingAutoTakeOffMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief Set drone FlyingMode. Only supported by WingX
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Drone Flying Mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingFlyingMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE _mode);

/**
 * @brief Set Plane Gear Box. Only supported by WingX
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Plane Gear Box
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingPlaneGearBox (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE _state);

/**
 * @brief Command to toggle between "easy" piloting mode and "preferred" piloting mode.
 * This command only works while the drone is flying.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingTogglePilotingMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Make a flip
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _direction Direction for the flip
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneAnimationsFlip (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION _direction);

/**
 * @brief Change the product cap
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _offset Change the cap with offset angle [-180;180]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneAnimationsCap (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int16_t _offset);

/**
 * @brief @deprecated
 * Take picture
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mass_storage_id Mass storage id to take picture
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMediaRecordPicture (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _mass_storage_id);

/**
 * @brief Take picture
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMediaRecordPictureV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set Max Altitude
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current altitude max in m
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsMaxAltitude (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set Max Tilt
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current tilt max in degree
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsMaxTilt (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set banked turn mode.
 * When banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _value 1 to enable, 0 to disable
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsBankedTurn (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _value);

/**
 * @brief This setting represents the vertical acceleration command that will be sent to the drone when piloting in gaz mode.
 * In this case, closed loop height control is no longer performed; an open loop vertical acceleration command is generated instead.
 * This command results from multiplying the user command coming from the joystick (float value between 0 and 1) by the MaxThrottle setting (also a value between 0 and 1) and by the gravity constant.
 * Thus, we obtain the corresponding value in [m/s²] that will then be mixed with the attitude commands and translated into rotation speeds.
 * As an example, if the value of this setting is 0.5, the maximal acceleration command that can be generated when the user command equals 1 is :
 * acc_cmd_max = 1 * 0.5 * 9.81 m/s² = 4.905 m/s².
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _max Max throttle, between 0 and 1.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsMaxThrottle (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _max);

/**
 * @brief The flight envelope of Mambo FPV has been divided in three piloting modes.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Piloting modes.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsPreferredPilotingMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE _mode);

/**
 * @brief Set Max Vertical speed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max vertical speed in m/s
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsMaxVerticalSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set Max Rotation speed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max rotation speed in degree/s
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsMaxRotationSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Presence of wheels
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _present 1 if present, 0 if not present
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsWheels (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _present);

/**
 * @brief Set Max Horizontal speed (only used in case where PilotingSettings_MaxTilt is not used like in hydrofoil mode)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max Horizontal speed in m/s
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsMaxHorizontalSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set max plane mode rotation speed (only available for wing x)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max plane mode rotation speed in degree/s
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsMaxPlaneModeRotationSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current);

/**
 * @brief Set MiniDrone cut out mode
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable Enable cut out mode (1 if is activate, 0 otherwise)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSettingsCutOutMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief Set the controller latitude for a run.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude Controller latitude in decimal degrees
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneGPSControllerLatitudeForRun (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude);

/**
 * @brief Set the controller longitude for a run.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _longitude Controller longitude in decimal degrees
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneGPSControllerLongitudeForRun (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _longitude);

/**
 * @brief Set the controller type.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type Controller type like iOS or Android
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneConfigurationControllerType (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _type);

/**
 * @brief Set the controller name.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _name Controller name like com.parrot.freeflight3
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneConfigurationControllerName (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _name);

/**
 * @brief USB Light control cmd.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Usb accessory id
 * @param _mode Usb Light mode.
 * @param _intensity Light intensity from 0 (OFF) to 100 (Max intensity).\nOnly used in FIXED mode.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneUsbAccessoryLightControl (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE _mode, uint8_t _intensity);

/**
 * @brief USB Claw control cmd.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Usb accessory id.
 * @param _action USB Claw action.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneUsbAccessoryClawControl (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION _action);

/**
 * @brief USB Gun control cmd.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Usb accessory id
 * @param _action USB Gun action.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneUsbAccessoryGunControl (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORY_GUNCONTROL_ACTION _action);

/**
 * @brief Send the address of the remote controller on which the drone should be paired
 * This is used to pair a Tinos controller
 * Where mac address: MSB-MID-LSB.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _msb_mac 2 most significant bytes of mac address
 * @param _mid_mac 2 middle bytes of mac address
 * @param _lsb_mac 2 least significant bytes of mac address
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneRemoteControllerSetPairedRemote (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _msb_mac, uint16_t _mid_mac, uint16_t _lsb_mac);

/**
 * @brief Set video automatic recording state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable 0: disabled\n1: enabled
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneVideoSettingsAutorecord (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief Set the electric frequency (Anti-flickering).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _frequency Type of the electric frequency.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneVideoSettingsElectricFrequency (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_VIDEOSETTINGS_ELECTRICFREQUENCY_FREQUENCY _frequency);

/**
 * @brief Set video streaming and recording resolution.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type Video resolution type.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneVideoSettingsVideoResolution (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_VIDEOSETTINGS_VIDEORESOLUTION_TYPE _type);

/**
 * @brief Take picture.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamPicture (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Start/Stop video recording.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _record Command to record video
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamVideo (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_MINICAM_VIDEO_RECORD _record);

/**
 * @brief Format mass storage.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamMassStorageFormat (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief MiniDrone send flat trim was correctly processed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingStateFlatTrimChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Drone flying state changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Drone flying state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingStateFlyingStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE _state);

/**
 * @brief Drone alert state changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Drone alert state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingStateAlertStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state);

/**
 * @brief Set MiniDrone automatic take off mode
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of automatic take off mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingStateAutoTakeOffModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief FlyingMode changed. Only supported by WingX
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Drone Flying Mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingStateFlyingModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE _mode);

/**
 * @brief Plane Gear Box changed. Only supported by WingX
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Plane Gear Box
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingStatePlaneGearBoxChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE _state);

/**
 * @brief Event informing about the piloting mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode 
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingStatePilotingModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE _mode);

/**
 * @brief @deprecated
 * State of picture recording
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state 1 if picture has been taken, 0 otherwise
 * @param _mass_storage_id Mass storage id to record
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMediaRecordStatePictureStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state, uint8_t _mass_storage_id);

/**
 * @brief State of device picture recording changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of device picture recording
 * @param _error Error to explain the state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMediaRecordStatePictureStateChangedV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error);

/**
 * @brief Event of picture recording
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _event Last event of picture recording
 * @param _error Error to explain the event
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMediaRecordEventPictureEventChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error);

/**
 * @brief Max Altitude sent by product
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current altitude max
 * @param _min Range min of altitude
 * @param _max Range max of altitude
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsStateMaxAltitudeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Max tilt sent by product
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max tilt
 * @param _min Range min of tilt
 * @param _max Range max of tilt
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsStateMaxTiltChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Banked Turn mode.
 * If banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state 1 if enabled, 0 if disabled
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsStateBankedTurnChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief Event informing about the max throttle.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _max Max throttle, between 0 and 1.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsStateMaxThrottleChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _max);

/**
 * @brief Event informing about the preferred piloting mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode 
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDronePilotingSettingsStatePreferredPilotingModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE _mode);

/**
 * @brief Max vertical speed sent by product
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max vertical speed in m/s
 * @param _min Range min of vertical speed
 * @param _max Range max of vertical speed
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsStateMaxVerticalSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Max rotation speed sent by product
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max rotation speed in degree/s
 * @param _min Range min of rotation speed
 * @param _max Range max of rotation speed
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsStateMaxRotationSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Presence of wheels sent by product
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _present 1 if present, 0 if not present
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsStateWheelsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _present);

/**
 * @brief Max horizontal speed sent by product (only used in case where PilotingSettings_MaxTilt is not used like in hydrofoil mode)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max horizontal speed in m/s
 * @param _min Range min of horizontal speed
 * @param _max Range max of horizontal speed
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsStateMaxHorizontalSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief Max plane rotation speed sent by product (only available for wing x)
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _current Current max plane mode rotation speed in degree/s
 * @param _min Range min of plane mode rotation speed
 * @param _max Range max of plane mode rotation speed
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSpeedSettingsStateMaxPlaneModeRotationSpeedChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _current, float _min, float _max);

/**
 * @brief @deprecated
 * Product Motors versions
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _motor Product Motor number [1 - 4]
 * @param _type Product Motor type
 * @param _software Product Motors software version
 * @param _hardware Product Motors hardware version
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSettingsStateProductMotorsVersionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _motor, const char * _type, const char * _software, const char * _hardware);

/**
 * @brief @deprecated
 * Product Inertial versions
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _software Product Inertial software version
 * @param _hardware Product Inertial hardware version
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSettingsStateProductInertialVersionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _software, const char * _hardware);

/**
 * @brief MiniDrone cut out mode
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable State of cut out mode (1 if is activate, 0 otherwise)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneSettingsStateCutOutModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief @deprecated
 * Flood control regulation
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _delay Delay (in ms) between two PCMD
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneFloodControlStateFloodControlChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint16_t _delay);

/**
 * @brief USB Light accessory state cmd.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Usb accessory id
 * @param _state Usb Light state.
 * @param _intensity Light intensity from 0 (OFF) to 100 (Max intensity).\nOnly used in FIXED state.
 * @param _list_flags List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneUsbAccessoryStateLightState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE _state, uint8_t _intensity, uint8_t _list_flags);

/**
 * @brief USB Claw accessory state cmd.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Usb accessory id
 * @param _state Usb Claw state.
 * @param _list_flags List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneUsbAccessoryStateClawState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE _state, uint8_t _list_flags);

/**
 * @brief USB Gun accessory state cmd.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Usb accessory id.
 * @param _state USB Claw state.
 * @param _list_flags List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneUsbAccessoryStateGunState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _id, eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE _state, uint8_t _list_flags);

/**
 * @brief Get the drone position from takeoff point (0, 0, 0, 0).
 * The orthonormal basis is fixed at this point. The axis are
 * oriented the following way :
 * * X : From the rear of the drone to its front.
 * * Y : From the right of the drone to its left.
 * * Z : Orthogonal to X and Y and oriented upward.
 * * Psi : From 180 to -180 in the clockwise direction,
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _posx Position on X axis, relative to take off position (cm).
 * @param _posy Position on Y axis, relative to take off position (cm).
 * @param _posz Position on Z axis, relative to take off position (cm).
 * @param _psi Psi angle [-180; 180], relative to take off orientation.
 * @param _ts Time elapsed since last data send (ms).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneNavigationDataStateDronePosition (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _posx, float _posy, int16_t _posz, int16_t _psi, int16_t _ts);

/**
 * @brief Event informing about the estimated drone speed in horizontal frame.
 * It is similar to NED frame but with drone heading.
 * Down speed is positive when the drone is going down.
 * Speed is in m/s.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _speed_x Speed on the x axis (when drone moves forward, speed is > 0).
 * @param _speed_y Speed on the y axis (when drone moves right, speed is > 0).
 * @param _speed_z Speed on the z axis (when drone moves down, speed is > 0).
 * @param _ts Acquisition timestamp (ms).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneNavigationDataStateDroneSpeed (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _speed_x, float _speed_y, float _speed_z, uint16_t _ts);

/**
 * @brief Event informing about the estimated altitude above takeoff level.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _altitude Altitude in meters.
 * @param _ts Acquisition timestamp (ms).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneNavigationDataStateDroneAltitude (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _altitude, uint16_t _ts);

/**
 * @brief Event informing about the estimated quaternion.
 * They represent the rotation from the NED frame (determined at drone startup) to the estimated drone body frame.
 * Its elements are between -1 and 1.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _q_w Element w.
 * @param _q_x Element x.
 * @param _q_y Element y.
 * @param _q_z Element z.
 * @param _ts Acquisition timestamp (ms).
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneNavigationDataStateDroneQuaternion (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _q_w, float _q_x, float _q_y, float _q_z, uint16_t _ts);

/**
 * @brief Event informing about the minicam power mode.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _power_mode Power mode of the camera.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamStatePowerModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE _power_mode);

/**
 * @brief Event informing about the minicam product serial number.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _serial_number Serial number.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamStateProductSerialChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _serial_number);

/**
 * @brief Event informing about the state of the camera.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of the camera.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamStateStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE _state);

/**
 * @brief Get the accessory Version.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _software Accessory software version.
 * @param _hardware Accessory hardware version.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamStateVersionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _software, const char * _hardware);

/**
 * @brief Event informing that the picture has been taken.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of device picture recording.
 * @param _result Result of device picture recording.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamStatePictureChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE _state, eARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT _result);

/**
 * @brief Event informing about the video recording state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of device video recording.
 * @param _error Error to explain the state.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamStateVideoStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE _state, eARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR _error);

/**
 * @brief Event informing that the mass storage has been formatted.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state 1 if Mass Storage has been formatted, 0 otherwise.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneMinicamStateMassStorageFormatChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief Event informing about the video automatic recording status.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 0: disabled\n1: enabled
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneVideoSettingsStateAutorecordChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled);

/**
 * @brief Event informing about the electric frequency (Anti-flickering).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _frequency Type of the electric frequency.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneVideoSettingsStateElectricFrequencyChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY _frequency);

/**
 * @brief Event informing about the streaming resolution.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type Video resolution type.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneVideoSettingsStateVideoResolutionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE _type);

/**
 * @brief State of the connection to the remote controller changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state New connection state.\n0=disconnected\n1=connected
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateMiniDroneRemoteControllerStateConnectionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);


// Feature powerup


/**
 * @brief Ask the Power Up speed and turn ratio.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _flag Boolean for "touch screen".
 * @param _throttle Throttle value [0:100].
 * @param _roll Yaw-roll value. [-100:100]
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingPCMD (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _flag, uint8_t _throttle, int8_t _roll);

/**
 * @brief Set drone in user take off state
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of user take off mode\n- 1 to enter in user take off.\n- 0 to exit from user take off.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingUserTakeOff (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief Motor mode
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode 
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingMotorMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_PILOTING_MOTORMODE_MODE _mode);

/**
 * @brief Set the given setting
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _setting Variety of setting that can be customized
 * @param _value value of the given setting
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingSettingsSet (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING _setting, float _value);

/**
 * @brief Take picture
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupMediaRecordPictureV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Video record
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _record Command to record video
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupMediaRecordVideoV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_MEDIARECORD_VIDEOV2_RECORD _record);

/**
 * @brief Auto-select channel of choosen band
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi selection (auto, manual)
 * @param _band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param _channel The channel (not used in auto mode)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupNetworkSettingsWifiSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_TYPE _type, eARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND _band, uint8_t _channel);

/**
 * @brief Launches wifi network scan
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupNetworkWifiScan (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND _band);

/**
 * @brief Controller inquire the list of authorized wifi channels.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupNetworkWifiAuthChannel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Enable/disable video streaming.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable 1 to enable, 0 to disable.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupMediaStreamingVideoEnable (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief Set video automatic recording state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable 0: Disabled 1: Enabled.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupVideoSettingsAutorecord (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief Set video mode
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Video mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupVideoSettingsVideoMode (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_VIDEOSETTINGS_VIDEOMODE_MODE _mode);

/**
 * @brief Enable/disable the buzzer sound
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable 0: Disabled 1: Enabled.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupSoundsBuzz (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief JS alert state changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state JS alert state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingStateAlertStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE _state);

/**
 * @brief Drone flying state changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Drone flying state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingStateFlyingStateChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE _state);

/**
 * @brief Motor mode changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode 
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingStateMotorModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE _mode);

/**
 * @brief Drone attitude changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _roll roll value (in radian) (relative to horizontal)
 * @param _pitch Pitch value (in radian) (relative to horizontal)
 * @param _yaw Yaw value (in radian) (relative to North)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingStateAttitudeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _roll, float _pitch, float _yaw);

/**
 * @brief Drone altitude changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _altitude Altitude in meters relative to take off altitude
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingStateAltitudeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _altitude);

/**
 * @brief Fired when a setting has changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _setting Variety of setting that can be customized
 * @param _current Current value of the given setting
 * @param _min Minimal value of the given setting
 * @param _max Max value of the given setting
 * @param _list_flags List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupPilotingSettingsStateSettingChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING _setting, float _current, float _min, float _max, uint8_t _list_flags);

/**
 * @brief State of device picture recording changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of device picture recording
 * @param _error Error to explain the state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupMediaRecordStatePictureStateChangedV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE _state, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR _error);

/**
 * @brief State of device video recording changed
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state State of device video recording
 * @param _error Error to explain the state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupMediaRecordStateVideoStateChangedV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE _state, eARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR _error);

/**
 * @brief Event of picture recording
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _event Last event of picture recording
 * @param _error Error to explain the event
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupMediaRecordEventPictureEventChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT _event, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR _error);

/**
 * @brief Event of video recording
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _event Event of video recording
 * @param _error Error to explain the event
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupMediaRecordEventVideoEventChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT _event, eARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR _error);

/**
 * @brief Wifi selection from product
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi selection settings
 * @param _band The actual wifi band state
 * @param _channel The channel (depends of the band)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupNetworkSettingsStateWifiSelectionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel);

/**
 * @brief One scanning result found
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _ssid SSID of the AP
 * @param _rssi RSSI of the AP in dbm (negative value)
 * @param _band The band : 2.4 GHz or 5 GHz
 * @param _channel Channel of the AP
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupNetworkStateWifiScanListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _ssid, int16_t _rssi, eARCOMMANDS_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND _band, uint8_t _channel);

/**
 * @brief State sent when all scanning result sent
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupNetworkStateAllWifiScanChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Notify of an Authorized Channel.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band of this channel : 2.4 GHz or 5 GHz
 * @param _channel The authorized channel.
 * @param _in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupNetworkStateWifiAuthChannelListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out);

/**
 * @brief Notify the end of the list of Authorized wifi Channel.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupNetworkStateAllWifiAuthChannelChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Notification sent by the firmware to give an indication of the WiFi link quality.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _quality The WiFi link quality in range 0-6, the higher the value, the higher the link quality.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupNetworkStateLinkQualityChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _quality);

/**
 * @brief Return video streaming status.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled Current video streaming status.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupMediaStreamingStateVideoEnableChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED _enabled);

/**
 * @brief Get video automatic recording status.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 0: Disabled 1: Enabled.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupVideoSettingsStateAutorecordChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled);

/**
 * @brief Video mode
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mode Video mode
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupVideoSettingsStateVideoModeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE _mode);

/**
 * @brief State of the buzzer
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled 0: Disabled 1: Enabled.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GeneratePowerupSoundsStateBuzzChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled);


// Feature rc


/**
 * @brief Enable or Disable RC channels monitoring.
 * If enable, drone will send periodically rc channel value
 * events.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable 1 for enable / 0 to disable
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcMonitorChannels (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief Start a calibration.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _calibration_type Type of calibration.\nCalibration type.
 * @param _channel_action Channel action.\nonly used when calibration_type=min_max.\nChannel action.
 * @param _channel_type Channel type.\nonly used when calibration_type=min_max.\nChannel physical type.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcStartCalibration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_RC_CALIBRATION_TYPE _calibration_type, eARCOMMANDS_RC_CHANNEL_ACTION _channel_action, eARCOMMANDS_RC_CHANNEL_TYPE _channel_type);

/**
 * @brief Invert a RC channel values
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _action Channel action.\nChannel action.
 * @param _flag 1 to invert channel 0 to restore channel.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcInvertChannel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_RC_CHANNEL_ACTION _action, uint8_t _flag);

/**
 * @brief Abort current calibration.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcAbortCalibration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Reset calibration to default values.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcResetCalibration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Enable or disable RC receiver.
 * If enable, drone will apply values sent by RC receiver.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable 1 for enable / 0 to disable
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcEnableReceiver (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief State of drone RC receiver
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state current state.\nRC Receiver state.
 * @param _protocol Protocol used by RC.
 * @param _enabled 1 if enabled, 0 otherwise.\nIf enabled, drone will apply values sent by RC receiver.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcReceiverState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_RC_RECEIVER_STATE _state, const char * _protocol, uint8_t _enabled);

/**
 * @brief RC Channel monitor state sent by drone
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state 1 if enabled, 0 if disabled
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcChannelsMonitorState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _state);

/**
 * @brief RC Channel value sent by drone
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id RC channel id.
 * @param _action RC channel action.\nChannel action.
 * @param _value RC channel value.
 * @param _list_flags Item attribute Bitfield.\nFirst: indicate it's the first element of the list.\nLast: indicate it's the last element of the list.\nFlags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcChannelValue (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _id, eARCOMMANDS_RC_CHANNEL_ACTION _action, int16_t _value, uint8_t _list_flags);

/**
 * @brief RC Channels calibration state sent by drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _calibration_type Current calibration type\nset to 'none' if no calibration in progress.\nCalibration type.
 * @param _channel_action Current channel action calibration\nOnly used when calibration_type=min_max.\nChannel action.
 * @param _required bitfield of required channel actions.\nNeutral channels calibration is always required.\nChannel action.
 * @param _required a combination of ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_INVALID ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_ROLL ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_PITCH ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_YAW ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_GAZ ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_TAKEOFF_LAND ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_EMERGENCY ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_RETURN_HOME ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_PILOTING_MODE ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_TAKE_CONTROL
 * @param _calibrated bitfield of calibrated channel actions.\nChannel action.
 * @param _calibrated a combination of ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_INVALID ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_ROLL ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_PITCH ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_YAW ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_GAZ ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_TAKEOFF_LAND ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_EMERGENCY ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_RETURN_HOME ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_PILOTING_MODE ; ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_TAKE_CONTROL
 * @param _neutral_calibrated 1 if neutral channels are calibrated, 0 otherwise.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcCalibrationState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_RC_CALIBRATION_TYPE _calibration_type, eARCOMMANDS_RC_CHANNEL_ACTION _channel_action, uint32_t _required, uint32_t _calibrated, uint8_t _neutral_calibrated);

/**
 * @brief Channel action supported by drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _action Channel action.\nChannel action.
 * @param _supported_type Bitfield of supported channel types.\nChannel physical type.
 * @param _supported_type a combination of ; ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_INVALID ; ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_SIGNED_AXIS ; ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_UNSIGNED_AXIS ; ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_MONOSTABLE_BUTTON ; ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_BISTABLE_BUTTON ; ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_TRISTATE_BUTTON ; ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_ROTARY_BUTTON
 * @param _calibrated_type Calibrated action channel type (none if not calibrated).\nChannel physical type.
 * @param _inverted 1 if inverted, 0 otherwise.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateRcChannelActionItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_RC_CHANNEL_ACTION _action, uint32_t _supported_type, eARCOMMANDS_RC_CHANNEL_TYPE _calibrated_type, uint8_t _inverted);


// Feature SkyController


/**
 * @brief After recieving this command, the SkyController will do a network scan to get the wifi list.
 * Communication with the drone is stopped during the network scan, so the controller should avoid sending this command during flight.
 * The controller should clear the local wifi list before sending this command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiRequestWifiList (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief This is a synchronization command. The SkyController will automatically send its current wifi info when any data changes, so this command should only be used when connecting, in order to get an initial state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiRequestCurrentWifi (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The network should be a visible network retrieved from the [WifiList](#4-0-0) event.
 * If the network is secured, then the passphrase must be set. For non-secure network, the passphrase argument is ignored.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _bssid Wifi bssid
 * @param _ssid Wifi ssid
 * @param _passphrase Wifi passphrase
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiConnectToWifi (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _bssid, const char * _ssid, const char * _passphrase);

/**
 * @brief Removes the network from the saved network list.
 * If the network is the current network, then the SkyController will be disconnected first.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _ssid Wifi ssid
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiForgetWifi (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _ssid);

/**
 * @brief Requests the list of authorized wifi channels for the current country/regulatory domain.
 * These channels are valid for the [AccessPointChannel](#4-9-1) command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiWifiAuthChannel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief This command is deprecated (The SkyController can only see one device at a time, so a device list is not required), and should not be used.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerDeviceRequestDeviceList (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief This command is deprecated and should not be used.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerDeviceRequestCurrentDevice (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief This command is deprecated and should not be used.
 * The SkyController will automatically connect to the first visible device on the current wifi network.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _deviceName Device name
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerDeviceConnectToDevice (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _deviceName);

/**
 * @brief Request the controller to send all its settings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSettingsAllSettings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Reset all settings (i.e. everything except drone pairing).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSettingsReset (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Request the controller to send all its states.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCommonAllStates (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Set the SkyController access point SSID.
 * The name will be checked, and can be modified before application. Use the [AccessPointSSIDChanged](#4-10-0) event to get the applied network name.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _ssid AccessPoint SSID
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAccessPointSettingsAccessPointSSID (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _ssid);

/**
 * @brief Set the SkyController access point channel.
 * The channel will be checked, and can be modified before application. Use the [AccessPointChannelChanged](#4-10-1) event to get the applied channel.
 * The list of authorized channels for the current country can be retrived with the [WifiAuthChannel](#4-1-4) command.
 * This command is deprecated. Use the [WifiSelection](#4-9-2) command instead.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _channel AccessPoint Channel
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAccessPointSettingsAccessPointChannel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _channel);

/**
 * @brief Set the SkyController access point channel.
 * The channel will be checked, and can be modified before application. Use the [WifiSelectionChanged](#4-10-2) event to get the applied channel/band.
 * The list of authorized channels for the current country can be retrived with the [WifiAuthChannel](#4-1-4) command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi selection (only manual at the moment)
 * @param _band The allowed band : 2.4 Ghz or 5 Ghz
 * @param _channel The channel
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAccessPointSettingsWifiSelection (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE _type, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND _band, uint8_t _channel);

/**
 * @brief Set the SkyController access point security. The key will be checked, and can be refused by the product. In this case, the security will not be changed. Use the [WifiSecurityChanged](#4-10-3) event to get the applied security settings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _security_type The type of security for the network
 * @param _key The security key (ignored if security_type is open)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAccessPointSettingsWifiSecurity (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISECURITY_SECURITY_TYPE _security_type, const char * _key);

/**
 * @brief This command is deprecated. The same effect can be achieved by sending a [CameraOrientation](#1-1-0) command with values retrieved from the [defaultCameraOrientation](#1-25-1) event.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCameraResetOrientation (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief This commands allow the application to get a representation of all the mappable controls on the SkyController. Some physical controls might be absent from this list because their function can not be changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerGamepadInfosGetGamepadControls (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The SkyController will send its full button mapping. This command is mainly useful for initial synchronization, as every change to the button mapping (via the [setButtonMapping](#4-12-2) command) will trigger [currentButtonMappings](#4-13-0) events.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerButtonMappingsGetCurrentButtonMappings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The SkyController will send all the available action that can be mapped on buttons.
 * As this list is static, the controller only need to request this information once.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerButtonMappingsGetAvailableButtonMappings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Any previous mapping for the given button will be removed, as a button can only be mapped to one action.
 * To unmap a button, a NO_ACTION mapping can be used (see the [availableButtonMappings](#4-13-2) event).
 * Some actions can not be mapped to two different buttons at the same time. In this case, the first button will automatically be set to NO_ACTION, and the corresponding [currentButtonMappings](#4-13-0) event will be fired.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _key_id The keycode to map
 * @param _mapping_uid The mapping to associate with the key
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerButtonMappingsSetButtonMapping (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int32_t _key_id, const char * _mapping_uid);

/**
 * @brief The default values can change between software versions.
 * The default values are different for Black Edition SkyControllers
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerButtonMappingsDefaultButtonMapping (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The SkyController will send its full axis mapping. This command is mainly useful for initial synchronization, as every change to the axis mapping (via the [setAxisMapping](#4-14-2) command) will trigger [currentAxisMappings](#4-15-0) events.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisMappingsGetCurrentAxisMappings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The SkyController will send all the available action that can be mapped on axes.
 * As this list is static, the controller only need to request this information once.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisMappingsGetAvailableAxisMappings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Any previous mapping for the given axis will be removed, as a axis can only be mapped to one action.
 * To unmap a axis, a NO_ACTION mapping can be used (see the [availableAxisMappings](#4-15-2) event).
 * Some actions can not be mapped to two different axes at the same time. In this case, the first axis will automatically be set to NO_ACTION, and the corresponding [currentAxisMappings](#4-15-0) event will be fired.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _axis_id The axiscode to map
 * @param _mapping_uid The mapping to associate with the axis
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisMappingsSetAxisMapping (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int32_t _axis_id, const char * _mapping_uid);

/**
 * @brief The default values can change between software versions.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisMappingsDefaultAxisMapping (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The SkyController will send its full axis filters map. This command is mainly useful for initial synchronization, as every change to the filters map (via the [setAxisFilter](#4-16-2) command) will trigger [currentAxisFilters](#4-17-0) events.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisFiltersGetCurrentAxisFilters (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The preset list is empty and will never be filled, so this command is flagged as deprecated.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisFiltersGetPresetAxisFilters (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief A filter modifies the response curve of an axis.
 * As the preset filters list is empty, all filters are to be sent using the builder syntax.
 * 
 * The builder syntax supports two types of filters: Multilinear and Exponential.
 * 
 * Multilinear filters create response curves made of multiple linear segments:
 * * The default filter (ARMF;) is purely linear and create a single segment from the two implicit `[-1; -1]` and `[1; 1]` points.
 * * Additionnal points can be added to the filter with the following syntax: `ARMF;x1>y1;...;xN>yN;`, where all numbers are floating point numbers in range `[-1; 1]`.
 * * Additionnal points **must** respect the following constraints : `x(N)>x(N-1)` and `y(N)>=y(N-1)`.
 * 
 * Exponential filters:
 * * The syntax is `ARXF;CPx;CPy;`, where CPx and CPy are floating point numbers in range `[0; 1]`.
 * * Best results are achieved when `CPx + CPy == 1` and `CPx > CPy`.
 * * If the control point is on the diagonal (i.e. `CPx == CPy`), then the resulting filter will be linear.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _axis_id The axiscode to filter
 * @param _filter_uid_or_builder The mapping preset to associate with the axis\n(Or a string to build a new one)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisFiltersSetAxisFilter (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int32_t _axis_id, const char * _filter_uid_or_builder);

/**
 * @brief The default values can change between software versions.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisFiltersDefaultAxisFilters (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Change who is piloting the drone.
 * By default, the SkyController is the source of piloting commands, and any connected application (i.e. FreeFlight) can not send [piloting commands](#1-0-2) commands directly to the drone. When the piloting source is set to Controller, the SkyController will forward the controller commands to the drone, and won't send any commands itself.
 * The piloting source is automatically reset to SkyController when the controller is disconnected.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _source The new piloting source
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCoPilotingSetPilotingSource (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE _source);

/**
 * @brief Asks the SkyController to send (or not) the magneto calibration quality updates.
 * The [MagnetoCalibrationState](#4-23-0) event will always be sent when the status parameters changes, regardless of this setting.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enable Flag to enable the feature:\n1 = Enable quality updates\n0 = Disable quality updates
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCalibrationEnableMagnetoCalibrationQualityUpdates (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enable);

/**
 * @brief Asks the SkyController to start a magneto calibration.
 * If the calibration is already started, this command has no effect.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCalibrationStartCalibration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Asks the SkyController to abort an in-progress magneto calibration.
 * If no calibration is in progress, this command has no effect.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCalibrationAbortCalibration (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief This command will request a factory reset from the SkyController. *The factory reset procedure implies an automatic reboot*, which will be done immediately after recieving this command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerFactoryReset (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief List of visible wifi networks.
 * The application must clear the list before sending the [RequestWifiList](#4-1-0) command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _bssid Wifi bssid
 * @param _ssid Wifi ssid
 * @param _secured Is wifi secured by passphrase
 * @param _saved Is wifi saved in terminal
 * @param _rssi Wifi rssi
 * @param _frequency Wifi frequency
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiStateWifiList (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _bssid, const char * _ssid, uint8_t _secured, uint8_t _saved, int32_t _rssi, int32_t _frequency);

/**
 * @brief Describes the current wifi connection status of the SkyController.
 * The connection to a wifi network does not guarantee a connection to a drone. To get the drone connection state, use the [device ConnectionChanged](#4-3-1) event.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _ssid Wifi ssid
 * @param _status Wifi status
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiStateConnexionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _ssid, eARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS _status);

/**
 * @brief Each element represent an authorized wifi channel for the current country regulatory domain.
 * Note that some channels might be only authorized for indoor or outdoor use.
 * The list is complete when the [AllWifiAuthChannelChanged](#4-0-3) event is recieved.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band of this channel : 2.4 GHz or 5 GHz
 * @param _channel The authorized channel
 * @param _in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise)\nBit 1 is 1 if channel is authorized inside (0 otherwise)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiStateWifiAuthChannelListChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND _band, uint8_t _channel, uint8_t _in_or_out);

/**
 * @brief This event closes the [WifiAuthChannel](#4-1-4) command response. No more [WifiAuthChannelListChanged](#4-0-2) event will be sent after this event.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiStateAllWifiAuthChannelChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief This event describes the signal strength for the long range wifi.
 * A zero value is used when the SkyController is not connected to a wifi network.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _level Level of the signal. Levels are from 0 to 5.\n0 is an unknown value. 1 is a weak wifi signal, 5 is the best.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiStateWifiSignalChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _level);

/**
 * @brief Each element represent an authorized wifi channel for the current country regulatory domain.
 * Note that some channels might be only authorized for indoor or outdoor use.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band of this channel : 2.4 GHz or 5 GHz
 * @param _channel The authorized channel
 * @param _in_or_out Bit 0 is 1 if channel is authorized outside (0 otherwise)\nBit 1 is 1 if channel is authorized inside (0 otherwise)
 * @param _list_flags List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiStateWifiAuthChannelListChangedV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND _band, uint8_t _channel, uint8_t _in_or_out, uint8_t _list_flags);

/**
 * @brief The wifi country of the SkyController will follow the wifi country of the currently connected drone, except for country-locked SkyControllers.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _code Country code with ISO 3166 format, empty string means unknown country.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiStateWifiCountryChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _code);

/**
 * @brief The wifi environment of the SkyController will follow the wifi environment of the currently connected drone
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _environment Type of environment
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerWifiStateWifiEnvironmentChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT _environment);

/**
 * @brief List of visible ARDiscoveryDevices.
 * This event is deprecated and will never be sent by a SkyController
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _name Device name
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerDeviceStateDeviceList (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _name);

/**
 * @brief Status of the connection to a drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _status Connection status
 * @param _deviceName Drone name
 * @param _deviceProductID Drone product IDentifier
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerDeviceStateConnexionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS _status, const char * _deviceName, uint16_t _deviceProductID);

/**
 * @brief All settings have been sent by the controller.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSettingsStateAllSettingsChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief This command is not implemented.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSettingsStateResetChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The product serial of the controller.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _serialNumber Serial number (hexadecimal value)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSettingsStateProductSerialChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _serialNumber);

/**
 * @brief This event allow differentiation between original (red/blue/yellow) SkyControllers, and the Black Edition SkyControllers.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _variant Variant of the product
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSettingsStateProductVariantChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT _variant);

/**
 * @brief Software and hardware versions of the controller.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _software Product software version
 * @param _hardware Product hardware version
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSettingsStateProductVersionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _software, const char * _hardware);

/**
 * @brief The serial number (or any other UID) for the main CPU.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _id Product main cpu id
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSettingsStateCPUID (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _id);

/**
 * @brief All states have been sent by the controller.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCommonStateAllStatesChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The battery percentage has changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _percent Controller battery: from 0 (empty) to 100 (full charge).\nValue of 255 when charging.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSkyControllerStateBatteryChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _percent);

/**
 * @brief The SkyController GPS has gained or lost the fix. If the fix is lost, thent the [GpsPositionChanged](#4-8-2) event will contain invalid values for the position.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _fixed SkyController fixed
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSkyControllerStateGpsFixChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _fixed);

/**
 * @brief The SkyController position or heading values changed.
 * Some of the values can be invalid and should be ignored.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _latitude SkyController latitude (500. if not available)
 * @param _longitude SkyController longiture (500. if not available)
 * @param _altitude Altitude (in meters) above sea level.\nOnly meaningful if latitude and longiture are available
 * @param _heading SkyController heading relative to magnetic north\n(500.f if not available)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSkyControllerStateGpsPositionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, double _latitude, double _longitude, double _altitude, float _heading);

/**
 * @brief The state of the controller battery
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state Current battery state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSkyControllerStateBatteryState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE _state);

/**
 * @brief SkyController Attitude in north-east-down (NED) coordinate system.
 * Attitude is provided as a quaternion.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _q0 SkyController Attitude q0 (quaternion scalar part)
 * @param _q1 SkyController Attitude q1 (quaternion vector part)
 * @param _q2 SkyController Attitude q2 (quaternion vector part)
 * @param _q3 SkyController Attitude q3 (quaternion vector part)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerSkyControllerStateAttitudeChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, float _q0, float _q1, float _q2, float _q3);

/**
 * @brief Changing the SSID will often (if not always) trigger a disconnection of the controller, so this event will only be recieved during the initial connexion phase.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _ssid AccessPoint SSID
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAccessPointSettingsStateAccessPointSSIDChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _ssid);

/**
 * @brief This command is deprecated, as the returned channel number does not contain information about the wifi band (2.4GHz or 5GHz). Use the [WifiSelectionChanged](#4-10-2) event instead
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _channel AccessPoint Channel
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAccessPointSettingsStateAccessPointChannelChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _channel);

/**
 * @brief Changing the channel will often (if not always) trigger a disconnection of the controller, so this event will only be recieved during the initial connexion phase.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi selection (only manual at the moment)
 * @param _band The allowed band : 2.4 Ghz or 5 Ghz
 * @param _channel The channel
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAccessPointSettingsStateWifiSelectionChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE _type, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND _band, uint8_t _channel);

/**
 * @brief Changing the security will often (if not always) trigger a disconnection of the controller, so this event will only be recieved during the initial connexion phase.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _security_type The type of security for the network
 * @param _key The security key (ignored if security_type is open)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAccessPointSettingsStateWifiSecurityChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE _security_type, const char * _key);

/**
 * @brief Each gamepad control element represents a mappable control on the SkyController. The control can be either a button or an analog axis.
 * Each control have a human-readable english name describing its physical position on the SkyController.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type (axis/button) of the control
 * @param _id The button or axis id\nA button and an axis can have the same ID, but their type is different
 * @param _name Display name for the control
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerGamepadInfosStateGamepadControl (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE _type, int32_t _id, const char * _name);

/**
 * @brief This event marks the end of the GamepadControl list
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerGamepadInfosStateAllGamepadControlsSent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The mapping maps a key_id (as found in [gamepadControl](#4-19-0) events) to a mapping_uid (as found in the [availableButtonMappings](#4-13-2) events).
 * A special mapping (NO_ACTION) is attached to unmapped buttons.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _key_id The keycode mapped
 * @param _mapping_uid The mapping associated
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerButtonMappingsStateCurrentButtonMappings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int32_t _key_id, const char * _mapping_uid);

/**
 * @brief Sent by the SkyController to notify the end of a [currentButtonMappings](#4-13-0) events list.
 * If the list is empty (e.g. the controller sent a [setButtonMapping](#4-12-2) command which made no change to the mapping table), then this command will be sent without any [currentButtonMappings](#4-13-0) event preceding it. This gives the controller a reliable synchronization point when editing mappings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerButtonMappingsStateAllCurrentButtonMappingsSent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Each action that can be mapped on a button is identified by its mapping_uid, which will be used in the [setButtonMapping](#4-12-2) and [currentButtonMappings](#4-13-0) commands.
 * The name is a human readable string, in english, describing the action.
 * A special action named NO_ACTION serves as the unmap action. This action can be bound to multiple buttons to disable them.
 * An [allAvailableButtonsMappingsSent](#4-13-3) event is sent at the end of the list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mapping_uid The mapping UID (used in communication with the SkyController)
 * @param _name Display name for the user
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerButtonMappingsStateAvailableButtonMappings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _mapping_uid, const char * _name);

/**
 * @brief Sent by the SkyController to notify the end of a [availableButtonMappings](#4-13-2) events list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerButtonMappingsStateAllAvailableButtonsMappingsSent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief The mapping maps an axis_id (as found in [gamepadControl](#4-19-0) events) to a mapping_uid (as found in the [availableAxisMappings](#4-15-2) events).
 * A special mapping (NO_ACTION) is attached to unmapped axes.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _axis_id The axiscode mapped
 * @param _mapping_uid The mapping associated
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisMappingsStateCurrentAxisMappings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int32_t _axis_id, const char * _mapping_uid);

/**
 * @brief Sent by the SkyController to notify the end of a [currentAxisMappings](#4-15-0) events list.
 * If the list is empty (e.g. the controller sent a [setAxisMapping](#4-14-2) command which made no change to the mapping table), then this command will be sent without any [currentAxisMappings](#4-15-0) event preceding it. This gives the controller a reliable synchronization point when editing mappings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisMappingsStateAllCurrentAxisMappingsSent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Each action that can be mapped on an axis is identified by its mapping_uid, which will be used in the [setAxisMapping](#4-14-2) and [currentAxisMappings](#4-15-0) commands.
 * The name is a human readable string, in english, describing the action.
 * A special action named NO_ACTION serves as the unmap action. This action can be bound to multiple axes to disable them.
 * An [allAvailableAxissMappingsSent](#4-15-3) event is sent at the end of the list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _mapping_uid The mapping UID (used in communication with the SkyController)
 * @param _name Display name for the user
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisMappingsStateAvailableAxisMappings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _mapping_uid, const char * _name);

/**
 * @brief Sent by the SkyController to notify the end of a [availableAxisMappings](#4-15-2) events list.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisMappingsStateAllAvailableAxisMappingsSent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief As the preset filters list is empty, all the filters are transmitted using the builder syntax. See the [setAxisFilter](#4-16-2) command documentation for details about the builder syntax.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _axis_id The axiscode filtered
 * @param _filter_uid_or_builder The filter associated
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisFiltersStateCurrentAxisFilters (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int32_t _axis_id, const char * _filter_uid_or_builder);

/**
 * @brief Sent by the SkyController to notify the end of a [currentAxisFilters](#4-17-0) events list.
 * If the list is empty (e.g. the controller sent a [setAxisFilter](#4-16-2) command which made no change to the filters table), then this command will be sent without any [currentAxisFilters](#4-17-0) event preceding it. This gives the controller a reliable synchronization point when editing mappings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisFiltersStateAllCurrentFiltersSent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief No preset axis filter is defined on the SkyController, so this command will never be sent by the firmware.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _filter_uid The filter UID (used in communication with the SkyController)
 * @param _name Display name for the user
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisFiltersStatePresetAxisFilters (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _filter_uid, const char * _name);

/**
 * @brief As the SkyController will never send a [presetAxisFilters](#4-17-2) event, this is the only event sent when the deprecated [getPresetAxisFilters](#4-16-1) command is recieved.
 * @deprecated
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerAxisFiltersStateAllPresetFiltersSent (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Define who is piloting the drone.
 * The piloting source is reset to SkyController when the controller disconnects.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _source The source
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCoPilotingStatePilotingSource (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE _source);

/**
 * @brief The current state of the magnetometer calibration.
 * If the calibration quality updates are enabled, this event is sent at every calibration quality update. This is useful for calibration screens, but creates a lot of traffic on network.\ When the calibration quality updates are disabled, this event is only sent when the status parameter changes.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _status The global status of the calibration
 * @param _X_Quality Calibration quality on X axis.\n0 is bad, 255 is perfect
 * @param _Y_Quality Calibration quality on Y axis.\n0 is bad, 255 is perfect
 * @param _Z_Quality Calibration quality on Z axis.\n0 is bad, 255 is perfect
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCalibrationStateMagnetoCalibrationState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS _status, uint8_t _X_Quality, uint8_t _Y_Quality, uint8_t _Z_Quality);

/**
 * @brief State of the magnetometer calibration quality sender.
 * This determines the trigger of the [MagnetoCalibrationState](#4-23-0) event.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _enabled Flag (is the feature enabled).\n1 = The skycontroller sends updated when quality is updated\n0 = The skycontroller only sent updated when state is updated
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCalibrationStateMagnetoCalibrationQualityUpdatesState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _enabled);

/**
 * @brief The current state of magnetometer calibration.
 * This event is used by products which does require a step-by-step calibration.
 * When calibrating, the product will go, in order, through X, Y and Z axis calibration, then into calibrated state. If at any point it goes back to not-calibrated, it means that the calibration process failed and should be manually restarted with the [StartCalibration](#4-22-1) command.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _state The calibration state
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCalibrationStateMagnetoCalibrationStateV2 (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE _state);

/**
 * @brief This event notifies the application that the settings button was pressed on the device. This allow a connected application to open/close the settings screen from a physical button.
 * This event is only sent when the SkyController is connected to a drone
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerButtonEventsSettings (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Skycontroller will disconnect.
 * This event is triggered when the user presses on the power button of the product.
 * 
 * **This event is a notification, you can't retrieve it in the cache of the device controller.**
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _reason Reason of the shutdown of the product
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateSkyControllerCommonEventStateShutdown (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON _reason);


// Feature thermal_cam


/**
 * @brief Activate a given thermal camera.
 * Activating a camera may deactivate others on some drones.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateThermalCamActivate (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _cam_id);

/**
 * @brief Deactivate a given thermal camera.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateThermalCamDeactivate (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _cam_id);

/**
 * @brief Set the thermal camera sensitivity range.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @param _range Thermal range
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateThermalCamSetSensitivity (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _cam_id, eARCOMMANDS_THERMAL_CAM_RANGE _range);

/**
 * @brief Camera state.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @param _state Camera state
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateThermalCamCameraState (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _cam_id, eARCOMMANDS_THERMAL_CAM_STATE _state, uint8_t _list_flags);

/**
 * @brief Thermal cam sensitivity range.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @param _current_range Thermal range
 * @param _available_ranges Thermal range
 * @param _available_ranges a combination of ; ARCOMMANDS_FLAG_THERMAL_CAM_RANGE_HIGH ; ARCOMMANDS_FLAG_THERMAL_CAM_RANGE_LOW
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateThermalCamSensitivity (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _cam_id, eARCOMMANDS_THERMAL_CAM_RANGE _current_range, uint8_t _available_ranges, uint8_t _list_flags);

/**
 * @brief Visible camera position relative to the drone. The thermal camera is considered at an ideal position.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @param _roll Euler angle roll in degree difference between visible cam and thermal cam.
 * @param _pitch Euler angle pitch in degree difference between visible cam and thermal cam.
 * @param _yaw Euler angle yaw in degree difference between visible cam and thermal cam.
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateThermalCamCalibrationInfos (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _cam_id, float _roll, float _pitch, float _yaw, uint8_t _list_flags);


// Feature wifi


/**
 * @brief Launches wifi network scan for a given band to get a list of all wifi networks found by the drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band : 2.4 Ghz or 5 Ghz
 * @param _band a combination of ; ARCOMMANDS_FLAG_WIFI_BAND_2_4_GHZ ; ARCOMMANDS_FLAG_WIFI_BAND_5_GHZ
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiScan (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, uint8_t _band);

/**
 * @brief Get all available Wifi channels.
 * The list of available Wifi channels is related to the country of the drone. You can get this country with the event [WifiCountryChanged](#wifi-CountryChanged).
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiUpdateAuthorizedChannels (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen);

/**
 * @brief Select channel of choosen band to put the drone's access point on this channel.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The wifi selection type available
 * @param _band The band : 2.4 Ghz or 5 Ghz
 * @param _channel The channel you want to select. Used only when type is manual.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiSetApChannel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_WIFI_SELECTION_TYPE _type, eARCOMMANDS_WIFI_BAND _band, uint8_t _channel);

/**
 * @brief Set the wifi security.
 * The security is changed on the next boot.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The type of wifi security (open, wpa2)
 * @param _key The key to secure the network. Not used if type is open
 * @param _key_type Type of the key sent
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiSetSecurity (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_WIFI_SECURITY_TYPE _type, const char * _key, eARCOMMANDS_WIFI_SECURITY_KEY_TYPE _key_type);

/**
 * @brief Set the wifi country.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _selection_mode Type of country selection
 * @param _code Country code with ISO 3166 format. Not used if automatic is 1.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiSetCountry (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_WIFI_COUNTRY_SELECTION _selection_mode, const char * _code);

/**
 * @brief Set indoor or outdoor wifi settings.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _environment Type of environment
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiSetEnvironment (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_WIFI_ENVIRONMENT _environment);

/**
 * @brief Wifi scan results.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _ssid SSID of the AP
 * @param _rssi RSSI of the AP.
 * @param _band The band : 2.4 Ghz or 5 Ghz
 * @param _channel Channel of the AP
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiScannedItem (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _ssid, int16_t _rssi, eARCOMMANDS_WIFI_BAND _band, uint8_t _channel, uint8_t _list_flags);

/**
 * @brief Available channel results.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _band The band : 2.4 Ghz or 5 Ghz
 * @param _channel The channel number
 * @param _environment Type of environment
 * @param _environment a combination of ; ARCOMMANDS_FLAG_WIFI_ENVIRONMENT_INDOOR ; ARCOMMANDS_FLAG_WIFI_ENVIRONMENT_OUTDOOR
 * @param _list_flags Flags use by maps and lists
 * @param _list_flags a combination of ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY ; ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiAuthorizedChannel (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_WIFI_BAND _band, uint8_t _channel, uint8_t _environment, uint8_t _list_flags);

/**
 * @brief Wifi selection changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _type The wifi selection type available
 * @param _band The band : 2.4 Ghz or 5 Ghz
 * @param _channel The channel of the drone's access point
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiApChannelChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_WIFI_SELECTION_TYPE _type, eARCOMMANDS_WIFI_BAND _band, uint8_t _channel);

/**
 * @brief 
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _key The key to secure the network. Not used if type is open
 * @param _key_type The type of wifi security (open, wpa2)
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiSecurityChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _key, eARCOMMANDS_WIFI_SECURITY_TYPE _key_type);

/**
 * @brief Wifi country changed.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _selection_mode Type of country selection
 * @param _code Country code with ISO 3166 format, empty string means unknown country.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiCountryChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_WIFI_COUNTRY_SELECTION _selection_mode, const char * _code);

/**
 * @brief Status of the wifi config : either indoor or outdoor.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _environment 1 if it uses outdoor wifi settings, 0 otherwise\nType of environment
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiEnvironmentChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, eARCOMMANDS_WIFI_ENVIRONMENT _environment);

/**
 * @brief Rssi Changed. This is an information about the Wifi link quality.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _rssi Rssi on the connected wifi network. Rssi values are generally between -30 and -120dBm. The nearest of 0 is the better.
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiRssiChanged (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, int16_t _rssi);

/**
 * @brief List of countries supported by the drone.
 * @warning A command is not NULL terminated and can contain NULL bytes.
 * @param buffer Pointer to the buffer in which the library should store the command
 * @param buffLen Size of the buffer
 * @param cmdLen Pointer to an integer that will hold the actual size of the command
 * @param _countries List of country code in ISO 3166 format separated by ";"
 * @return Error code (see eARCOMMANDS_GENERATOR_ERROR)
 */
eARCOMMANDS_GENERATOR_ERROR ARCOMMANDS_Generator_GenerateWifiSupportedCountries (uint8_t *buffer, int32_t buffLen, int32_t *cmdLen, const char * _countries);



#endif /* _LIBARCOMMANDS_ARCOMMANDS_GENERATOR_H_ */
