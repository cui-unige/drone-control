/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateFeatureControllers.py script         *
 *                                                        *
 **********************************************************/

/**
* @file ARCONTROLLER_Feature.h
* @brief Feature controller allow to send command related of a Feature.
*/

#ifndef _ARCONTROLLER_FEATURE_H_
#define _ARCONTROLLER_FEATURE_H_

#include <stdlib.h>

#include <libARSAL/ARSAL_Print.h>
#include <libARSAL/ARSAL_Mutex.h>
#include <libARCommands/ARCommands.h>
#include <uthash/uthash.h>

#include <libARController/ARCONTROLLER_Error.h>
#include <libARController/ARCONTROLLER_Network.h>
#include <libARController/ARCONTROLLER_DICTIONARY_Key.h>
#include <libARController/ARCONTROLLER_Dictionary.h>

/*******************************
 * --- FEATURE generic --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Generic_t.
 */
typedef struct ARCONTROLLER_FEATURE_Generic_Private_t ARCONTROLLER_FEATURE_Generic_Private_t;

/**
 * @brief Feature controller allow to send command related of generic Feature.
 * All generic messages
 */
typedef struct ARCONTROLLER_FEATURE_Generic_t ARCONTROLLER_FEATURE_Generic_t;

/**
 * @brief Create a new generic Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_Generic_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_Generic_SetNetworkController().
 * @param[out] error executing error.
 * @return the new generic Feature Controller
 * @see ARCONTROLLER_FEATURE_Generic_Delete
 */
ARCONTROLLER_FEATURE_Generic_t *ARCONTROLLER_FEATURE_Generic_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the generic Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_Generic_New
 */
void ARCONTROLLER_FEATURE_Generic_Delete (ARCONTROLLER_FEATURE_Generic_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Generic_RegisterARCommands (ARCONTROLLER_FEATURE_Generic_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Generic_UnregisterARCommands (ARCONTROLLER_FEATURE_Generic_t *feature);

/**
 * @brief Get the dictionay of the generic Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_Generic_GetDictionary (ARCONTROLLER_FEATURE_Generic_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>Generic</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_Generic_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Generic_AddCallback (ARCONTROLLER_FEATURE_Generic_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>Generic</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Generic_RemoveCallback (ARCONTROLLER_FEATURE_Generic_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_GENERIC_DRONESETTINGSCHANGED_SETTINGS; /**< Key of the argument </code>settings</code> of event <code>DroneSettingsChanged</code> in feature <code>Generic</code> */

/**
 * @brief Send a command <code>Default</code> in feature <code>Generic</code>
 * default
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Generic_SendDefault_t) (ARCONTROLLER_FEATURE_Generic_t *feature);

/**
 * @brief Send a command <code>SetDroneSettings</code> in feature <code>Generic</code>
 * Set several drone settings in only one command.
 * @param feature feature owning the commands
 * @param settings 
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Generic_SendSetDroneSettings_t) (ARCONTROLLER_FEATURE_Generic_t *feature, ARCOMMANDS_Generic_DroneSettings_t * settings);

/**
 * @brief Feature controller allow to send command related of generic Feature.
 * All generic messages
 */
struct ARCONTROLLER_FEATURE_Generic_t
{
    ARCONTROLLER_FEATURE_Generic_SendDefault_t sendDefault;
    ARCONTROLLER_FEATURE_Generic_SendSetDroneSettings_t sendSetDroneSettings;
    ARCONTROLLER_FEATURE_Generic_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_Generic_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Generic_SetNetworkController (ARCONTROLLER_FEATURE_Generic_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Generic_GetCommandElements (ARCONTROLLER_FEATURE_Generic_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE animation --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Animation_t.
 */
typedef struct ARCONTROLLER_FEATURE_Animation_Private_t ARCONTROLLER_FEATURE_Animation_Private_t;

/**
 * @brief Feature controller allow to send command related of animation Feature.
 * All messages related to the animations
 */
typedef struct ARCONTROLLER_FEATURE_Animation_t ARCONTROLLER_FEATURE_Animation_t;

/**
 * @brief Create a new animation Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_Animation_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_Animation_SetNetworkController().
 * @param[out] error executing error.
 * @return the new animation Feature Controller
 * @see ARCONTROLLER_FEATURE_Animation_Delete
 */
ARCONTROLLER_FEATURE_Animation_t *ARCONTROLLER_FEATURE_Animation_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the animation Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_Animation_New
 */
void ARCONTROLLER_FEATURE_Animation_Delete (ARCONTROLLER_FEATURE_Animation_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_RegisterARCommands (ARCONTROLLER_FEATURE_Animation_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_UnregisterARCommands (ARCONTROLLER_FEATURE_Animation_t *feature);

/**
 * @brief Get the dictionay of the animation Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_Animation_GetDictionary (ARCONTROLLER_FEATURE_Animation_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>Animation</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_Animation_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_AddCallback (ARCONTROLLER_FEATURE_Animation_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>Animation</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_RemoveCallback (ARCONTROLLER_FEATURE_Animation_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_AVAILABILITY_VALUES; /**< Key of the argument </code>values</code> of event <code>Availability</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_STATE_TYPE; /**< Key of the argument </code>type</code> of event <code>State</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_STATE_PERCENT; /**< Key of the argument </code>percent</code> of event <code>State</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_FLIPSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>FlipState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_FLIPSTATE_TYPE; /**< Key of the argument </code>type</code> of event <code>FlipState</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_HORIZONTALPANORAMASTATE_STATE; /**< Key of the argument </code>state</code> of event <code>HorizontalPanoramaState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_HORIZONTALPANORAMASTATE_ROTATION_ANGLE; /**< Key of the argument </code>rotation_angle</code> of event <code>HorizontalPanoramaState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_HORIZONTALPANORAMASTATE_ROTATION_SPEED; /**< Key of the argument </code>rotation_speed</code> of event <code>HorizontalPanoramaState</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_DRONIESTATE_STATE; /**< Key of the argument </code>state</code> of event <code>DronieState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_DRONIESTATE_SPEED; /**< Key of the argument </code>speed</code> of event <code>DronieState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_DRONIESTATE_DISTANCE; /**< Key of the argument </code>distance</code> of event <code>DronieState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_DRONIESTATE_PLAY_MODE; /**< Key of the argument </code>play_mode</code> of event <code>DronieState</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_HORIZONTALREVEALSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>HorizontalRevealState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_HORIZONTALREVEALSTATE_SPEED; /**< Key of the argument </code>speed</code> of event <code>HorizontalRevealState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_HORIZONTALREVEALSTATE_DISTANCE; /**< Key of the argument </code>distance</code> of event <code>HorizontalRevealState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_HORIZONTALREVEALSTATE_PLAY_MODE; /**< Key of the argument </code>play_mode</code> of event <code>HorizontalRevealState</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_VERTICALREVEALSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>VerticalRevealState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_VERTICALREVEALSTATE_SPEED; /**< Key of the argument </code>speed</code> of event <code>VerticalRevealState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_VERTICALREVEALSTATE_VERTICAL_DISTANCE; /**< Key of the argument </code>vertical_distance</code> of event <code>VerticalRevealState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_VERTICALREVEALSTATE_ROTATION_ANGLE; /**< Key of the argument </code>rotation_angle</code> of event <code>VerticalRevealState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_VERTICALREVEALSTATE_ROTATION_SPEED; /**< Key of the argument </code>rotation_speed</code> of event <code>VerticalRevealState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_VERTICALREVEALSTATE_PLAY_MODE; /**< Key of the argument </code>play_mode</code> of event <code>VerticalRevealState</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_SPIRALSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>SpiralState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_SPIRALSTATE_SPEED; /**< Key of the argument </code>speed</code> of event <code>SpiralState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_SPIRALSTATE_RADIUS_VARIATION; /**< Key of the argument </code>radius_variation</code> of event <code>SpiralState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_SPIRALSTATE_VERTICAL_DISTANCE; /**< Key of the argument </code>vertical_distance</code> of event <code>SpiralState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_SPIRALSTATE_REVOLUTION_NB; /**< Key of the argument </code>revolution_nb</code> of event <code>SpiralState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_SPIRALSTATE_PLAY_MODE; /**< Key of the argument </code>play_mode</code> of event <code>SpiralState</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_PARABOLASTATE_STATE; /**< Key of the argument </code>state</code> of event <code>ParabolaState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_PARABOLASTATE_SPEED; /**< Key of the argument </code>speed</code> of event <code>ParabolaState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_PARABOLASTATE_VERTICAL_DISTANCE; /**< Key of the argument </code>vertical_distance</code> of event <code>ParabolaState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_PARABOLASTATE_PLAY_MODE; /**< Key of the argument </code>play_mode</code> of event <code>ParabolaState</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_CANDLESTATE_STATE; /**< Key of the argument </code>state</code> of event <code>CandleState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_CANDLESTATE_SPEED; /**< Key of the argument </code>speed</code> of event <code>CandleState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_CANDLESTATE_VERTICAL_DISTANCE; /**< Key of the argument </code>vertical_distance</code> of event <code>CandleState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_CANDLESTATE_PLAY_MODE; /**< Key of the argument </code>play_mode</code> of event <code>CandleState</code> in feature <code>Animation</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_DOLLYSLIDESTATE_STATE; /**< Key of the argument </code>state</code> of event <code>DollySlideState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_DOLLYSLIDESTATE_SPEED; /**< Key of the argument </code>speed</code> of event <code>DollySlideState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_DOLLYSLIDESTATE_ANGLE; /**< Key of the argument </code>angle</code> of event <code>DollySlideState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_DOLLYSLIDESTATE_HORIZONTAL_DISTANCE; /**< Key of the argument </code>horizontal_distance</code> of event <code>DollySlideState</code> in feature <code>Animation</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ANIMATION_DOLLYSLIDESTATE_PLAY_MODE; /**< Key of the argument </code>play_mode</code> of event <code>DollySlideState</code> in feature <code>Animation</code> */

/**
 * @brief Send a command <code>Cancel</code> in feature <code>Animation</code>
 * Cancel current animation.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendCancel_t) (ARCONTROLLER_FEATURE_Animation_t *feature);

/**
 * @brief Send a command <code>StartFlip</code> in feature <code>Animation</code>
 * Start a flip animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * @param feature feature owning the commands
 * @param type Type of the flip Animation flip type.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendStartFlip_t) (ARCONTROLLER_FEATURE_Animation_t *feature, eARCOMMANDS_ANIMATION_FLIP_TYPE type);

/**
 * @brief Send a command <code>StartHorizontalPanorama</code> in feature <code>Animation</code>
 * Start an horizontal panorama animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone horizontaly rotates on itself.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Horizontal panorama configuration parameter.
 * @param rotation_angle Desired rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise. Not used when rotation angle of provided_params param is 0.
 * @param rotation_speed The desired rotation speed of the anim in rad/s Not used when rotation speed of provided_params param is 0.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendStartHorizontalPanorama_t) (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float rotation_angle, float rotation_speed);

/**
 * @brief Send a command <code>StartDronie</code> in feature <code>Animation</code>
 * Start a dronie animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone flies away on a given distance with a computed angle.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Dronie animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param distance Desired dronie distance in m (length of the hypotenuse). Not used when distance of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendStartDronie_t) (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartHorizontalReveal</code> in feature <code>Animation</code>
 * Start an horizontal reveal animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone starts looking down, then moves forward while slowly looking at the horizon.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Horizontal reveal animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param distance Desired distance in m. Not used when distance of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendStartHorizontalReveal_t) (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartVerticalReveal</code> in feature <code>Animation</code>
 * Start a vertical reveal animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone starts looking down, then moves up while slowly looking at the horizon. When it reaches its target altitude, it rotates on itself to do a panorama.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Vertical reveal animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param vertical_distance Desired vertical distance in m. Not used when vertical distance of provided_params param is 0.
 * @param rotation_angle Desired rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise. Not used when rotation angle of provided_params param is 0.
 * @param rotation_speed The desired rotation speed of the anim in rad/s Not used when rotation speed of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendStartVerticalReveal_t) (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float vertical_distance, float rotation_angle, float rotation_speed, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartSpiral</code> in feature <code>Animation</code>
 * Start a spiral animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone circles around its target.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Spiral animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param radius_variation Desired relative radius variation in m. A value of 2 means that the ending radius will be twice as big as the starting radius. A value of -2 means that the ending radius will half of the size of the starting radius. A value of 1 means that the radius will not change during the animation. Not used when radius variation of provided_params param is 0.
 * @param vertical_distance Desired vertical distance in m. If negative, the spiral will be directed to the ground. Not used when vertical distance of provided_params param is 0.
 * @param revolution_nb The number of revolution (in turn). Positive value makes a clockwise spiral, negative is anti-clockwise. Example: 1.5 makes an entire turn plus half of a turn
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendStartSpiral_t) (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float radius_variation, float vertical_distance, float revolution_nb, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartParabola</code> in feature <code>Animation</code>
 * Start a parabola animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone makes a parabola on top of its target and ends on the other side of it.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Parabola animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param vertical_distance Desired vertical distance in m. Not used when vertical distance of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendStartParabola_t) (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartCandle</code> in feature <code>Animation</code>
 * Start a candle animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone flies horizontally in direction of the target then flies up.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Candle animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param vertical_distance Desired vertical distance in m. Not used when vertical distance of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendStartCandle_t) (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float vertical_distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Send a command <code>StartDollySlide</code> in feature <code>Animation</code>
 * Start a dolly slide animation.
 * Starting this animation when another animation is started (or canceling), will cancel the current one to start this one.
 * This animation will make the drone slides horizontally.
 * @param feature feature owning the commands
 * @param provided_params Bitfield of the config parameters on which given values should be used. Setting a bit to 1 means that the corresponding parameter should be used, otherwise default value should be used. Dolly slide animation configuration parameter.
 * @param speed Desired speed in m/s. Not used when speed of provided_params param is 0.
 * @param angle Desired drone-target-destination angle in rad. Not used when angle of provided_params param is 0.
 * @param horizontal_distance Desired horizontal distance in m.. Not used when angle of provided_params param is 0.
 * @param play_mode Desired play mode. Not used when play mode of provided_params param is 0. Animation play mode.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Animation_SendStartDollySlide_t) (ARCONTROLLER_FEATURE_Animation_t *feature, uint8_t provided_params, float speed, float angle, float horizontal_distance, eARCOMMANDS_ANIMATION_PLAY_MODE play_mode);

/**
 * @brief Feature controller allow to send command related of animation Feature.
 * All messages related to the animations
 */
struct ARCONTROLLER_FEATURE_Animation_t
{
    ARCONTROLLER_FEATURE_Animation_SendCancel_t sendCancel;
    ARCONTROLLER_FEATURE_Animation_SendStartFlip_t sendStartFlip;
    ARCONTROLLER_FEATURE_Animation_SendStartHorizontalPanorama_t sendStartHorizontalPanorama;
    ARCONTROLLER_FEATURE_Animation_SendStartDronie_t sendStartDronie;
    ARCONTROLLER_FEATURE_Animation_SendStartHorizontalReveal_t sendStartHorizontalReveal;
    ARCONTROLLER_FEATURE_Animation_SendStartVerticalReveal_t sendStartVerticalReveal;
    ARCONTROLLER_FEATURE_Animation_SendStartSpiral_t sendStartSpiral;
    ARCONTROLLER_FEATURE_Animation_SendStartParabola_t sendStartParabola;
    ARCONTROLLER_FEATURE_Animation_SendStartCandle_t sendStartCandle;
    ARCONTROLLER_FEATURE_Animation_SendStartDollySlide_t sendStartDollySlide;
    ARCONTROLLER_FEATURE_Animation_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_Animation_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Animation_SetNetworkController (ARCONTROLLER_FEATURE_Animation_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Animation_GetCommandElements (ARCONTROLLER_FEATURE_Animation_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE ARDrone3 --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_ARDrone3_t.
 */
typedef struct ARCONTROLLER_FEATURE_ARDrone3_Private_t ARCONTROLLER_FEATURE_ARDrone3_Private_t;

/**
 * @brief Feature controller allow to send command related of ARDrone3 Feature.
 * All ARDrone3-only commands
 */
typedef struct ARCONTROLLER_FEATURE_ARDrone3_t ARCONTROLLER_FEATURE_ARDrone3_t;

/**
 * @brief Create a new ARDrone3 Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_ARDrone3_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_ARDrone3_SetNetworkController().
 * @param[out] error executing error.
 * @return the new ARDrone3 Feature Controller
 * @see ARCONTROLLER_FEATURE_ARDrone3_Delete
 */
ARCONTROLLER_FEATURE_ARDrone3_t *ARCONTROLLER_FEATURE_ARDrone3_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the ARDrone3 Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_ARDrone3_New
 */
void ARCONTROLLER_FEATURE_ARDrone3_Delete (ARCONTROLLER_FEATURE_ARDrone3_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_RegisterARCommands (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_UnregisterARCommands (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Get the dictionay of the ARDrone3 Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_ARDrone3_GetDictionary (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>ARDrone3</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_ARDrone3_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_AddCallback (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>ARDrone3</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_RemoveCallback (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStateVideoStateChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>MediaRecordStateVideoStateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStateVideoStateChangedV2</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordStateVideoStateChangedV2</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING; /**< Key of the argument </code>streaming</code> of event <code>MediaRecordStateVideoResolutionState</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING; /**< Key of the argument </code>recording</code> of event <code>MediaRecordStateVideoResolutionState</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventVideoEventChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventVideoEventChanged</code> in feature <code>ARDrone3</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateFlyingStateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateAlertStateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateNavigateHomeStateChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON; /**< Key of the argument </code>reason</code> of event <code>PilotingStateNavigateHomeStateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of event <code>PilotingStatePositionChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of event <code>PilotingStatePositionChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>PilotingStatePositionChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDX; /**< Key of the argument </code>speedX</code> of event <code>PilotingStateSpeedChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDY; /**< Key of the argument </code>speedY</code> of event <code>PilotingStateSpeedChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDZ; /**< Key of the argument </code>speedZ</code> of event <code>PilotingStateSpeedChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_ROLL; /**< Key of the argument </code>roll</code> of event <code>PilotingStateAttitudeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_PITCH; /**< Key of the argument </code>pitch</code> of event <code>PilotingStateAttitudeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_YAW; /**< Key of the argument </code>yaw</code> of event <code>PilotingStateAttitudeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateAutoTakeOffModeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ALTITUDECHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>PilotingStateAltitudeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_GPSLOCATIONCHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of event <code>PilotingStateGpsLocationChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_GPSLOCATIONCHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of event <code>PilotingStateGpsLocationChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_GPSLOCATIONCHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>PilotingStateGpsLocationChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_GPSLOCATIONCHANGED_LATITUDE_ACCURACY; /**< Key of the argument </code>latitude_accuracy</code> of event <code>PilotingStateGpsLocationChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_GPSLOCATIONCHANGED_LONGITUDE_ACCURACY; /**< Key of the argument </code>longitude_accuracy</code> of event <code>PilotingStateGpsLocationChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_GPSLOCATIONCHANGED_ALTITUDE_ACCURACY; /**< Key of the argument </code>altitude_accuracy</code> of event <code>PilotingStateGpsLocationChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateLandingStateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_AIRSPEEDCHANGED_AIRSPEED; /**< Key of the argument </code>airSpeed</code> of event <code>PilotingStateAirSpeedChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of event <code>PilotingStateMoveToChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of event <code>PilotingStateMoveToChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>PilotingStateMoveToChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE; /**< Key of the argument </code>orientation_mode</code> of event <code>PilotingStateMoveToChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_HEADING; /**< Key of the argument </code>heading</code> of event <code>PilotingStateMoveToChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS; /**< Key of the argument </code>status</code> of event <code>PilotingStateMoveToChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateMotionState</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_LATITUDE; /**< Key of the argument </code>latitude</code> of event <code>PilotingStatePilotedPOI</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_LONGITUDE; /**< Key of the argument </code>longitude</code> of event <code>PilotingStatePilotedPOI</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>PilotingStatePilotedPOI</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS; /**< Key of the argument </code>status</code> of event <code>PilotingStatePilotedPOI</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS; /**< Key of the argument </code>status</code> of event <code>PilotingStateReturnHomeBatteryCapacity</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DX; /**< Key of the argument </code>dX</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DY; /**< Key of the argument </code>dY</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DZ; /**< Key of the argument </code>dZ</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DPSI; /**< Key of the argument </code>dPsi</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR; /**< Key of the argument </code>error</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_SSID; /**< Key of the argument </code>ssid</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_RSSI; /**< Key of the argument </code>rssi</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>ARDrone3</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_IN_OR_OUT; /**< Key of the argument </code>in_or_out</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>ARDrone3</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_ABSOLUTCONTROLCHANGED_ON; /**< Key of the argument </code>on</code> of event <code>PilotingSettingsStateAbsolutControlChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxDistanceChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxDistanceChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxDistanceChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_NOFLYOVERMAXDISTANCECHANGED_SHOULDNOTFLYOVER; /**< Key of the argument </code>shouldNotFlyOver</code> of event <code>PilotingSettingsStateNoFlyOverMaxDistanceChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXHORIZONTALSPEED_VALUE; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxHorizontalSpeed</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXVERTICALSPEED_VALUE; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxVerticalSpeed</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXHORIZONTALACCELERATION_VALUE; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxHorizontalAcceleration</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXVERTICALACCELERATION_VALUE; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxVerticalAcceleration</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXROTATIONSPEED_VALUE; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxRotationSpeed</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_BANKEDTURNCHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingSettingsStateBankedTurnChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MINALTITUDECHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMinAltitudeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MINALTITUDECHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMinAltitudeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MINALTITUDECHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMinAltitudeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateCirclingDirectionChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGRADIUSCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateCirclingRadiusChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGRADIUSCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateCirclingRadiusChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGRADIUSCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateCirclingRadiusChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGALTITUDECHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateCirclingAltitudeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGALTITUDECHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateCirclingAltitudeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGALTITUDECHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateCirclingAltitudeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStatePitchModeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MOTIONDETECTION_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>PilotingSettingsStateMotionDetection</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_HULLPROTECTIONCHANGED_PRESENT; /**< Key of the argument </code>present</code> of event <code>SpeedSettingsStateHullProtectionChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_OUTDOORCHANGED_OUTDOOR; /**< Key of the argument </code>outdoor</code> of event <code>SpeedSettingsStateOutdoorChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXPITCHROLLROTATIONSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxPitchRollRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXPITCHROLLROTATIONSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxPitchRollRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXPITCHROLLROTATIONSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxPitchRollRotationSpeedChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>NetworkSettingsStateWifiSecurityChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE; /**< Key of the argument </code>type</code> of event <code>NetworkSettingsStateWifiSecurity</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEY; /**< Key of the argument </code>key</code> of event <code>NetworkSettingsStateWifiSecurity</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE; /**< Key of the argument </code>keyType</code> of event <code>NetworkSettingsStateWifiSecurity</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_MOTOR_NUMBER; /**< Key of the argument </code>motor_number</code> of event <code>SettingsStateProductMotorVersionListChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>SettingsStateProductMotorVersionListChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductMotorVersionListChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductMotorVersionListChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductGPSVersionChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductGPSVersionChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORIDS; /**< Key of the argument </code>motorIds</code> of event <code>SettingsStateMotorErrorStateChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR; /**< Key of the argument </code>motorError</code> of event <code>SettingsStateMotorErrorStateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORSOFTWAREVERSIONCHANGED_VERSION; /**< Key of the argument </code>version</code> of event <code>SettingsStateMotorSoftwareVersionChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_NBFLIGHTS; /**< Key of the argument </code>nbFlights</code> of event <code>SettingsStateMotorFlightsStatusChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_LASTFLIGHTDURATION; /**< Key of the argument </code>lastFlightDuration</code> of event <code>SettingsStateMotorFlightsStatusChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_TOTALFLIGHTDURATION; /**< Key of the argument </code>totalFlightDuration</code> of event <code>SettingsStateMotorFlightsStatusChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR; /**< Key of the argument </code>motorError</code> of event <code>SettingsStateMotorErrorLastErrorChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_P7ID_SERIALID; /**< Key of the argument </code>serialID</code> of event <code>SettingsStateP7ID</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_CPUID_ID; /**< Key of the argument </code>id</code> of event <code>SettingsStateCPUID</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>PictureSettingsStatePictureFormatChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>PictureSettingsStateAutoWhiteBalanceChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_VALUE; /**< Key of the argument </code>value</code> of event <code>PictureSettingsStateExpositionChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PictureSettingsStateExpositionChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PictureSettingsStateExpositionChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_VALUE; /**< Key of the argument </code>value</code> of event <code>PictureSettingsStateSaturationChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PictureSettingsStateSaturationChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PictureSettingsStateSaturationChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>PictureSettingsStateTimelapseChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_INTERVAL; /**< Key of the argument </code>interval</code> of event <code>PictureSettingsStateTimelapseChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_MININTERVAL; /**< Key of the argument </code>minInterval</code> of event <code>PictureSettingsStateTimelapseChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_MAXINTERVAL; /**< Key of the argument </code>maxInterval</code> of event <code>PictureSettingsStateTimelapseChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOAUTORECORDCHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>PictureSettingsStateVideoAutorecordChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOAUTORECORDCHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>PictureSettingsStateVideoAutorecordChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE; /**< Key of the argument </code>mode</code> of event <code>PictureSettingsStateVideoStabilizationModeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE; /**< Key of the argument </code>mode</code> of event <code>PictureSettingsStateVideoRecordingModeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE; /**< Key of the argument </code>framerate</code> of event <code>PictureSettingsStateVideoFramerateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>PictureSettingsStateVideoResolutionsChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>MediaStreamingStateVideoEnableChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE; /**< Key of the argument </code>mode</code> of event <code>MediaStreamingStateVideoStreamModeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of event <code>GPSSettingsStateHomeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of event <code>GPSSettingsStateHomeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>GPSSettingsStateHomeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of event <code>GPSSettingsStateResetHomeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of event <code>GPSSettingsStateResetHomeChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>GPSSettingsStateResetHomeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GPSFIXSTATECHANGED_FIXED; /**< Key of the argument </code>fixed</code> of event <code>GPSSettingsStateGPSFixStateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>GPSSettingsStateGPSUpdateStateChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>GPSSettingsStateHomeTypeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RETURNHOMEDELAYCHANGED_DELAY; /**< Key of the argument </code>delay</code> of event <code>GPSSettingsStateReturnHomeDelayChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GEOFENCECENTERCHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of event <code>GPSSettingsStateGeofenceCenterChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GEOFENCECENTERCHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of event <code>GPSSettingsStateGeofenceCenterChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATION_TILT; /**< Key of the argument </code>tilt</code> of event <code>CameraStateOrientation</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATION_PAN; /**< Key of the argument </code>pan</code> of event <code>CameraStateOrientation</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_DEFAULTCAMERAORIENTATION_TILT; /**< Key of the argument </code>tilt</code> of event <code>CameraStateDefaultCameraOrientation</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_DEFAULTCAMERAORIENTATION_PAN; /**< Key of the argument </code>pan</code> of event <code>CameraStateDefaultCameraOrientation</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATIONV2_TILT; /**< Key of the argument </code>tilt</code> of event <code>CameraStateOrientationV2</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATIONV2_PAN; /**< Key of the argument </code>pan</code> of event <code>CameraStateOrientationV2</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_DEFAULTCAMERAORIENTATIONV2_TILT; /**< Key of the argument </code>tilt</code> of event <code>CameraStateDefaultCameraOrientationV2</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_DEFAULTCAMERAORIENTATIONV2_PAN; /**< Key of the argument </code>pan</code> of event <code>CameraStateDefaultCameraOrientationV2</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_VELOCITYRANGE_MAX_TILT; /**< Key of the argument </code>max_tilt</code> of event <code>CameraStateVelocityRange</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_VELOCITYRANGE_MAX_PAN; /**< Key of the argument </code>max_pan</code> of event <code>CameraStateVelocityRange</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY; /**< Key of the argument </code>frequency</code> of event <code>AntiflickeringStateElectricFrequencyChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE; /**< Key of the argument </code>mode</code> of event <code>AntiflickeringStateModeChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_NUMBEROFSATELLITECHANGED_NUMBEROFSATELLITE; /**< Key of the argument </code>numberOfSatellite</code> of event <code>GPSStateNumberOfSatelliteChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>GPSStateHomeTypeAvailabilityChanged</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_AVAILABLE; /**< Key of the argument </code>available</code> of event <code>GPSStateHomeTypeAvailabilityChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>GPSStateHomeTypeChosenChanged</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PROSTATE_FEATURES_FEATURES; /**< Key of the argument </code>features</code> of event <code>PROStateFeatures</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ID; /**< Key of the argument </code>id</code> of event <code>AccessoryStateConnectedAccessories</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE; /**< Key of the argument </code>accessory_type</code> of event <code>AccessoryStateConnectedAccessories</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_UID; /**< Key of the argument </code>uid</code> of event <code>AccessoryStateConnectedAccessories</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_SWVERSION; /**< Key of the argument </code>swVersion</code> of event <code>AccessoryStateConnectedAccessories</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ACCESSORYSTATE_BATTERY_ID; /**< Key of the argument </code>id</code> of event <code>AccessoryStateBattery</code> in feature <code>ARDrone3</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ACCESSORYSTATE_BATTERY_BATTERYLEVEL; /**< Key of the argument </code>batteryLevel</code> of event <code>AccessoryStateBattery</code> in feature <code>ARDrone3</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE; /**< Key of the argument </code>state</code> of event <code>SoundStateAlertSound</code> in feature <code>ARDrone3</code> */

/**
 * @brief Send a command <code>PilotingFlatTrim</code> in feature <code>ARDrone3</code>
 * Do a flat trim of the accelerometer/gyro.
 * Could be useful when the drone is sliding in hover mode.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingFlatTrim_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingTakeOff</code> in feature <code>ARDrone3</code>
 * Ask the drone to take off.
 * On the fixed wings (such as Disco): not used except to cancel a land.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingTakeOff_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingPCMD</code> in feature <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param flag Boolean flag: 1 if the roll and pitch values should be taken in consideration. 0 otherwise
 * @param roll Roll angle as signed percentage. On copters: Roll angle expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a roll angle of max pitch/roll to the left (drone will fly left) 100 corresponds to a roll angle of max pitch/roll to the right (drone will fly right) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Roll angle expressed as signed percentage of the physical max roll of the wing, in range [-100, 100] Negative value makes the plane fly to the left Positive value makes the plane fly to the right
 * @param pitch Pitch angle as signed percentage. On copters: Expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a pitch angle of max pitch/roll towards sky (drone will fly backward) 100 corresponds to a pitch angle of max pitch/roll towards ground (drone will fly forward) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Expressed as signed percentage of the physical max pitch of the wing, in range [-100, 100] Negative value makes the plane fly in direction of the sky Positive value makes the plane fly in direction of the ground
 * @param yaw Yaw rotation speed as signed percentage. On copters: Expressed as signed percentage of the max yaw rotation speed setting, in range [-100, 100]. -100 corresponds to a counter-clockwise rotation of max yaw rotation speed 100 corresponds to a clockwise rotation of max yaw rotation speed This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Giving more than a fixed value (75% for the moment) triggers a circle. Positive value will trigger a clockwise circling Negative value will trigger a counter-clockwise circling
 * @param gaz Throttle as signed percentage. On copters: Expressed as signed percentage of the max vertical speed setting, in range [-100, 100] -100 corresponds to a max vertical speed towards ground 100 corresponds to a max vertical speed towards sky This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. During the landing phase, putting some positive gaz will cancel the land.  On fixed wings: Expressed as signed percentage of the physical max throttle, in range [-100, 100] Negative value makes the plane fly slower Positive value makes the plane fly faster
 * @param timestampAndSeqNum Command timestamp in milliseconds (low 24 bits) + command sequence number (high 8 bits) [0;255].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingPCMD_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, uint32_t timestampAndSeqNum);

/**
 * @brief Set the parameters to send through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param flag Boolean flag: 1 if the roll and pitch values should be taken in consideration. 0 otherwise
 * @param roll Roll angle as signed percentage. On copters: Roll angle expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a roll angle of max pitch/roll to the left (drone will fly left) 100 corresponds to a roll angle of max pitch/roll to the right (drone will fly right) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Roll angle expressed as signed percentage of the physical max roll of the wing, in range [-100, 100] Negative value makes the plane fly to the left Positive value makes the plane fly to the right
 * @param pitch Pitch angle as signed percentage. On copters: Expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a pitch angle of max pitch/roll towards sky (drone will fly backward) 100 corresponds to a pitch angle of max pitch/roll towards ground (drone will fly forward) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Expressed as signed percentage of the physical max pitch of the wing, in range [-100, 100] Negative value makes the plane fly in direction of the sky Positive value makes the plane fly in direction of the ground
 * @param yaw Yaw rotation speed as signed percentage. On copters: Expressed as signed percentage of the max yaw rotation speed setting, in range [-100, 100]. -100 corresponds to a counter-clockwise rotation of max yaw rotation speed 100 corresponds to a clockwise rotation of max yaw rotation speed This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Giving more than a fixed value (75% for the moment) triggers a circle. Positive value will trigger a clockwise circling Negative value will trigger a counter-clockwise circling
 * @param gaz Throttle as signed percentage. On copters: Expressed as signed percentage of the max vertical speed setting, in range [-100, 100] -100 corresponds to a max vertical speed towards ground 100 corresponds to a max vertical speed towards sky This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. During the landing phase, putting some positive gaz will cancel the land.  On fixed wings: Expressed as signed percentage of the physical max throttle, in range [-100, 100] Negative value makes the plane fly slower Positive value makes the plane fly faster
 * @param timestampAndSeqNum Command timestamp in milliseconds (low 24 bits) + command sequence number (high 8 bits) [0;255].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMD_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, uint32_t timestampAndSeqNum);

/**
 * @brief Send the a command <code>PilotingPCMD</code> in project <code>ARDrone3</code> with the parame set beforehand 
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_ARDrone3_SendPilotingPCMDStruct (ARCONTROLLER_FEATURE_ARDrone3_t *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set flag sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param flag Boolean flag: 1 if the roll and pitch values should be taken in consideration. 0 otherwise
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDFlag_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t flag);

/**
 * @brief Set roll sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param roll Roll angle as signed percentage. On copters: Roll angle expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a roll angle of max pitch/roll to the left (drone will fly left) 100 corresponds to a roll angle of max pitch/roll to the right (drone will fly right) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Roll angle expressed as signed percentage of the physical max roll of the wing, in range [-100, 100] Negative value makes the plane fly to the left Positive value makes the plane fly to the right
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDRoll_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t roll);

/**
 * @brief Set pitch sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param pitch Pitch angle as signed percentage. On copters: Expressed as signed percentage of the max pitch/roll setting, in range [-100, 100] -100 corresponds to a pitch angle of max pitch/roll towards sky (drone will fly backward) 100 corresponds to a pitch angle of max pitch/roll towards ground (drone will fly forward) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Expressed as signed percentage of the physical max pitch of the wing, in range [-100, 100] Negative value makes the plane fly in direction of the sky Positive value makes the plane fly in direction of the ground
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDPitch_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t pitch);

/**
 * @brief Set yaw sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param yaw Yaw rotation speed as signed percentage. On copters: Expressed as signed percentage of the max yaw rotation speed setting, in range [-100, 100]. -100 corresponds to a counter-clockwise rotation of max yaw rotation speed 100 corresponds to a clockwise rotation of max yaw rotation speed This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.  On fixed wings: Giving more than a fixed value (75% for the moment) triggers a circle. Positive value will trigger a clockwise circling Negative value will trigger a counter-clockwise circling
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDYaw_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t yaw);

/**
 * @brief Set gaz sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param gaz Throttle as signed percentage. On copters: Expressed as signed percentage of the max vertical speed setting, in range [-100, 100] -100 corresponds to a max vertical speed towards ground 100 corresponds to a max vertical speed towards sky This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. During the landing phase, putting some positive gaz will cancel the land.  On fixed wings: Expressed as signed percentage of the physical max throttle, in range [-100, 100] Negative value makes the plane fly slower Positive value makes the plane fly faster
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDGaz_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t gaz);

/**
 * @brief Set timestampAndSeqNum sent through the command <code>PilotingPCMD</code> in project <code>ARDrone3</code>
 * Move the drone.
 * The libARController is sending the command each 50ms.
 * 
 * **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**
 * @param feature feature owning the commands
 * @param timestampAndSeqNum Command timestamp in milliseconds (low 24 bits) + command sequence number (high 8 bits) [0;255].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDTimestampAndSeqNum_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint32_t timestampAndSeqNum);

/**
 * @brief Send a command <code>PilotingLanding</code> in feature <code>ARDrone3</code>
 * Land.
 * Please note that on copters, if you put some positive gaz (in the [PilotingCommand](#1-0-2)) during the landing, it will cancel it.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingLanding_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingEmergency</code> in feature <code>ARDrone3</code>
 * Cut out the motors.
 * This cuts immediatly the motors. The drone will fall.
 * This command is sent on a dedicated high priority buffer which will infinitely retry to send it if the command is not delivered.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingEmergency_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingNavigateHome</code> in feature <code>ARDrone3</code>
 * Return home.
 * Ask the drone to fly to its [HomePosition](#1-24-0).
 * The availability of the return home can be get from [ReturnHomeState](#1-4-3).
 * Please note that the drone will wait to be hovering to start its return home. This means that it will wait to have a [flag](#1-0-2) set at 0.
 * @param feature feature owning the commands
 * @param start 1 to start the navigate home, 0 to stop it
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingNavigateHome_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t start);

/**
 * @brief Send a command <code>PilotingAutoTakeOffMode</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Auto take off mode.
 * @param feature feature owning the commands
 * @param state State of automatic take off mode (1 for autotake off enabled)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingAutoTakeOffMode_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t state);

/**
 * @brief Send a command <code>PilotingMoveBy</code> in feature <code>ARDrone3</code>
 * Move the drone to a relative position and rotate heading by a given angle.
 * Moves are relative to the current drone orientation, (drone's reference).
 * Also note that the given rotation will not modify the move (i.e. moves are always rectilinear).
 * @param feature feature owning the commands
 * @param dX Wanted displacement along the front axis [m]
 * @param dY Wanted displacement along the right axis [m]
 * @param dZ Wanted displacement along the down axis [m]
 * @param dPsi Wanted rotation of heading [rad]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingMoveBy_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float dX, float dY, float dZ, float dPsi);

/**
 * @brief Send a command <code>PilotingUserTakeOff</code> in feature <code>ARDrone3</code>
 * Prepare the drone to take off.
 * On copters: initiates the thrown takeoff. Note that the drone will do the thrown take off even if it is steady.
 * On fixed wings: initiates the take off process on the fixed wings.
 * 
 * Setting the state to 0 will cancel the preparation. You can cancel it before that the drone takes off.
 * @param feature feature owning the commands
 * @param state State of user take off mode - 1 to enter in user take off. - 0 to exit from user take off.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingUserTakeOff_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t state);

/**
 * @brief Send a command <code>PilotingCircle</code> in feature <code>ARDrone3</code>
 * Make the fixed wing circle.
 * The circle will use the [CirclingAltitude](#1-6-14) and the [CirclingRadius](#1-6-13)
 * @param feature feature owning the commands
 * @param direction The circling direction
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingCircle_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION direction);

/**
 * @brief Send a command <code>PilotingMoveTo</code> in feature <code>ARDrone3</code>
 * Move the drone to a specified location.
 * If a new command moveTo is sent, the drone will immediatly run it (no cancel will be issued).
 * If a [CancelMoveTo](#1-0-11) command is sent, the moveTo is stopped.
 * During the moveTo, all pitch, roll and gaz values of the piloting command will be ignored by the drone.
 * However, the yaw value can be used.
 * @param feature feature owning the commands
 * @param latitude Latitude of the location (in degrees) to reach
 * @param longitude Longitude of the location (in degrees) to reach
 * @param altitude Altitude above sea level (in m) to reach
 * @param orientation_mode Orientation mode of the move to
 * @param heading Heading (relative to the North in degrees). This value is only used if the orientation mode is HEADING_START or HEADING_DURING
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingMoveTo_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude, eARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE orientation_mode, float heading);

/**
 * @brief Send a command <code>PilotingCancelMoveTo</code> in feature <code>ARDrone3</code>
 * Cancel the current moveTo.
 * If there is no current moveTo, this command has no effect.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingCancelMoveTo_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingStartPilotedPOI</code> in feature <code>ARDrone3</code>
 * Start a piloted Point Of Interest.
 * During a piloted POI, the drone will always look at the given POI but can be piloted normally. However, yaw value is ignored. Camera tilt and pan command is also ignored.
 * Ignored if [PilotedPOI](#1-4-14) state is UNAVAILABLE.
 * @param feature feature owning the commands
 * @param latitude Latitude of the location (in degrees) to look at
 * @param longitude Longitude of the location (in degrees) to look at
 * @param altitude Altitude above sea level (in m) to look at
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingStartPilotedPOI_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude);

/**
 * @brief Send a command <code>PilotingStopPilotedPOI</code> in feature <code>ARDrone3</code>
 * Stop the piloted Point Of Interest.
 * If [PilotedPOI](#1-4-14) state is RUNNING or PENDING, stop it.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingStopPilotedPOI_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>AnimationsFlip</code> in feature <code>ARDrone3</code>
 * Make a flip.
 * @param feature feature owning the commands
 * @param direction Direction for the flip
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendAnimationsFlip_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION direction);

/**
 * @brief Send a command <code>CameraOrientation</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendCameraOrientation_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t tilt, int8_t pan);

/**
 * @brief Set the parameters to send through the command <code>CameraOrientation</code> in project <code>ARDrone3</code>
 * @deprecated
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientation_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t tilt, int8_t pan);

/**
 * @brief Send the a command <code>CameraOrientation</code> in project <code>ARDrone3</code> with the parame set beforehand 
 * @deprecated
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_ARDrone3_SendCameraOrientationStruct (ARCONTROLLER_FEATURE_ARDrone3_t *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set tilt sent through the command <code>CameraOrientation</code> in project <code>ARDrone3</code>
 * @deprecated
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationTilt_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t tilt);

/**
 * @brief Set pan sent through the command <code>CameraOrientation</code> in project <code>ARDrone3</code>
 * @deprecated
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationPan_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, int8_t pan);

/**
 * @brief Send a command <code>CameraOrientationV2</code> in feature <code>ARDrone3</code>
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendCameraOrientationV2_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt, float pan);

/**
 * @brief Set the parameters to send through the command <code>CameraOrientationV2</code> in project <code>ARDrone3</code>
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationV2_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt, float pan);

/**
 * @brief Send the a command <code>CameraOrientationV2</code> in project <code>ARDrone3</code> with the parame set beforehand 
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_ARDrone3_SendCameraOrientationV2Struct (ARCONTROLLER_FEATURE_ARDrone3_t *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set tilt sent through the command <code>CameraOrientationV2</code> in project <code>ARDrone3</code>
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationV2Tilt_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt);

/**
 * @brief Set pan sent through the command <code>CameraOrientationV2</code> in project <code>ARDrone3</code>
 * Move the camera.
 * You can get min and max values for tilt and pan using [CameraInfo](#0-15-0).
 * @param feature feature owning the commands
 * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationV2Pan_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float pan);

/**
 * @brief Send a command <code>CameraVelocity</code> in feature <code>ARDrone3</code>
 * Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @param feature feature owning the commands
 * @param tilt Tilt camera velocity consign [deg/s] Negative tilt velocity move camera to bottom Positive tilt velocity move camera to top
 * @param pan Pan camera velocity consign [deg/s] Negative pan velocity move camera to left Positive pan velocity move camera to right
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendCameraVelocity_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt, float pan);

/**
 * @brief Set the parameters to send through the command <code>CameraVelocity</code> in project <code>ARDrone3</code>
 * Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @param feature feature owning the commands
 * @param tilt Tilt camera velocity consign [deg/s] Negative tilt velocity move camera to bottom Positive tilt velocity move camera to top
 * @param pan Pan camera velocity consign [deg/s] Negative pan velocity move camera to left Positive pan velocity move camera to right
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetCameraVelocity_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt, float pan);

/**
 * @brief Send the a command <code>CameraVelocity</code> in project <code>ARDrone3</code> with the parame set beforehand 
 * Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_ARDrone3_SendCameraVelocityStruct (ARCONTROLLER_FEATURE_ARDrone3_t *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set tilt sent through the command <code>CameraVelocity</code> in project <code>ARDrone3</code>
 * Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @param feature feature owning the commands
 * @param tilt Tilt camera velocity consign [deg/s] Negative tilt velocity move camera to bottom Positive tilt velocity move camera to top
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetCameraVelocityTilt_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float tilt);

/**
 * @brief Set pan sent through the command <code>CameraVelocity</code> in project <code>ARDrone3</code>
 * Move the camera given velocity consign.
 * You can get min and max values for tilt and pan using [CameraVelocityRange](#1-25-4).
 * @param feature feature owning the commands
 * @param pan Pan camera velocity consign [deg/s] Negative pan velocity move camera to left Positive pan velocity move camera to right
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SetCameraVelocityPan_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float pan);

/**
 * @brief Send a command <code>MediaRecordPicture</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Take a picture.
 * @param feature feature owning the commands
 * @param mass_storage_id Mass storage id to take picture
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPicture_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordVideo</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Record a video.
 * @param feature feature owning the commands
 * @param record Command to record video
 * @param mass_storage_id Mass storage id to record
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideo_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD record, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordPictureV2</code> in feature <code>ARDrone3</code>
 * Take a picture.
 * The type of picture taken is related to the picture setting.
 * You can set the picture format by sending the command [SetPictureFormat](#1-19-0). You can also get the current picture format with [PictureFormat](#1-20-0).
 * Please note that the time required to take the picture is highly related to this format.
 * 
 * You can check if the picture taking is available with [PictureState](#1-8-2).
 * Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after that the picture has been taken).
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPictureV2_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>MediaRecordVideoV2</code> in feature <code>ARDrone3</code>
 * Record a video (or start timelapse).
 * You can check if the video recording is available with [VideoState](#1-8-3).
 * This command can start a video (obvious huh?), but also a timelapse if the timelapse mode is set. You can check if the timelapse mode is set with the event [TimelapseMode](#1-20-4).
 * Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after the picture has been taken).
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideoV2_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD record);

/**
 * @brief Send a command <code>NetworkWifiScan</code> in feature <code>ARDrone3</code>
 * Scan wifi network to get a list of all networks found by the drone
 * @param feature feature owning the commands
 * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiScan_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND band);

/**
 * @brief Send a command <code>NetworkWifiAuthChannel</code> in feature <code>ARDrone3</code>
 * Ask for available wifi channels.
 * The list of available Wifi channels is related to the country of the drone. You can get this country from the event [CountryChanged](#0-3-6).
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiAuthChannel_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>PilotingSettingsMaxAltitude</code> in feature <code>ARDrone3</code>
 * Set max altitude.
 * The drone will not fly over this max altitude when it is in manual piloting.
 * Please note that if you set a max altitude which is below the current drone altitude, the drone will not go to given max altitude.
 * You can get the bounds in the event [MaxAltitude](#1-6-0).
 * @param feature feature owning the commands
 * @param current Current altitude max in m
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxAltitude_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsMaxTilt</code> in feature <code>ARDrone3</code>
 * Set max pitch/roll.
 * This represent the max inclination allowed by the drone.
 * You can get the bounds with the commands [MaxPitchRoll](#1-6-1).
 * @param feature feature owning the commands
 * @param current Current tilt max in degree
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxTilt_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsAbsolutControl</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Set absolut control.
 * @param feature feature owning the commands
 * @param on 1 to enable, 0 to disable
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsAbsolutControl_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t on);

/**
 * @brief Send a command <code>PilotingSettingsMaxDistance</code> in feature <code>ARDrone3</code>
 * Set max distance.
 * You can get the bounds from the event [MaxDistance](#1-6-3).
 * 
 * If [Geofence](#1-6-4) is activated, the drone won't fly over the given max distance.
 * @param feature feature owning the commands
 * @param value Current max distance in meter
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxDistance_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsNoFlyOverMaxDistance</code> in feature <code>ARDrone3</code>
 * Enable geofence.
 * If geofence is enabled, the drone won't fly over the given max distance.
 * You can get the max distance from the event [MaxDistance](#1-6-3).
 * For copters: the distance is computed from the controller position, if this position is not known, it will use the take off.
 * For fixed wings: the distance is computed from the take off position.
 * @param feature feature owning the commands
 * @param shouldNotFlyOver 1 if the drone can't fly further than max distance, 0 if no limitation on the drone should be done
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsNoFlyOverMaxDistance_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t shouldNotFlyOver);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxHorizontalSpeed</code> in feature <code>ARDrone3</code>
 * Set autonomous flight max horizontal speed.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum horizontal speed [m/s]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxHorizontalSpeed_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxVerticalSpeed</code> in feature <code>ARDrone3</code>
 * Set autonomous flight max vertical speed.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum vertical speed [m/s]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxVerticalSpeed_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration</code> in feature <code>ARDrone3</code>
 * Set autonomous flight max horizontal acceleration.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum horizontal acceleration [m/s2]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxVerticalAcceleration</code> in feature <code>ARDrone3</code>
 * Set autonomous flight max vertical acceleration.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum vertical acceleration [m/s2]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxVerticalAcceleration_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsSetAutonomousFlightMaxRotationSpeed</code> in feature <code>ARDrone3</code>
 * Set autonomous flight max rotation speed.
 * This will only be used during autonomous flights such as moveBy.
 * @param feature feature owning the commands
 * @param value maximum yaw rotation speed [deg/s]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxRotationSpeed_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PilotingSettingsBankedTurn</code> in feature <code>ARDrone3</code>
 * Set banked turn mode.
 * When banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.
 * @param feature feature owning the commands
 * @param value 1 to enable, 0 to disable
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsBankedTurn_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t value);

/**
 * @brief Send a command <code>PilotingSettingsMinAltitude</code> in feature <code>ARDrone3</code>
 * Set minimum altitude.
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param current Current altitude min in m
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMinAltitude_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsCirclingDirection</code> in feature <code>ARDrone3</code>
 * Set default circling direction. This direction will be used when the drone use an automatic circling or when [CIRCLE](#1-0-9) is sent with direction *default*.
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param value The circling direction
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsCirclingDirection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE value);

/**
 * @brief Send a command <code>PilotingSettingsCirclingRadius</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Set circling radius.
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param value The circling radius in meter
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsCirclingRadius_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t value);

/**
 * @brief Send a command <code>PilotingSettingsCirclingAltitude</code> in feature <code>ARDrone3</code>
 * Set min circling altitude (not used during take off).
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param value The circling altitude in meter
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsCirclingAltitude_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t value);

/**
 * @brief Send a command <code>PilotingSettingsPitchMode</code> in feature <code>ARDrone3</code>
 * Set pitch mode.
 * Only available for fixed wings.
 * @param feature feature owning the commands
 * @param value The Pitch mode
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsPitchMode_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE value);

/**
 * @brief Send a command <code>PilotingSettingsSetMotionDetectionMode</code> in feature <code>ARDrone3</code>
 * Enable/disable the motion detection.
 * If the motion detection is enabled, the drone will send its [MotionState](#1-4-13) when its [FlyingState](#1-4-1) is landed. If the motion detection is disabled, [MotionState](#1-4-13) is steady.
 * @param feature feature owning the commands
 * @param enable 1 to enable the motion detection, 0 to disable it.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetMotionDetectionMode_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>SpeedSettingsMaxVerticalSpeed</code> in feature <code>ARDrone3</code>
 * Set max vertical speed.
 * @param feature feature owning the commands
 * @param current Current max vertical speed in m/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxVerticalSpeed_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsMaxRotationSpeed</code> in feature <code>ARDrone3</code>
 * Set max rotation speed.
 * @param feature feature owning the commands
 * @param current Current max yaw rotation speed in degree/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxRotationSpeed_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsHullProtection</code> in feature <code>ARDrone3</code>
 * Set the presence of hull protection.
 * @param feature feature owning the commands
 * @param present 1 if present, 0 if not present
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsHullProtection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t present);

/**
 * @brief Send a command <code>SpeedSettingsOutdoor</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Set outdoor mode.
 * @param feature feature owning the commands
 * @param outdoor 1 if outdoor flight, 0 if indoor flight
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsOutdoor_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t outdoor);

/**
 * @brief Send a command <code>SpeedSettingsMaxPitchRollRotationSpeed</code> in feature <code>ARDrone3</code>
 * Set max pitch/roll rotation speed.
 * @param feature feature owning the commands
 * @param current Current max pitch/roll rotation speed in degree/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxPitchRollRotationSpeed_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float current);

/**
 * @brief Send a command <code>NetworkSettingsWifiSelection</code> in feature <code>ARDrone3</code>
 * Select or auto-select channel of choosen band.
 * @param feature feature owning the commands
 * @param type The type of wifi selection (auto, manual)
 * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param channel The channel (not used in auto mode)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendNetworkSettingsWifiSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>NetworkSettingsWifiSecurity</code> in feature <code>ARDrone3</code>
 * Set wifi security type.
 * The security will be changed on the next restart
 * @param feature feature owning the commands
 * @param type The type of wifi security (open, wpa2)
 * @param key The key to secure the network (empty if type is open)
 * @param keyType Type of the key
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendNetworkSettingsWifiSecurity_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE type, char * key, eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_KEYTYPE keyType);

/**
 * @brief Send a command <code>PictureSettingsPictureFormatSelection</code> in feature <code>ARDrone3</code>
 * Set picture format.
 * Please note that the time required to take the picture is highly related to this format.
 * Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after the picture has been taken).
 * @param feature feature owning the commands
 * @param type The type of photo format
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsPictureFormatSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE type);

/**
 * @brief Send a command <code>PictureSettingsAutoWhiteBalanceSelection</code> in feature <code>ARDrone3</code>
 * Set White Balance mode.
 * @param feature feature owning the commands
 * @param type The type auto white balance
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsAutoWhiteBalanceSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE type);

/**
 * @brief Send a command <code>PictureSettingsExpositionSelection</code> in feature <code>ARDrone3</code>
 * Set image exposure.
 * @param feature feature owning the commands
 * @param value Exposition value (bounds given by ExpositionChanged arg min and max, by default [-3:3])
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsExpositionSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PictureSettingsSaturationSelection</code> in feature <code>ARDrone3</code>
 * Set image saturation.
 * @param feature feature owning the commands
 * @param value Saturation value (bounds given by SaturationChanged arg min and max, by default [-100:100])
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsSaturationSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, float value);

/**
 * @brief Send a command <code>PictureSettingsTimelapseSelection</code> in feature <code>ARDrone3</code>
 * Set timelapse mode.
 * If timelapse mode is set, instead of taking a video, the drone will take picture regularly.
 * Watch out, this command only configure the timelapse mode. Once it is configured, you can start/stop the timelapse with the [RecordVideo](#1-7-3) command.
 * @param feature feature owning the commands
 * @param enabled 1 if timelapse is enabled, 0 otherwise
 * @param interval interval in seconds for taking pictures
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsTimelapseSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enabled, float interval);

/**
 * @brief Send a command <code>PictureSettingsVideoAutorecordSelection</code> in feature <code>ARDrone3</code>
 * Set video autorecord mode.
 * If autorecord is set, video record will be automatically started when the drone takes off and stopped slightly after landing.
 * @param feature feature owning the commands
 * @param enabled 1 if video autorecord is enabled, 0 otherwise
 * @param mass_storage_id Mass storage id to take video
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoAutorecordSelection_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enabled, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>PictureSettingsVideoStabilizationMode</code> in feature <code>ARDrone3</code>
 * Set video stabilization mode.
 * @param feature feature owning the commands
 * @param mode Video stabilization mode
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoStabilizationMode_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE mode);

/**
 * @brief Send a command <code>PictureSettingsVideoRecordingMode</code> in feature <code>ARDrone3</code>
 * Set video recording mode.
 * @param feature feature owning the commands
 * @param mode Video recording mode
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoRecordingMode_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORECORDINGMODE_MODE mode);

/**
 * @brief Send a command <code>PictureSettingsVideoFramerate</code> in feature <code>ARDrone3</code>
 * Set video framerate.
 * @param feature feature owning the commands
 * @param framerate Video framerate
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoFramerate_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE framerate);

/**
 * @brief Send a command <code>PictureSettingsVideoResolutions</code> in feature <code>ARDrone3</code>
 * Set video streaming and recording resolutions.
 * @param feature feature owning the commands
 * @param type Video streaming and recording resolutions
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoResolutions_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORESOLUTIONS_TYPE type);

/**
 * @brief Send a command <code>MediaStreamingVideoEnable</code> in feature <code>ARDrone3</code>
 * Enable/disable video streaming.
 * @param feature feature owning the commands
 * @param enable 1 to enable, 0 to disable.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaStreamingVideoEnable_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>MediaStreamingVideoStreamMode</code> in feature <code>ARDrone3</code>
 * Set the stream mode.
 * @param feature feature owning the commands
 * @param mode stream mode
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendMediaStreamingVideoStreamMode_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE mode);

/**
 * @brief Send a command <code>GPSSettingsSetHome</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Set home position.
 * @param feature feature owning the commands
 * @param latitude Home latitude in decimal degrees
 * @param longitude Home longitude in decimal degrees
 * @param altitude Home altitude in meters
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSetHome_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude);

/**
 * @brief Send a command <code>GPSSettingsResetHome</code> in feature <code>ARDrone3</code>
 * @deprecated
 * Reset home position.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsResetHome_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>GPSSettingsSendControllerGPS</code> in feature <code>ARDrone3</code>
 * Set controller gps location.
 * The user location might be used in case of return home, according to the home type and the accuracy of the given position. You can get the current home type with the event [HomeType](#1-24-4).
 * @param feature feature owning the commands
 * @param latitude GPS latitude in decimal degrees
 * @param longitude GPS longitude in decimal degrees
 * @param altitude GPS altitude in meters
 * @param horizontalAccuracy Horizontal Accuracy in meter ; equal -1 if no horizontal Accuracy
 * @param verticalAccuracy Vertical Accuracy in meter ; equal -1 if no vertical Accuracy
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSendControllerGPS_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy);

/**
 * @brief Send a command <code>GPSSettingsHomeType</code> in feature <code>ARDrone3</code>
 * Set the preferred home type.
 * Please note that this is only a preference. The actual type chosen is given by the event [HomeType](#1-31-2).
 * You can get the currently available types with the event [HomeTypeAvailability](#1-31-1).
 * @param feature feature owning the commands
 * @param type The type of the home position
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsHomeType_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE type);

/**
 * @brief Send a command <code>GPSSettingsReturnHomeDelay</code> in feature <code>ARDrone3</code>
 * Set the delay after which the drone will automatically try to return home after a disconnection.
 * @param feature feature owning the commands
 * @param delay Delay in second
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsReturnHomeDelay_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, uint16_t delay);

/**
 * @brief Send a command <code>AntiflickeringElectricFrequency</code> in feature <code>ARDrone3</code>
 * Set the electric frequency of the surrounding lights.
 * This is used to avoid the video flickering in auto mode. You can get the current antiflickering mode with the event [AntiflickeringModeChanged](#1-30-1).
 * @param feature feature owning the commands
 * @param frequency Type of the electric frequency
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringElectricFrequency_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY frequency);

/**
 * @brief Send a command <code>AntiflickeringSetMode</code> in feature <code>ARDrone3</code>
 * Set the antiflickering mode.
 * If auto, the drone will detect when flickers appears on the video and trigger the antiflickering.
 * In this case, this electric frequency it will use will be the one specified in the event [ElectricFrequency](#1-29-0).
 * Forcing the antiflickering (FixedFiftyHertz or FixedFiftyHertz) can reduce luminosity of the video.
 * @param feature feature owning the commands
 * @param mode Mode of the anti flickering functionnality
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringSetMode_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE mode);

/**
 * @brief Send a command <code>SoundStartAlertSound</code> in feature <code>ARDrone3</code>
 * Start the alert sound. The alert sound can only be started when the drone is not flying.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSoundStartAlertSound_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Send a command <code>SoundStopAlertSound</code> in feature <code>ARDrone3</code>
 * Stop the alert sound.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ARDrone3_SendSoundStopAlertSound_t) (ARCONTROLLER_FEATURE_ARDrone3_t *feature);

/**
 * @brief Feature controller allow to send command related of ARDrone3 Feature.
 * All ARDrone3-only commands
 */
struct ARCONTROLLER_FEATURE_ARDrone3_t
{
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingFlatTrim_t sendPilotingFlatTrim;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingTakeOff_t sendPilotingTakeOff;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingPCMD_t sendPilotingPCMD;
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMD_t setPilotingPCMD;
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDFlag_t setPilotingPCMDFlag; /**< Send a command <code>PilotingPCMD</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDRoll_t setPilotingPCMDRoll; /**< Send a command <code>PilotingPCMD</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDPitch_t setPilotingPCMDPitch; /**< Send a command <code>PilotingPCMD</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDYaw_t setPilotingPCMDYaw; /**< Send a command <code>PilotingPCMD</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDGaz_t setPilotingPCMDGaz; /**< Send a command <code>PilotingPCMD</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetPilotingPCMDTimestampAndSeqNum_t setPilotingPCMDTimestampAndSeqNum; /**< Send a command <code>PilotingPCMD</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingLanding_t sendPilotingLanding;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingEmergency_t sendPilotingEmergency;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingNavigateHome_t sendPilotingNavigateHome;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingAutoTakeOffMode_t sendPilotingAutoTakeOffMode;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingMoveBy_t sendPilotingMoveBy;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingUserTakeOff_t sendPilotingUserTakeOff;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingCircle_t sendPilotingCircle;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingMoveTo_t sendPilotingMoveTo;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingCancelMoveTo_t sendPilotingCancelMoveTo;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingStartPilotedPOI_t sendPilotingStartPilotedPOI;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingStopPilotedPOI_t sendPilotingStopPilotedPOI;
    ARCONTROLLER_FEATURE_ARDrone3_SendAnimationsFlip_t sendAnimationsFlip;
    ARCONTROLLER_FEATURE_ARDrone3_SendCameraOrientation_t sendCameraOrientation;
    ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientation_t setCameraOrientation;
    ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationTilt_t setCameraOrientationTilt; /**< Send a command <code>CameraOrientation</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationPan_t setCameraOrientationPan; /**< Send a command <code>CameraOrientation</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SendCameraOrientationV2_t sendCameraOrientationV2;
    ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationV2_t setCameraOrientationV2;
    ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationV2Tilt_t setCameraOrientationV2Tilt; /**< Send a command <code>CameraOrientationV2</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetCameraOrientationV2Pan_t setCameraOrientationV2Pan; /**< Send a command <code>CameraOrientationV2</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SendCameraVelocity_t sendCameraVelocity;
    ARCONTROLLER_FEATURE_ARDrone3_SetCameraVelocity_t setCameraVelocity;
    ARCONTROLLER_FEATURE_ARDrone3_SetCameraVelocityTilt_t setCameraVelocityTilt; /**< Send a command <code>CameraVelocity</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SetCameraVelocityPan_t setCameraVelocityPan; /**< Send a command <code>CameraVelocity</code> in feature <code>ARDrone3</code>. */
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPicture_t sendMediaRecordPicture;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideo_t sendMediaRecordVideo;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordPictureV2_t sendMediaRecordPictureV2;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaRecordVideoV2_t sendMediaRecordVideoV2;
    ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiScan_t sendNetworkWifiScan;
    ARCONTROLLER_FEATURE_ARDrone3_SendNetworkWifiAuthChannel_t sendNetworkWifiAuthChannel;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxAltitude_t sendPilotingSettingsMaxAltitude;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxTilt_t sendPilotingSettingsMaxTilt;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsAbsolutControl_t sendPilotingSettingsAbsolutControl;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMaxDistance_t sendPilotingSettingsMaxDistance;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsNoFlyOverMaxDistance_t sendPilotingSettingsNoFlyOverMaxDistance;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxHorizontalSpeed_t sendPilotingSettingsSetAutonomousFlightMaxHorizontalSpeed;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxVerticalSpeed_t sendPilotingSettingsSetAutonomousFlightMaxVerticalSpeed;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration_t sendPilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxVerticalAcceleration_t sendPilotingSettingsSetAutonomousFlightMaxVerticalAcceleration;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetAutonomousFlightMaxRotationSpeed_t sendPilotingSettingsSetAutonomousFlightMaxRotationSpeed;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsBankedTurn_t sendPilotingSettingsBankedTurn;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsMinAltitude_t sendPilotingSettingsMinAltitude;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsCirclingDirection_t sendPilotingSettingsCirclingDirection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsCirclingRadius_t sendPilotingSettingsCirclingRadius;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsCirclingAltitude_t sendPilotingSettingsCirclingAltitude;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsPitchMode_t sendPilotingSettingsPitchMode;
    ARCONTROLLER_FEATURE_ARDrone3_SendPilotingSettingsSetMotionDetectionMode_t sendPilotingSettingsSetMotionDetectionMode;
    ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxVerticalSpeed_t sendSpeedSettingsMaxVerticalSpeed;
    ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxRotationSpeed_t sendSpeedSettingsMaxRotationSpeed;
    ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsHullProtection_t sendSpeedSettingsHullProtection;
    ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsOutdoor_t sendSpeedSettingsOutdoor;
    ARCONTROLLER_FEATURE_ARDrone3_SendSpeedSettingsMaxPitchRollRotationSpeed_t sendSpeedSettingsMaxPitchRollRotationSpeed;
    ARCONTROLLER_FEATURE_ARDrone3_SendNetworkSettingsWifiSelection_t sendNetworkSettingsWifiSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendNetworkSettingsWifiSecurity_t sendNetworkSettingsWifiSecurity;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsPictureFormatSelection_t sendPictureSettingsPictureFormatSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsAutoWhiteBalanceSelection_t sendPictureSettingsAutoWhiteBalanceSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsExpositionSelection_t sendPictureSettingsExpositionSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsSaturationSelection_t sendPictureSettingsSaturationSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsTimelapseSelection_t sendPictureSettingsTimelapseSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoAutorecordSelection_t sendPictureSettingsVideoAutorecordSelection;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoStabilizationMode_t sendPictureSettingsVideoStabilizationMode;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoRecordingMode_t sendPictureSettingsVideoRecordingMode;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoFramerate_t sendPictureSettingsVideoFramerate;
    ARCONTROLLER_FEATURE_ARDrone3_SendPictureSettingsVideoResolutions_t sendPictureSettingsVideoResolutions;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaStreamingVideoEnable_t sendMediaStreamingVideoEnable;
    ARCONTROLLER_FEATURE_ARDrone3_SendMediaStreamingVideoStreamMode_t sendMediaStreamingVideoStreamMode;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSetHome_t sendGPSSettingsSetHome;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsResetHome_t sendGPSSettingsResetHome;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsSendControllerGPS_t sendGPSSettingsSendControllerGPS;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsHomeType_t sendGPSSettingsHomeType;
    ARCONTROLLER_FEATURE_ARDrone3_SendGPSSettingsReturnHomeDelay_t sendGPSSettingsReturnHomeDelay;
    ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringElectricFrequency_t sendAntiflickeringElectricFrequency;
    ARCONTROLLER_FEATURE_ARDrone3_SendAntiflickeringSetMode_t sendAntiflickeringSetMode;
    ARCONTROLLER_FEATURE_ARDrone3_SendSoundStartAlertSound_t sendSoundStartAlertSound;
    ARCONTROLLER_FEATURE_ARDrone3_SendSoundStopAlertSound_t sendSoundStopAlertSound;
    ARCONTROLLER_FEATURE_ARDrone3_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_ARDrone3_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ARDrone3_SetNetworkController (ARCONTROLLER_FEATURE_ARDrone3_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ARDrone3_GetCommandElements (ARCONTROLLER_FEATURE_ARDrone3_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE common --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Common_t.
 */
typedef struct ARCONTROLLER_FEATURE_Common_Private_t ARCONTROLLER_FEATURE_Common_Private_t;

/**
 * @brief Feature controller allow to send command related of common Feature.
 * All common commands shared between all projects
 */
typedef struct ARCONTROLLER_FEATURE_Common_t ARCONTROLLER_FEATURE_Common_t;

/**
 * @brief Create a new common Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_Common_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_Common_SetNetworkController().
 * @param[out] error executing error.
 * @return the new common Feature Controller
 * @see ARCONTROLLER_FEATURE_Common_Delete
 */
ARCONTROLLER_FEATURE_Common_t *ARCONTROLLER_FEATURE_Common_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the common Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_Common_New
 */
void ARCONTROLLER_FEATURE_Common_Delete (ARCONTROLLER_FEATURE_Common_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_RegisterARCommands (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_UnregisterARCommands (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Get the dictionay of the common Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_Common_GetDictionary (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>Common</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_Common_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_AddCallback (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>Common</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_RemoveCallback (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE; /**< Key of the argument </code>cause</code> of event <code>NetworkEventDisconnection</code> in feature <code>Common</code> */



extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTNAMECHANGED_NAME; /**< Key of the argument </code>name</code> of event <code>SettingsStateProductNameChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductVersionChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductVersionChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTSERIALHIGHCHANGED_HIGH; /**< Key of the argument </code>high</code> of event <code>SettingsStateProductSerialHighChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTSERIALLOWCHANGED_LOW; /**< Key of the argument </code>low</code> of event <code>SettingsStateProductSerialLowChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_COUNTRYCHANGED_CODE; /**< Key of the argument </code>code</code> of event <code>SettingsStateCountryChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_AUTOCOUNTRYCHANGED_AUTOMATIC; /**< Key of the argument </code>automatic</code> of event <code>SettingsStateAutoCountryChanged</code> in feature <code>Common</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_BATTERYSTATECHANGED_PERCENT; /**< Key of the argument </code>percent</code> of event <code>CommonStateBatteryStateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGESTATELISTCHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>CommonStateMassStorageStateListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGESTATELISTCHANGED_NAME; /**< Key of the argument </code>name</code> of event <code>CommonStateMassStorageStateListChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_SIZE; /**< Key of the argument </code>size</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_USED_SIZE; /**< Key of the argument </code>used_size</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_PLUGGED; /**< Key of the argument </code>plugged</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_FULL; /**< Key of the argument </code>full</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_INTERNAL; /**< Key of the argument </code>internal</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_CURRENTDATECHANGED_DATE; /**< Key of the argument </code>date</code> of event <code>CommonStateCurrentDateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_CURRENTTIMECHANGED_TIME; /**< Key of the argument </code>time</code> of event <code>CommonStateCurrentTimeChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_FREE_SPACE; /**< Key of the argument </code>free_space</code> of event <code>CommonStateMassStorageInfoRemainingListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_REC_TIME; /**< Key of the argument </code>rec_time</code> of event <code>CommonStateMassStorageInfoRemainingListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_PHOTO_REMAINING; /**< Key of the argument </code>photo_remaining</code> of event <code>CommonStateMassStorageInfoRemainingListChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_WIFISIGNALCHANGED_RSSI; /**< Key of the argument </code>rssi</code> of event <code>CommonStateWifiSignalChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME; /**< Key of the argument </code>sensorName</code> of event <code>CommonStateSensorsStatesListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORSTATE; /**< Key of the argument </code>sensorState</code> of event <code>CommonStateSensorsStatesListChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL; /**< Key of the argument </code>model</code> of event <code>CommonStateProductModel</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_COUNTRYLISTKNOWN_LISTFLAGS; /**< Key of the argument </code>listFlags</code> of event <code>CommonStateCountryListKnown</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_COUNTRYLISTKNOWN_COUNTRYCODES; /**< Key of the argument </code>countryCodes</code> of event <code>CommonStateCountryListKnown</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_DEPRECATEDMASSSTORAGECONTENTCHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>CommonStateDeprecatedMassStorageContentChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_DEPRECATEDMASSSTORAGECONTENTCHANGED_NBPHOTOS; /**< Key of the argument </code>nbPhotos</code> of event <code>CommonStateDeprecatedMassStorageContentChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_DEPRECATEDMASSSTORAGECONTENTCHANGED_NBVIDEOS; /**< Key of the argument </code>nbVideos</code> of event <code>CommonStateDeprecatedMassStorageContentChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_DEPRECATEDMASSSTORAGECONTENTCHANGED_NBPUDS; /**< Key of the argument </code>nbPuds</code> of event <code>CommonStateDeprecatedMassStorageContentChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_DEPRECATEDMASSSTORAGECONTENTCHANGED_NBCRASHLOGS; /**< Key of the argument </code>nbCrashLogs</code> of event <code>CommonStateDeprecatedMassStorageContentChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENT_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>CommonStateMassStorageContent</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENT_NBPHOTOS; /**< Key of the argument </code>nbPhotos</code> of event <code>CommonStateMassStorageContent</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENT_NBVIDEOS; /**< Key of the argument </code>nbVideos</code> of event <code>CommonStateMassStorageContent</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENT_NBPUDS; /**< Key of the argument </code>nbPuds</code> of event <code>CommonStateMassStorageContent</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENT_NBCRASHLOGS; /**< Key of the argument </code>nbCrashLogs</code> of event <code>CommonStateMassStorageContent</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENT_NBRAWPHOTOS; /**< Key of the argument </code>nbRawPhotos</code> of event <code>CommonStateMassStorageContent</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTFORCURRENTRUN_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>CommonStateMassStorageContentForCurrentRun</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTFORCURRENTRUN_NBPHOTOS; /**< Key of the argument </code>nbPhotos</code> of event <code>CommonStateMassStorageContentForCurrentRun</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTFORCURRENTRUN_NBVIDEOS; /**< Key of the argument </code>nbVideos</code> of event <code>CommonStateMassStorageContentForCurrentRun</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTFORCURRENTRUN_NBRAWPHOTOS; /**< Key of the argument </code>nbRawPhotos</code> of event <code>CommonStateMassStorageContentForCurrentRun</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_VIDEORECORDINGTIMESTAMP_STARTTIMESTAMP; /**< Key of the argument </code>startTimestamp</code> of event <code>CommonStateVideoRecordingTimestamp</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_VIDEORECORDINGTIMESTAMP_STOPTIMESTAMP; /**< Key of the argument </code>stopTimestamp</code> of event <code>CommonStateVideoRecordingTimestamp</code> in feature <code>Common</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_OVERHEATSTATE_OVERHEATREGULATIONCHANGED_REGULATIONTYPE; /**< Key of the argument </code>regulationType</code> of event <code>OverHeatStateOverHeatRegulationChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_WIFISETTINGSSTATE_OUTDOORSETTINGSCHANGED_OUTDOOR; /**< Key of the argument </code>outdoor</code> of event <code>WifiSettingsStateOutdoorSettingsChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MavlinkStateMavlinkFilePlayingStateChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_FILEPATH; /**< Key of the argument </code>filepath</code> of event <code>MavlinkStateMavlinkFilePlayingStateChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>MavlinkStateMavlinkFilePlayingStateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>MavlinkStateMavlinkPlayErrorStateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MISSIONITEMEXECUTED_IDX; /**< Key of the argument </code>idx</code> of event <code>MavlinkStateMissionItemExecuted</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSETTINGSSTATE_RETURNHOMEONDISCONNECTCHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>FlightPlanSettingsStateReturnHomeOnDisconnectChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSETTINGSSTATE_RETURNHOMEONDISCONNECTCHANGED_ISREADONLY; /**< Key of the argument </code>isReadOnly</code> of event <code>FlightPlanSettingsStateReturnHomeOnDisconnectChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_XAXISCALIBRATION; /**< Key of the argument </code>xAxisCalibration</code> of event <code>CalibrationStateMagnetoCalibrationStateChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_YAXISCALIBRATION; /**< Key of the argument </code>yAxisCalibration</code> of event <code>CalibrationStateMagnetoCalibrationStateChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_ZAXISCALIBRATION; /**< Key of the argument </code>zAxisCalibration</code> of event <code>CalibrationStateMagnetoCalibrationStateChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_CALIBRATIONFAILED; /**< Key of the argument </code>calibrationFailed</code> of event <code>CalibrationStateMagnetoCalibrationStateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONREQUIREDSTATE_REQUIRED; /**< Key of the argument </code>required</code> of event <code>CalibrationStateMagnetoCalibrationRequiredState</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS; /**< Key of the argument </code>axis</code> of event <code>CalibrationStateMagnetoCalibrationAxisToCalibrateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTARTEDCHANGED_STARTED; /**< Key of the argument </code>started</code> of event <code>CalibrationStateMagnetoCalibrationStartedChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>CalibrationStatePitotCalibrationStateChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_LASTERROR; /**< Key of the argument </code>lastError</code> of event <code>CalibrationStatePitotCalibrationStateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_FOV; /**< Key of the argument </code>fov</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_PANMAX; /**< Key of the argument </code>panMax</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_PANMIN; /**< Key of the argument </code>panMin</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_TILTMAX; /**< Key of the argument </code>tiltMax</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_TILTMIN; /**< Key of the argument </code>tiltMin</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_AVAILABILITYSTATECHANGED_AVAILABILITYSTATE; /**< Key of the argument </code>AvailabilityState</code> of event <code>FlightPlanStateAvailabilityStateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT; /**< Key of the argument </code>component</code> of event <code>FlightPlanStateComponentStateListChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_STATE; /**< Key of the argument </code>State</code> of event <code>FlightPlanStateComponentStateListChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_LOCKSTATECHANGED_LOCKSTATE; /**< Key of the argument </code>LockState</code> of event <code>FlightPlanStateLockStateChanged</code> in feature <code>Common</code> */



extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_CONTROLLERLIBARCOMMANDSVERSION_VERSION; /**< Key of the argument </code>version</code> of event <code>ARLibsVersionsStateControllerLibARCommandsVersion</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_SKYCONTROLLERLIBARCOMMANDSVERSION_VERSION; /**< Key of the argument </code>version</code> of event <code>ARLibsVersionsStateSkyControllerLibARCommandsVersion</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_DEVICELIBARCOMMANDSVERSION_VERSION; /**< Key of the argument </code>version</code> of event <code>ARLibsVersionsStateDeviceLibARCommandsVersion</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_AUDIOSTATE_AUDIOSTREAMINGRUNNING_RUNNING; /**< Key of the argument </code>running</code> of event <code>AudioStateAudioStreamingRunning</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_HEADLIGHTSSTATE_INTENSITYCHANGED_LEFT; /**< Key of the argument </code>left</code> of event <code>HeadlightsStateIntensityChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_HEADLIGHTSSTATE_INTENSITYCHANGED_RIGHT; /**< Key of the argument </code>right</code> of event <code>HeadlightsStateIntensityChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ANIMATIONSSTATE_LIST_ANIM; /**< Key of the argument </code>anim</code> of event <code>AnimationsStateList</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ANIMATIONSSTATE_LIST_STATE; /**< Key of the argument </code>state</code> of event <code>AnimationsStateList</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ANIMATIONSSTATE_LIST_ERROR; /**< Key of the argument </code>error</code> of event <code>AnimationsStateList</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY; /**< Key of the argument </code>accessory</code> of event <code>AccessoryStateSupportedAccessoriesListChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY; /**< Key of the argument </code>newAccessory</code> of event <code>AccessoryStateAccessoryConfigChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>AccessoryStateAccessoryConfigChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGMODIFICATIONENABLED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>AccessoryStateAccessoryConfigModificationEnabled</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE; /**< Key of the argument </code>rate</code> of event <code>ChargerStateMaxChargeRateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS; /**< Key of the argument </code>status</code> of event <code>ChargerStateCurrentChargeStateChanged</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE; /**< Key of the argument </code>phase</code> of event <code>ChargerStateCurrentChargeStateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE; /**< Key of the argument </code>rate</code> of event <code>ChargerStateLastChargeRateChanged</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE; /**< Key of the argument </code>phase</code> of event <code>ChargerStateChargingInfo</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_RATE; /**< Key of the argument </code>rate</code> of event <code>ChargerStateChargingInfo</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_INTENSITY; /**< Key of the argument </code>intensity</code> of event <code>ChargerStateChargingInfo</code> in feature <code>Common</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_FULLCHARGINGTIME; /**< Key of the argument </code>fullChargingTime</code> of event <code>ChargerStateChargingInfo</code> in feature <code>Common</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_COMMON_RUNSTATE_RUNIDCHANGED_RUNID; /**< Key of the argument </code>runId</code> of event <code>RunStateRunIdChanged</code> in feature <code>Common</code> */

/**
 * @brief Send a command <code>NetworkDisconnect</code> in feature <code>Common</code>
 * @deprecated
 * Signals the remote that the host will disconnect.
 * 
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendNetworkDisconnect_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>SettingsAllSettings</code> in feature <code>Common</code>
 * Ask for all settings.
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsAllSettings_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>SettingsReset</code> in feature <code>Common</code>
 * Reset all settings.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsReset_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>SettingsProductName</code> in feature <code>Common</code>
 * Set the product name.
 * It also sets the name of the SSID for Wifi products and advertisement name for BLE products (changed after a reboot of the product).
 * @param feature feature owning the commands
 * @param name Product name
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsProductName_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * name);

/**
 * @brief Send a command <code>SettingsCountry</code> in feature <code>Common</code>
 * Set the country for Wifi products.
 * This can modify Wifi band and/or channel.
 * **Please note that you might be disconnected from the product after changing the country as it changes Wifi parameters.**
 * @param feature feature owning the commands
 * @param code Country code with ISO 3166 format
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsCountry_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * code);

/**
 * @brief Send a command <code>SettingsAutoCountry</code> in feature <code>Common</code>
 * Enable auto-country.
 * If auto-country is set, the drone will guess its Wifi country by itself by checking other Wifi country around it.
 * **Please note that you might be disconnected from the product after changing the country as it changes Wifi parameters.**
 * @param feature feature owning the commands
 * @param automatic Boolean : 0 : Manual / 1 : Auto
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendSettingsAutoCountry_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t automatic);

/**
 * @brief Send a command <code>CommonAllStates</code> in feature <code>Common</code>
 * Ask for all states.
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCommonAllStates_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>CommonCurrentDate</code> in feature <code>Common</code>
 * Set the date.
 * This date is taken by the drone as its own date.
 * So medias and other files will be dated from this date
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @param feature feature owning the commands
 * @param date Date with ISO-8601 format
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCommonCurrentDate_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * date);

/**
 * @brief Send a command <code>CommonCurrentTime</code> in feature <code>Common</code>
 * Set the time.
 * This time is taken by the drone as its own time.
 * So medias and other files will be dated from this time
 * 
 * **Please note that you should not send this command if you are using the
 * libARController API as this library is handling the connection process for you.**
 * @param feature feature owning the commands
 * @param time Time with ISO-8601 format
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCommonCurrentTime_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * time);

/**
 * @brief Send a command <code>CommonReboot</code> in feature <code>Common</code>
 * Reboot the product.
 * The product will accept this command only if is not flying.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCommonReboot_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>OverHeatSwitchOff</code> in feature <code>Common</code>
 * @deprecated
 * Switch off after an overheat.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendOverHeatSwitchOff_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>OverHeatVentilate</code> in feature <code>Common</code>
 * @deprecated
 * Ventilate after an overheat.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendOverHeatVentilate_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>ControllerIsPiloting</code> in feature <code>Common</code>
 * Inform about hud entering.
 * Tell the drone that the controller enters/leaves the piloting hud.
 * On a non-flying products it is used to know when a run begins.
 * @param feature feature owning the commands
 * @param piloting 0 when the application is not in the piloting HUD, 1 when it enters the HUD.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendControllerIsPiloting_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t piloting);

/**
 * @brief Send a command <code>WifiSettingsOutdoorSetting</code> in feature <code>Common</code>
 * Set wifi indoor/outdoor mode.
 * **Please note that you might be disconnected from the product after changing the indoor/outdoor setting as it changes Wifi parameters.**
 * @param feature feature owning the commands
 * @param outdoor 1 if it should use outdoor wifi settings, 0 otherwise
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendWifiSettingsOutdoorSetting_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t outdoor);

/**
 * @brief Send a command <code>MavlinkStart</code> in feature <code>Common</code>
 * Start a FlightPlan based on a mavlink file existing on the drone.
 * 
 * Requirements are:
 * * Product is calibrated
 * * Product should be in outdoor mode
 * * Product has fixed its GPS
 * 
 * @param feature feature owning the commands
 * @param filepath flight plan file path from the mavlink ftp root
 * @param type type of the played mavlink file
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendMavlinkStart_t) (ARCONTROLLER_FEATURE_Common_t *feature, char * filepath, eARCOMMANDS_COMMON_MAVLINK_START_TYPE type);

/**
 * @brief Send a command <code>MavlinkPause</code> in feature <code>Common</code>
 * Pause a FlightPlan that was playing.
 * To unpause a FlightPlan, see [StartFlightPlan](#0-11-0)
 * 
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendMavlinkPause_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>MavlinkStop</code> in feature <code>Common</code>
 * Stop a FlightPlan that was playing.
 * 
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendMavlinkStop_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>FlightPlanSettingsReturnHomeOnDisconnect</code> in feature <code>Common</code>
 * Set ReturnHome behavior during FlightPlan
 * When set, drone will return home, after return home delay, if a disconnection occurs during execution of FlightPlan
 * @param feature feature owning the commands
 * @param value 1 to enable, 0 to disable
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendFlightPlanSettingsReturnHomeOnDisconnect_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t value);

/**
 * @brief Send a command <code>CalibrationMagnetoCalibration</code> in feature <code>Common</code>
 * Start or abort magnetometer calibration process.
 * 
 * @param feature feature owning the commands
 * @param calibrate 1 if the calibration should be started, 0 if it should be aborted
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCalibrationMagnetoCalibration_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t calibrate);

/**
 * @brief Send a command <code>CalibrationPitotCalibration</code> in feature <code>Common</code>
 * Start or abort Pitot tube calibration process.
 * 
 * @param feature feature owning the commands
 * @param calibrate 1 if the calibration should be started, 0 if it should be aborted
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendCalibrationPitotCalibration_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t calibrate);

/**
 * @brief Send a command <code>GPSControllerPositionForRun</code> in feature <code>Common</code>
 * Set the position of a run.
 * This will let the product know the controller location for the flight/run. The location is typically used to geotag medias.
 * Only used on products that have no gps.
 * Watch out, this command is not used by BLE products.
 * @param feature feature owning the commands
 * @param latitude Controller latitude in decimal degrees
 * @param longitude Controller longitude in decimal degrees
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendGPSControllerPositionForRun_t) (ARCONTROLLER_FEATURE_Common_t *feature, double latitude, double longitude);

/**
 * @brief Send a command <code>AudioControllerReadyForStreaming</code> in feature <code>Common</code>
 * Set audio stream direction.
 * @param feature feature owning the commands
 * @param ready Bit field for TX and RX ready. bit 0 is 1 if controller is ready and wants to receive sound (Drone TX) bit 1 is 1 if controller is ready and wants to send sound (Drone RX)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendAudioControllerReadyForStreaming_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t ready);

/**
 * @brief Send a command <code>HeadlightsIntensity</code> in feature <code>Common</code>
 * Set lighting LEDs intensity.
 * @param feature feature owning the commands
 * @param left Set the left LED intensity value (0 through 255).
 * @param right Set the right LED intensity value (0 through 255).
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendHeadlightsIntensity_t) (ARCONTROLLER_FEATURE_Common_t *feature, uint8_t left, uint8_t right);

/**
 * @brief Send a command <code>AnimationsStartAnimation</code> in feature <code>Common</code>
 * Start a paramaterless animation.
 * List of available animations can be retrieved from [AnimationsStateList](#0-25-0).
 * @param feature feature owning the commands
 * @param anim Animation to start.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendAnimationsStartAnimation_t) (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM anim);

/**
 * @brief Send a command <code>AnimationsStopAnimation</code> in feature <code>Common</code>
 * Stop a paramaterless animation.
 * List of running animations can be retrieved from [AnimationsStateList](#0-25-0).
 * @param feature feature owning the commands
 * @param anim Animation to stop.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendAnimationsStopAnimation_t) (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM anim);

/**
 * @brief Send a command <code>AnimationsStopAllAnimations</code> in feature <code>Common</code>
 * Stop all running paramaterless animations.
 * List of running animations can be retrieved from [AnimationsStateList](#0-25-0).
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendAnimationsStopAllAnimations_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Send a command <code>AccessoryConfig</code> in feature <code>Common</code>
 * Declare an accessory.
 * You can choose the accessory between all accessible for this product.
 * You can get this list through event [SupportedAccessories](#0-27-0).
 * 
 * You can only set the accessory when the modification is enabled.
 * You can know if it possible with the event [AccessoryDeclarationAvailability](#0-27-2).
 * @param feature feature owning the commands
 * @param accessory Accessory configuration to set.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendAccessoryConfig_t) (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY accessory);

/**
 * @brief Send a command <code>ChargerSetMaxChargeRate</code> in feature <code>Common</code>
 * @deprecated
 * The product will inform itself the controller about its charging type (see [ChargingInfoChanged](#0-29-3)).
 * @param feature feature owning the commands
 * @param rate The new maximum charge rate.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendChargerSetMaxChargeRate_t) (ARCONTROLLER_FEATURE_Common_t *feature, eARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE rate);

/**
 * @brief Send a command <code>FactoryReset</code> in feature <code>Common</code>
 * This command will request a factory reset from the prodcut. *The factory reset procedure implies an automatic reboot*, which will be done immediately after receiving this command.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Common_SendFactoryReset_t) (ARCONTROLLER_FEATURE_Common_t *feature);

/**
 * @brief Feature controller allow to send command related of common Feature.
 * All common commands shared between all projects
 */
struct ARCONTROLLER_FEATURE_Common_t
{
    ARCONTROLLER_FEATURE_Common_SendNetworkDisconnect_t sendNetworkDisconnect;
    ARCONTROLLER_FEATURE_Common_SendSettingsAllSettings_t sendSettingsAllSettings;
    ARCONTROLLER_FEATURE_Common_SendSettingsReset_t sendSettingsReset;
    ARCONTROLLER_FEATURE_Common_SendSettingsProductName_t sendSettingsProductName;
    ARCONTROLLER_FEATURE_Common_SendSettingsCountry_t sendSettingsCountry;
    ARCONTROLLER_FEATURE_Common_SendSettingsAutoCountry_t sendSettingsAutoCountry;
    ARCONTROLLER_FEATURE_Common_SendCommonAllStates_t sendCommonAllStates;
    ARCONTROLLER_FEATURE_Common_SendCommonCurrentDate_t sendCommonCurrentDate;
    ARCONTROLLER_FEATURE_Common_SendCommonCurrentTime_t sendCommonCurrentTime;
    ARCONTROLLER_FEATURE_Common_SendCommonReboot_t sendCommonReboot;
    ARCONTROLLER_FEATURE_Common_SendOverHeatSwitchOff_t sendOverHeatSwitchOff;
    ARCONTROLLER_FEATURE_Common_SendOverHeatVentilate_t sendOverHeatVentilate;
    ARCONTROLLER_FEATURE_Common_SendControllerIsPiloting_t sendControllerIsPiloting;
    ARCONTROLLER_FEATURE_Common_SendWifiSettingsOutdoorSetting_t sendWifiSettingsOutdoorSetting;
    ARCONTROLLER_FEATURE_Common_SendMavlinkStart_t sendMavlinkStart;
    ARCONTROLLER_FEATURE_Common_SendMavlinkPause_t sendMavlinkPause;
    ARCONTROLLER_FEATURE_Common_SendMavlinkStop_t sendMavlinkStop;
    ARCONTROLLER_FEATURE_Common_SendFlightPlanSettingsReturnHomeOnDisconnect_t sendFlightPlanSettingsReturnHomeOnDisconnect;
    ARCONTROLLER_FEATURE_Common_SendCalibrationMagnetoCalibration_t sendCalibrationMagnetoCalibration;
    ARCONTROLLER_FEATURE_Common_SendCalibrationPitotCalibration_t sendCalibrationPitotCalibration;
    ARCONTROLLER_FEATURE_Common_SendGPSControllerPositionForRun_t sendGPSControllerPositionForRun;
    ARCONTROLLER_FEATURE_Common_SendAudioControllerReadyForStreaming_t sendAudioControllerReadyForStreaming;
    ARCONTROLLER_FEATURE_Common_SendHeadlightsIntensity_t sendHeadlightsIntensity;
    ARCONTROLLER_FEATURE_Common_SendAnimationsStartAnimation_t sendAnimationsStartAnimation;
    ARCONTROLLER_FEATURE_Common_SendAnimationsStopAnimation_t sendAnimationsStopAnimation;
    ARCONTROLLER_FEATURE_Common_SendAnimationsStopAllAnimations_t sendAnimationsStopAllAnimations;
    ARCONTROLLER_FEATURE_Common_SendAccessoryConfig_t sendAccessoryConfig;
    ARCONTROLLER_FEATURE_Common_SendChargerSetMaxChargeRate_t sendChargerSetMaxChargeRate;
    ARCONTROLLER_FEATURE_Common_SendFactoryReset_t sendFactoryReset;
    ARCONTROLLER_FEATURE_Common_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_Common_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Common_SetNetworkController (ARCONTROLLER_FEATURE_Common_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Common_GetCommandElements (ARCONTROLLER_FEATURE_Common_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE controller_info --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_ControllerInfo_t.
 */
typedef struct ARCONTROLLER_FEATURE_ControllerInfo_Private_t ARCONTROLLER_FEATURE_ControllerInfo_Private_t;

/**
 * @brief Feature controller allow to send command related of controller_info Feature.
 * Controller info feature
 */
typedef struct ARCONTROLLER_FEATURE_ControllerInfo_t ARCONTROLLER_FEATURE_ControllerInfo_t;

/**
 * @brief Create a new controller_info Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_ControllerInfo_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_ControllerInfo_SetNetworkController().
 * @param[out] error executing error.
 * @return the new controller_info Feature Controller
 * @see ARCONTROLLER_FEATURE_ControllerInfo_Delete
 */
ARCONTROLLER_FEATURE_ControllerInfo_t *ARCONTROLLER_FEATURE_ControllerInfo_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the controller_info Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_ControllerInfo_New
 */
void ARCONTROLLER_FEATURE_ControllerInfo_Delete (ARCONTROLLER_FEATURE_ControllerInfo_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_RegisterARCommands (ARCONTROLLER_FEATURE_ControllerInfo_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_UnregisterARCommands (ARCONTROLLER_FEATURE_ControllerInfo_t *feature);

/**
 * @brief Get the dictionay of the controller_info Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_ControllerInfo_GetDictionary (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>ControllerInfo</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_ControllerInfo_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_AddCallback (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>ControllerInfo</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_RemoveCallback (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Send a command <code>Gps</code> in feature <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param latitude Latitude of the controller (in deg)
 * @param longitude Longitude of the controller (in deg)
 * @param altitude Altitude of the controller (in meters, according to sea level)
 * @param horizontal_accuracy Horizontal accuracy (in meter)
 * @param vertical_accuracy Vertical accuracy (in meter)
 * @param north_speed North speed (in meter per second)
 * @param east_speed East speed (in meter per second)
 * @param down_speed Vertical speed (in meter per second) (down is positive)
 * @param timestamp Timestamp of the gps info
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SendGps_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double latitude, double longitude, float altitude, float horizontal_accuracy, float vertical_accuracy, float north_speed, float east_speed, float down_speed, double timestamp);

/**
 * @brief Set the parameters to send through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param latitude Latitude of the controller (in deg)
 * @param longitude Longitude of the controller (in deg)
 * @param altitude Altitude of the controller (in meters, according to sea level)
 * @param horizontal_accuracy Horizontal accuracy (in meter)
 * @param vertical_accuracy Vertical accuracy (in meter)
 * @param north_speed North speed (in meter per second)
 * @param east_speed East speed (in meter per second)
 * @param down_speed Vertical speed (in meter per second) (down is positive)
 * @param timestamp Timestamp of the gps info
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGps_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double latitude, double longitude, float altitude, float horizontal_accuracy, float vertical_accuracy, float north_speed, float east_speed, float down_speed, double timestamp);

/**
 * @brief Send the a command <code>Gps</code> in project <code>ControllerInfo</code> with the parame set beforehand 
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_ControllerInfo_SendGpsStruct (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set latitude sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param latitude Latitude of the controller (in deg)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGpsLatitude_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double latitude);

/**
 * @brief Set longitude sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param longitude Longitude of the controller (in deg)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGpsLongitude_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double longitude);

/**
 * @brief Set altitude sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param altitude Altitude of the controller (in meters, according to sea level)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGpsAltitude_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float altitude);

/**
 * @brief Set horizontal_accuracy sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param horizontal_accuracy Horizontal accuracy (in meter)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGpsHorizontalAccuracy_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float horizontal_accuracy);

/**
 * @brief Set vertical_accuracy sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param vertical_accuracy Vertical accuracy (in meter)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGpsVerticalAccuracy_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float vertical_accuracy);

/**
 * @brief Set north_speed sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param north_speed North speed (in meter per second)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGpsNorthSpeed_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float north_speed);

/**
 * @brief Set east_speed sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param east_speed East speed (in meter per second)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGpsEastSpeed_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float east_speed);

/**
 * @brief Set down_speed sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param down_speed Vertical speed (in meter per second) (down is positive)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGpsDownSpeed_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float down_speed);

/**
 * @brief Set timestamp sent through the command <code>Gps</code> in project <code>ControllerInfo</code>
 * Controller gps info.
 * This command is not acknowledged by the drone.
 * @param feature feature owning the commands
 * @param timestamp Timestamp of the gps info
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetGpsTimestamp_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double timestamp);

/**
 * @brief Send a command <code>Barometer</code> in feature <code>ControllerInfo</code>
 * 
 * @param feature feature owning the commands
 * @param pressure Atmospheric pressure in Pa
 * @param timestamp Timestamp of the barometer info
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SendBarometer_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float pressure, double timestamp);

/**
 * @brief Set the parameters to send through the command <code>Barometer</code> in project <code>ControllerInfo</code>
 * 
 * @param feature feature owning the commands
 * @param pressure Atmospheric pressure in Pa
 * @param timestamp Timestamp of the barometer info
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetBarometer_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float pressure, double timestamp);

/**
 * @brief Send the a command <code>Barometer</code> in project <code>ControllerInfo</code> with the parame set beforehand 
 * 
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_ControllerInfo_SendBarometerStruct (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set pressure sent through the command <code>Barometer</code> in project <code>ControllerInfo</code>
 * 
 * @param feature feature owning the commands
 * @param pressure Atmospheric pressure in Pa
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetBarometerPressure_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, float pressure);

/**
 * @brief Set timestamp sent through the command <code>Barometer</code> in project <code>ControllerInfo</code>
 * 
 * @param feature feature owning the commands
 * @param timestamp Timestamp of the barometer info
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ControllerInfo_SetBarometerTimestamp_t) (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, double timestamp);

/**
 * @brief Feature controller allow to send command related of controller_info Feature.
 * Controller info feature
 */
struct ARCONTROLLER_FEATURE_ControllerInfo_t
{
    ARCONTROLLER_FEATURE_ControllerInfo_SendGps_t sendGps;
    ARCONTROLLER_FEATURE_ControllerInfo_SetGps_t setGps;
    ARCONTROLLER_FEATURE_ControllerInfo_SetGpsLatitude_t setGpsLatitude; /**< Send a command <code>Gps</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SetGpsLongitude_t setGpsLongitude; /**< Send a command <code>Gps</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SetGpsAltitude_t setGpsAltitude; /**< Send a command <code>Gps</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SetGpsHorizontalAccuracy_t setGpsHorizontalAccuracy; /**< Send a command <code>Gps</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SetGpsVerticalAccuracy_t setGpsVerticalAccuracy; /**< Send a command <code>Gps</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SetGpsNorthSpeed_t setGpsNorthSpeed; /**< Send a command <code>Gps</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SetGpsEastSpeed_t setGpsEastSpeed; /**< Send a command <code>Gps</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SetGpsDownSpeed_t setGpsDownSpeed; /**< Send a command <code>Gps</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SetGpsTimestamp_t setGpsTimestamp; /**< Send a command <code>Gps</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SendBarometer_t sendBarometer;
    ARCONTROLLER_FEATURE_ControllerInfo_SetBarometer_t setBarometer;
    ARCONTROLLER_FEATURE_ControllerInfo_SetBarometerPressure_t setBarometerPressure; /**< Send a command <code>Barometer</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_SetBarometerTimestamp_t setBarometerTimestamp; /**< Send a command <code>Barometer</code> in feature <code>ControllerInfo</code>. */
    ARCONTROLLER_FEATURE_ControllerInfo_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_ControllerInfo_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ControllerInfo_SetNetworkController (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ControllerInfo_GetCommandElements (ARCONTROLLER_FEATURE_ControllerInfo_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE debug --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Debug_t.
 */
typedef struct ARCONTROLLER_FEATURE_Debug_Private_t ARCONTROLLER_FEATURE_Debug_Private_t;

/**
 * @brief Feature controller allow to send command related of debug Feature.
 * All commands/events related to the Wifi
 */
typedef struct ARCONTROLLER_FEATURE_Debug_t ARCONTROLLER_FEATURE_Debug_t;

/**
 * @brief Create a new debug Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_Debug_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_Debug_SetNetworkController().
 * @param[out] error executing error.
 * @return the new debug Feature Controller
 * @see ARCONTROLLER_FEATURE_Debug_Delete
 */
ARCONTROLLER_FEATURE_Debug_t *ARCONTROLLER_FEATURE_Debug_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the debug Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_Debug_New
 */
void ARCONTROLLER_FEATURE_Debug_Delete (ARCONTROLLER_FEATURE_Debug_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Debug_RegisterARCommands (ARCONTROLLER_FEATURE_Debug_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Debug_UnregisterARCommands (ARCONTROLLER_FEATURE_Debug_t *feature);

/**
 * @brief Get the dictionay of the debug Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_Debug_GetDictionary (ARCONTROLLER_FEATURE_Debug_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>Debug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_Debug_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Debug_AddCallback (ARCONTROLLER_FEATURE_Debug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>Debug</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Debug_RemoveCallback (ARCONTROLLER_FEATURE_Debug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_ID; /**< Key of the argument </code>id</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_LABEL; /**< Key of the argument </code>label</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_TYPE; /**< Key of the argument </code>type</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_MODE; /**< Key of the argument </code>mode</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_RANGE_MIN; /**< Key of the argument </code>range_min</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_RANGE_MAX; /**< Key of the argument </code>range_max</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_RANGE_STEP; /**< Key of the argument </code>range_step</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_VALUE; /**< Key of the argument </code>value</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSLIST_ID; /**< Key of the argument </code>id</code> of event <code>SettingsList</code> in feature <code>Debug</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSLIST_VALUE; /**< Key of the argument </code>value</code> of event <code>SettingsList</code> in feature <code>Debug</code> */

/**
 * @brief Send a command <code>GetAllSettings</code> in feature <code>Debug</code>
 * Cmd sent by controller to get all settings info (generate "settings_info" events).
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Debug_SendGetAllSettings_t) (ARCONTROLLER_FEATURE_Debug_t *feature);

/**
 * @brief Send a command <code>SetSetting</code> in feature <code>Debug</code>
 * Change setting value.
 * Cmd sent by controller to change a writable setting.
 * @param feature feature owning the commands
 * @param id Setting Id.
 * @param value New setting value (string encoded).
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Debug_SendSetSetting_t) (ARCONTROLLER_FEATURE_Debug_t *feature, uint16_t id, char * value);

/**
 * @brief Feature controller allow to send command related of debug Feature.
 * All commands/events related to the Wifi
 */
struct ARCONTROLLER_FEATURE_Debug_t
{
    ARCONTROLLER_FEATURE_Debug_SendGetAllSettings_t sendGetAllSettings;
    ARCONTROLLER_FEATURE_Debug_SendSetSetting_t sendSetSetting;
    ARCONTROLLER_FEATURE_Debug_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_Debug_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Debug_SetNetworkController (ARCONTROLLER_FEATURE_Debug_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Debug_GetCommandElements (ARCONTROLLER_FEATURE_Debug_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE drone_manager --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_DroneManager_t.
 */
typedef struct ARCONTROLLER_FEATURE_DroneManager_Private_t ARCONTROLLER_FEATURE_DroneManager_Private_t;

/**
 * @brief Feature controller allow to send command related of drone_manager Feature.
 * Commands related to the drone_manager feature
 */
typedef struct ARCONTROLLER_FEATURE_DroneManager_t ARCONTROLLER_FEATURE_DroneManager_t;

/**
 * @brief Create a new drone_manager Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_DroneManager_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_DroneManager_SetNetworkController().
 * @param[out] error executing error.
 * @return the new drone_manager Feature Controller
 * @see ARCONTROLLER_FEATURE_DroneManager_Delete
 */
ARCONTROLLER_FEATURE_DroneManager_t *ARCONTROLLER_FEATURE_DroneManager_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the drone_manager Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_DroneManager_New
 */
void ARCONTROLLER_FEATURE_DroneManager_Delete (ARCONTROLLER_FEATURE_DroneManager_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_DroneManager_RegisterARCommands (ARCONTROLLER_FEATURE_DroneManager_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_DroneManager_UnregisterARCommands (ARCONTROLLER_FEATURE_DroneManager_t *feature);

/**
 * @brief Get the dictionay of the drone_manager Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_DroneManager_GetDictionary (ARCONTROLLER_FEATURE_DroneManager_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>DroneManager</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_DroneManager_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_DroneManager_AddCallback (ARCONTROLLER_FEATURE_DroneManager_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>DroneManager</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_DroneManager_RemoveCallback (ARCONTROLLER_FEATURE_DroneManager_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_SERIAL; /**< Key of the argument </code>serial</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_MODEL; /**< Key of the argument </code>model</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_NAME; /**< Key of the argument </code>name</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_CONNECTION_ORDER; /**< Key of the argument </code>connection_order</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_ACTIVE; /**< Key of the argument </code>active</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_VISIBLE; /**< Key of the argument </code>visible</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_SECURITY; /**< Key of the argument </code>security</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_HAS_SAVED_KEY; /**< Key of the argument </code>has_saved_key</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_RSSI; /**< Key of the argument </code>rssi</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>ConnectionState</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_SERIAL; /**< Key of the argument </code>serial</code> of event <code>ConnectionState</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_MODEL; /**< Key of the argument </code>model</code> of event <code>ConnectionState</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_NAME; /**< Key of the argument </code>name</code> of event <code>ConnectionState</code> in feature <code>DroneManager</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_AUTHENTICATIONFAILED_SERIAL; /**< Key of the argument </code>serial</code> of event <code>AuthenticationFailed</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_AUTHENTICATIONFAILED_MODEL; /**< Key of the argument </code>model</code> of event <code>AuthenticationFailed</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_AUTHENTICATIONFAILED_NAME; /**< Key of the argument </code>name</code> of event <code>AuthenticationFailed</code> in feature <code>DroneManager</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONREFUSED_SERIAL; /**< Key of the argument </code>serial</code> of event <code>ConnectionRefused</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONREFUSED_MODEL; /**< Key of the argument </code>model</code> of event <code>ConnectionRefused</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONREFUSED_NAME; /**< Key of the argument </code>name</code> of event <code>ConnectionRefused</code> in feature <code>DroneManager</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_KNOWNDRONEITEM_SERIAL; /**< Key of the argument </code>serial</code> of event <code>KnownDroneItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_KNOWNDRONEITEM_MODEL; /**< Key of the argument </code>model</code> of event <code>KnownDroneItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_KNOWNDRONEITEM_NAME; /**< Key of the argument </code>name</code> of event <code>KnownDroneItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_KNOWNDRONEITEM_SECURITY; /**< Key of the argument </code>security</code> of event <code>KnownDroneItem</code> in feature <code>DroneManager</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_KNOWNDRONEITEM_HAS_SAVED_KEY; /**< Key of the argument </code>has_saved_key</code> of event <code>KnownDroneItem</code> in feature <code>DroneManager</code> */

/**
 * @brief Send a command <code>DiscoverDrones</code> in feature <code>DroneManager</code>
 * The list will contain:
 * * known drones not currently visible. * known drones currently visible. * unknown drones currently visible.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_DroneManager_SendDiscoverDrones_t) (ARCONTROLLER_FEATURE_DroneManager_t *feature);

/**
 * @brief Send a command <code>Connect</code> in feature <code>DroneManager</code>
 * Request connection to a specific drone. Override the auto-selected drone.
 * @param feature feature owning the commands
 * @param serial Serial number of the drone.
 * @param key Security key (passphrase) to use. This arg is ignored if the drone security is 'none'. If the drone manager has a saved key for the drone, pass an empty string to use it
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_DroneManager_SendConnect_t) (ARCONTROLLER_FEATURE_DroneManager_t *feature, char * serial, char * key);

/**
 * @brief Send a command <code>Forget</code> in feature <code>DroneManager</code>
 * Forget the given drone. If the drone is the selected one, the auto-selection will run again.
 * @param feature feature owning the commands
 * @param serial Serial number of the drone to forget.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_DroneManager_SendForget_t) (ARCONTROLLER_FEATURE_DroneManager_t *feature, char * serial);

/**
 * @brief Feature controller allow to send command related of drone_manager Feature.
 * Commands related to the drone_manager feature
 */
struct ARCONTROLLER_FEATURE_DroneManager_t
{
    ARCONTROLLER_FEATURE_DroneManager_SendDiscoverDrones_t sendDiscoverDrones;
    ARCONTROLLER_FEATURE_DroneManager_SendConnect_t sendConnect;
    ARCONTROLLER_FEATURE_DroneManager_SendForget_t sendForget;
    ARCONTROLLER_FEATURE_DroneManager_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_DroneManager_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_DroneManager_SetNetworkController (ARCONTROLLER_FEATURE_DroneManager_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_DroneManager_GetCommandElements (ARCONTROLLER_FEATURE_DroneManager_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE follow_me --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_FollowMe_t.
 */
typedef struct ARCONTROLLER_FEATURE_FollowMe_Private_t ARCONTROLLER_FEATURE_FollowMe_Private_t;

/**
 * @brief Feature controller allow to send command related of follow_me Feature.
 * FollowMe feature
 */
typedef struct ARCONTROLLER_FEATURE_FollowMe_t ARCONTROLLER_FEATURE_FollowMe_t;

/**
 * @brief Create a new follow_me Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_FollowMe_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_FollowMe_SetNetworkController().
 * @param[out] error executing error.
 * @return the new follow_me Feature Controller
 * @see ARCONTROLLER_FEATURE_FollowMe_Delete
 */
ARCONTROLLER_FEATURE_FollowMe_t *ARCONTROLLER_FEATURE_FollowMe_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the follow_me Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_FollowMe_New
 */
void ARCONTROLLER_FEATURE_FollowMe_Delete (ARCONTROLLER_FEATURE_FollowMe_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_RegisterARCommands (ARCONTROLLER_FEATURE_FollowMe_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_UnregisterARCommands (ARCONTROLLER_FEATURE_FollowMe_t *feature);

/**
 * @brief Get the dictionay of the follow_me Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_FollowMe_GetDictionary (ARCONTROLLER_FEATURE_FollowMe_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>FollowMe</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_FollowMe_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_AddCallback (ARCONTROLLER_FEATURE_FollowMe_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>FollowMe</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_RemoveCallback (ARCONTROLLER_FEATURE_FollowMe_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_STATE_MODE; /**< Key of the argument </code>mode</code> of event <code>State</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_STATE_BEHAVIOR; /**< Key of the argument </code>behavior</code> of event <code>State</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_STATE_ANIMATION; /**< Key of the argument </code>animation</code> of event <code>State</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_STATE_ANIMATION_AVAILABLE; /**< Key of the argument </code>animation_available</code> of event <code>State</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_MODEINFO_MODE; /**< Key of the argument </code>mode</code> of event <code>ModeInfo</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_MODEINFO_MISSING_REQUIREMENTS; /**< Key of the argument </code>missing_requirements</code> of event <code>ModeInfo</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_MODEINFO_IMPROVEMENTS; /**< Key of the argument </code>improvements</code> of event <code>ModeInfo</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIG_USE_DEFAULT; /**< Key of the argument </code>use_default</code> of event <code>GeographicConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIG_DISTANCE; /**< Key of the argument </code>distance</code> of event <code>GeographicConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIG_ELEVATION; /**< Key of the argument </code>elevation</code> of event <code>GeographicConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIG_AZIMUTH; /**< Key of the argument </code>azimuth</code> of event <code>GeographicConfig</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIG_USE_DEFAULT; /**< Key of the argument </code>use_default</code> of event <code>RelativeConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIG_DISTANCE; /**< Key of the argument </code>distance</code> of event <code>RelativeConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIG_ELEVATION; /**< Key of the argument </code>elevation</code> of event <code>RelativeConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIG_AZIMUTH; /**< Key of the argument </code>azimuth</code> of event <code>RelativeConfig</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_TARGETTRAJECTORY_LATITUDE; /**< Key of the argument </code>latitude</code> of event <code>TargetTrajectory</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_TARGETTRAJECTORY_LONGITUDE; /**< Key of the argument </code>longitude</code> of event <code>TargetTrajectory</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_TARGETTRAJECTORY_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>TargetTrajectory</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_TARGETTRAJECTORY_NORTH_SPEED; /**< Key of the argument </code>north_speed</code> of event <code>TargetTrajectory</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_TARGETTRAJECTORY_EAST_SPEED; /**< Key of the argument </code>east_speed</code> of event <code>TargetTrajectory</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_TARGETTRAJECTORY_DOWN_SPEED; /**< Key of the argument </code>down_speed</code> of event <code>TargetTrajectory</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_HELICOIDANIMCONFIG_USE_DEFAULT; /**< Key of the argument </code>use_default</code> of event <code>HelicoidAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_HELICOIDANIMCONFIG_SPEED; /**< Key of the argument </code>speed</code> of event <code>HelicoidAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_HELICOIDANIMCONFIG_REVOLUTION_NB; /**< Key of the argument </code>revolution_nb</code> of event <code>HelicoidAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_HELICOIDANIMCONFIG_VERTICAL_DISTANCE; /**< Key of the argument </code>vertical_distance</code> of event <code>HelicoidAnimConfig</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIG_USE_DEFAULT; /**< Key of the argument </code>use_default</code> of event <code>SwingAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIG_SPEED; /**< Key of the argument </code>speed</code> of event <code>SwingAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIG_VERTICAL_DISTANCE; /**< Key of the argument </code>vertical_distance</code> of event <code>SwingAnimConfig</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIG_USE_DEFAULT; /**< Key of the argument </code>use_default</code> of event <code>BoomerangAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIG_SPEED; /**< Key of the argument </code>speed</code> of event <code>BoomerangAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIG_DISTANCE; /**< Key of the argument </code>distance</code> of event <code>BoomerangAnimConfig</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIG_USE_DEFAULT; /**< Key of the argument </code>use_default</code> of event <code>CandleAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIG_SPEED; /**< Key of the argument </code>speed</code> of event <code>CandleAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIG_VERTICAL_DISTANCE; /**< Key of the argument </code>vertical_distance</code> of event <code>CandleAnimConfig</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIG_USE_DEFAULT; /**< Key of the argument </code>use_default</code> of event <code>DollySlideAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIG_SPEED; /**< Key of the argument </code>speed</code> of event <code>DollySlideAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIG_ANGLE; /**< Key of the argument </code>angle</code> of event <code>DollySlideAnimConfig</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIG_HORIZONTAL_DISTANCE; /**< Key of the argument </code>horizontal_distance</code> of event <code>DollySlideAnimConfig</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_TARGETFRAMINGPOSITIONCHANGED_HORIZONTAL; /**< Key of the argument </code>horizontal</code> of event <code>TargetFramingPositionChanged</code> in feature <code>FollowMe</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_TARGETFRAMINGPOSITIONCHANGED_VERTICAL; /**< Key of the argument </code>vertical</code> of event <code>TargetFramingPositionChanged</code> in feature <code>FollowMe</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_TARGETIMAGEDETECTIONSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>TargetImageDetectionState</code> in feature <code>FollowMe</code> */

/**
 * @brief Send a command <code>Start</code> in feature <code>FollowMe</code>
 * Start a FollowMe with all its params set to the default params.
 * Sending this command will stop other running followMe.
 * @param feature feature owning the commands
 * @param mode FollowMe mode
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendStart_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, eARCOMMANDS_FOLLOW_ME_MODE mode);

/**
 * @brief Send a command <code>Stop</code> in feature <code>FollowMe</code>
 * Stop current followMe.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendStop_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature);

/**
 * @brief Send a command <code>ConfigureGeographic</code> in feature <code>FollowMe</code>
 * Configure the geographic FollowMe.
 * This should only be taken in account if arg behavior in [state](#134-3) is equal to Follow.
 * @param feature feature owning the commands
 * @param use_default Geographic and Relative follow me configuration parameters
 * @param distance The distance leader-follower in meter Not used when arg start is at 0
 * @param elevation The elevation leader-follower in rad (not used when arg start is at 0)
 * @param azimuth The azimuth north-leader-follower in rad (not used when arg start is at 0)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendConfigureGeographic_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float distance, float elevation, float azimuth);

/**
 * @brief Send a command <code>ConfigureRelative</code> in feature <code>FollowMe</code>
 * Configure the relative FollowMe.
 * This should only be taken in account if arg behavior in [state](#134-3) is equal to Follow
 * @param feature feature owning the commands
 * @param use_default Geographic and Relative follow me configuration parameters
 * @param distance The distance leader-follower in meter
 * @param elevation The elevation leader-follower in rad
 * @param azimuth The azimuth north-leader-follower in rad
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendConfigureRelative_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float distance, float elevation, float azimuth);

/**
 * @brief Send a command <code>StopAnimation</code> in feature <code>FollowMe</code>
 * Stop current followMe animation.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendStopAnimation_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature);

/**
 * @brief Send a command <code>StartHelicoidAnim</code> in feature <code>FollowMe</code>
 * Start a helicoid animation.
 * The helicoid animation allows the drone to revolve around the target while going up, with a fixed radius.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Helicoid animation configuration parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1
 * @param revolution_number The number of revolution (in turn) Negative value is infinite Example: 1.5 makes an entire turn plus half of a turn Not used when revolutionNb_is_default is 1
 * @param vertical_distance Distance that should be made by the product to reach the top of the helicoid in m Not used when verticalDistance_is_default is 1
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendStartHelicoidAnim_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float revolution_number, float vertical_distance);

/**
 * @brief Send a command <code>StartSwingAnim</code> in feature <code>FollowMe</code>
 * Start a swing animation.
 * The swing animation enables a vertical point of view while the drone passes over the target.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Swing configure parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
 * @param vertical_distance Distance that should be made by the product to reach the top of the swing in m Not used when verticalDistance_is_default is 1 Not used when start is 0
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendStartSwingAnim_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float vertical_distance);

/**
 * @brief Send a command <code>StartBoomerangAnim</code> in feature <code>FollowMe</code>
 * Start a boomerang animation.
 * The boomerang animation enables a zoom-out/zoom-in trajectory while preserving the framing chosen by the user.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Boomerang animation configure parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
 * @param distance Distance that should be made by the product to reach its return point in m Not used when distance_is_default is 1 Not used when start is 0
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendStartBoomerangAnim_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float distance);

/**
 * @brief Send a command <code>StartCandleAnim</code> in feature <code>FollowMe</code>
 * Start a candle animation.
 * The candle animation enables a zoom-in directly on the target followed by a vertical zoom-out.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Candle animation configure parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
 * @param vertical_distance Distance that should be made by the product to reach the top of the vertical zoom-out in m Not used when verticalDistance_is_default is 1 Not used when start is 0
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendStartCandleAnim_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float vertical_distance);

/**
 * @brief Send a command <code>StartDollySlideAnim</code> in feature <code>FollowMe</code>
 * Start a dolly slide animation.
 * Allows the drone to catch up to the target before flying past it, creating a zoom-in/zoom_out effect without a curved path.
 * This message has been deprecated. Please use the animation feature.
 * @param feature feature owning the commands
 * @param use_default Dolly slide animation configure parameters.
 * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
 * @param angle Desired angle Product-User-Target in rad Not used when angle_is_default is 1 Not used when start is 0
 * @param horizontal_distance Distance that should be made by the product to reach its target in m Not used when horizontalDistance_is_default is 1 Not used when start is 0
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendStartDollySlideAnim_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, uint8_t use_default, float speed, float angle, float horizontal_distance);

/**
 * @brief Send a command <code>TargetFramingPosition</code> in feature <code>FollowMe</code>
 * Set the desired target framing in the video.
 * @param feature feature owning the commands
 * @param horizontal Horizontal position in the video (in %, from left to right)
 * @param vertical Vertical position in the video (in %, from bottom to top)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendTargetFramingPosition_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, int8_t horizontal, int8_t vertical);

/**
 * @brief Send a command <code>TargetImageDetection</code> in feature <code>FollowMe</code>
 * Send vision detection results.
 * @param feature feature owning the commands
 * @param target_azimuth Horizontal north-drone-target angle in radian
 * @param target_elevation Vertical angle horizon-drone-target in radian
 * @param change_of_scale Normalized relative radial speed in 1/second
 * @param confidence_index Confidence index of the detection (from 0 to 255, the highest is the best)
 * @param is_new_selection Boolean. 1 if the selection is new, 0 otherwise
 * @param timestamp Acquisition time of processed picture in millisecond
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_FollowMe_SendTargetImageDetection_t) (ARCONTROLLER_FEATURE_FollowMe_t *feature, float target_azimuth, float target_elevation, float change_of_scale, uint8_t confidence_index, uint8_t is_new_selection, uint64_t timestamp);

/**
 * @brief Feature controller allow to send command related of follow_me Feature.
 * FollowMe feature
 */
struct ARCONTROLLER_FEATURE_FollowMe_t
{
    ARCONTROLLER_FEATURE_FollowMe_SendStart_t sendStart;
    ARCONTROLLER_FEATURE_FollowMe_SendStop_t sendStop;
    ARCONTROLLER_FEATURE_FollowMe_SendConfigureGeographic_t sendConfigureGeographic;
    ARCONTROLLER_FEATURE_FollowMe_SendConfigureRelative_t sendConfigureRelative;
    ARCONTROLLER_FEATURE_FollowMe_SendStopAnimation_t sendStopAnimation;
    ARCONTROLLER_FEATURE_FollowMe_SendStartHelicoidAnim_t sendStartHelicoidAnim;
    ARCONTROLLER_FEATURE_FollowMe_SendStartSwingAnim_t sendStartSwingAnim;
    ARCONTROLLER_FEATURE_FollowMe_SendStartBoomerangAnim_t sendStartBoomerangAnim;
    ARCONTROLLER_FEATURE_FollowMe_SendStartCandleAnim_t sendStartCandleAnim;
    ARCONTROLLER_FEATURE_FollowMe_SendStartDollySlideAnim_t sendStartDollySlideAnim;
    ARCONTROLLER_FEATURE_FollowMe_SendTargetFramingPosition_t sendTargetFramingPosition;
    ARCONTROLLER_FEATURE_FollowMe_SendTargetImageDetection_t sendTargetImageDetection;
    ARCONTROLLER_FEATURE_FollowMe_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_FollowMe_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_FollowMe_SetNetworkController (ARCONTROLLER_FEATURE_FollowMe_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_FollowMe_GetCommandElements (ARCONTROLLER_FEATURE_FollowMe_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE JumpingSumo --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_JumpingSumo_t.
 */
typedef struct ARCONTROLLER_FEATURE_JumpingSumo_Private_t ARCONTROLLER_FEATURE_JumpingSumo_Private_t;

/**
 * @brief Feature controller allow to send command related of JumpingSumo Feature.
 * All commands specific to the Jumping Sumo.
 */
typedef struct ARCONTROLLER_FEATURE_JumpingSumo_t ARCONTROLLER_FEATURE_JumpingSumo_t;

/**
 * @brief Create a new JumpingSumo Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_JumpingSumo_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_JumpingSumo_SetNetworkController().
 * @param[out] error executing error.
 * @return the new JumpingSumo Feature Controller
 * @see ARCONTROLLER_FEATURE_JumpingSumo_Delete
 */
ARCONTROLLER_FEATURE_JumpingSumo_t *ARCONTROLLER_FEATURE_JumpingSumo_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the JumpingSumo Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_JumpingSumo_New
 */
void ARCONTROLLER_FEATURE_JumpingSumo_Delete (ARCONTROLLER_FEATURE_JumpingSumo_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_RegisterARCommands (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_UnregisterARCommands (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Get the dictionay of the JumpingSumo Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_JumpingSumo_GetDictionary (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>JumpingSumo</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_JumpingSumo_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_AddCallback (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>JumpingSumo</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_RemoveCallback (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStatePostureChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateAlertStateChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_PILOTINGSTATE_SPEEDCHANGED_SPEED; /**< Key of the argument </code>speed</code> of event <code>PilotingStateSpeedChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_PILOTINGSTATE_SPEEDCHANGED_REALSPEED; /**< Key of the argument </code>realSpeed</code> of event <code>PilotingStateSpeedChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>AnimationsStateJumpLoadChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>AnimationsStateJumpTypeChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>AnimationsStateJumpMotorProblemChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductGPSVersionChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductGPSVersionChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStateVideoStateChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>MediaRecordStateVideoStateChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStateVideoStateChangedV2</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordStateVideoStateChangedV2</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventVideoEventChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventVideoEventChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_SSID; /**< Key of the argument </code>ssid</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_RSSI; /**< Key of the argument </code>rssi</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>JumpingSumo</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_IN_OR_OUT; /**< Key of the argument </code>in_or_out</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>JumpingSumo</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_NETWORKSTATE_LINKQUALITYCHANGED_QUALITY; /**< Key of the argument </code>quality</code> of event <code>NetworkStateLinkQualityChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_AUDIOSETTINGSSTATE_MASTERVOLUMECHANGED_VOLUME; /**< Key of the argument </code>volume</code> of event <code>AudioSettingsStateMasterVolumeChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME; /**< Key of the argument </code>theme</code> of event <code>AudioSettingsStateThemeChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_UUID; /**< Key of the argument </code>uuid</code> of event <code>RoadPlanStateScriptMetadataListChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_VERSION; /**< Key of the argument </code>version</code> of event <code>RoadPlanStateScriptMetadataListChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_PRODUCT; /**< Key of the argument </code>product</code> of event <code>RoadPlanStateScriptMetadataListChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_NAME; /**< Key of the argument </code>name</code> of event <code>RoadPlanStateScriptMetadataListChanged</code> in feature <code>JumpingSumo</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTMETADATALISTCHANGED_LASTMODIFIED; /**< Key of the argument </code>lastModified</code> of event <code>RoadPlanStateScriptMetadataListChanged</code> in feature <code>JumpingSumo</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE; /**< Key of the argument </code>resultCode</code> of event <code>RoadPlanStateScriptUploadChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE; /**< Key of the argument </code>resultCode</code> of event <code>RoadPlanStateScriptDeleteChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE; /**< Key of the argument </code>resultCode</code> of event <code>RoadPlanStatePlayScriptChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_SPEEDSETTINGSSTATE_OUTDOORCHANGED_OUTDOOR; /**< Key of the argument </code>outdoor</code> of event <code>SpeedSettingsStateOutdoorChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>MediaStreamingStateVideoEnableChanged</code> in feature <code>JumpingSumo</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMO_VIDEOSETTINGSSTATE_AUTORECORDCHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>VideoSettingsStateAutorecordChanged</code> in feature <code>JumpingSumo</code> */

/**
 * @brief Send a command <code>PilotingPCMD</code> in feature <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param speed Speed value [-100:100].
 * @param turn Turn value. [-100:100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPCMD_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t flag, int8_t speed, int8_t turn);

/**
 * @brief Set the parameters to send through the command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param speed Speed value [-100:100].
 * @param turn Turn value. [-100:100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMD_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t flag, int8_t speed, int8_t turn);

/**
 * @brief Send the a command <code>PilotingPCMD</code> in project <code>JumpingSumo</code> with the parame set beforehand 
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_JumpingSumo_SendPilotingPCMDStruct (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set flag sent through the command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDFlag_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t flag);

/**
 * @brief Set speed sent through the command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param speed Speed value [-100:100].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDSpeed_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, int8_t speed);

/**
 * @brief Set turn sent through the command <code>PilotingPCMD</code> in project <code>JumpingSumo</code>
 * Ask the JS speed and turn ratio.
 * @param feature feature owning the commands
 * @param turn Turn value. [-100:100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDTurn_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, int8_t turn);

/**
 * @brief Send a command <code>PilotingPosture</code> in feature <code>JumpingSumo</code>
 * Request a posture
 * @param feature feature owning the commands
 * @param type Type of Posture
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPosture_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE type);

/**
 * @brief Send a command <code>PilotingAddCapOffset</code> in feature <code>JumpingSumo</code>
 * Add the specified offset to the current cap.
 * @param feature feature owning the commands
 * @param offset Offset value in radians.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingAddCapOffset_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, float offset);

/**
 * @brief Send a command <code>AnimationsJumpStop</code> in feature <code>JumpingSumo</code>
 * Stop jump, emergency jump stop, stop jump motor and stay there.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpStop_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>AnimationsJumpCancel</code> in feature <code>JumpingSumo</code>
 * Cancel jump and come back to previous state (if possible).
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpCancel_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>AnimationsJumpLoad</code> in feature <code>JumpingSumo</code>
 * Request jump loading
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpLoad_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>AnimationsJump</code> in feature <code>JumpingSumo</code>
 * Request a jump
 * @param feature feature owning the commands
 * @param type Type of jump
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJump_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE type);

/**
 * @brief Send a command <code>AnimationsSimpleAnimation</code> in feature <code>JumpingSumo</code>
 * Play a parameterless animation.
 * @param feature feature owning the commands
 * @param id Animation ID.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsSimpleAnimation_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID id);

/**
 * @brief Send a command <code>MediaRecordPicture</code> in feature <code>JumpingSumo</code>
 * @deprecated
 * Take picture
 * @param feature feature owning the commands
 * @param mass_storage_id Mass storage id to take picture
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPicture_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordVideo</code> in feature <code>JumpingSumo</code>
 * @deprecated
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * @param mass_storage_id Mass storage id to record
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideo_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD record, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordPictureV2</code> in feature <code>JumpingSumo</code>
 * Take picture
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPictureV2_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>MediaRecordVideoV2</code> in feature <code>JumpingSumo</code>
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideoV2_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD record);

/**
 * @brief Send a command <code>NetworkSettingsWifiSelection</code> in feature <code>JumpingSumo</code>
 * Auto-select channel of choosen band
 * @param feature feature owning the commands
 * @param type The type of wifi selection (auto, manual)
 * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param channel The channel (not used in auto mode)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkSettingsWifiSelection_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>NetworkWifiScan</code> in feature <code>JumpingSumo</code>
 * Launches wifi network scan
 * @param feature feature owning the commands
 * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiScan_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND band);

/**
 * @brief Send a command <code>NetworkWifiAuthChannel</code> in feature <code>JumpingSumo</code>
 * Controller inquire the list of authorized wifi channels.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiAuthChannel_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>AudioSettingsMasterVolume</code> in feature <code>JumpingSumo</code>
 * Master volume control.
 * @param feature feature owning the commands
 * @param volume Master audio volume [0:100].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsMasterVolume_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t volume);

/**
 * @brief Send a command <code>AudioSettingsTheme</code> in feature <code>JumpingSumo</code>
 * Audio Theme.
 * @param feature feature owning the commands
 * @param theme The audio theme to set.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsTheme_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME theme);

/**
 * @brief Send a command <code>RoadPlanAllScriptsMetadata</code> in feature <code>JumpingSumo</code>
 * Command to ask device all metadata scripts.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanAllScriptsMetadata_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature);

/**
 * @brief Send a command <code>RoadPlanScriptUploaded</code> in feature <code>JumpingSumo</code>
 * Notify device that a new file has been uploaded.
 * @param feature feature owning the commands
 * @param uuid UUID of uploaded file.
 * @param md5Hash MD5 hash code computed over file.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptUploaded_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, char * uuid, char * md5Hash);

/**
 * @brief Send a command <code>RoadPlanScriptDelete</code> in feature <code>JumpingSumo</code>
 * Ask the device to delete a script.
 * @param feature feature owning the commands
 * @param uuid UUID of the file to delete.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptDelete_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, char * uuid);

/**
 * @brief Send a command <code>RoadPlanPlayScript</code> in feature <code>JumpingSumo</code>
 * Ask the device to play a script.
 * @param feature feature owning the commands
 * @param uuid UUID of the file to play.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanPlayScript_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, char * uuid);

/**
 * @brief Send a command <code>SpeedSettingsOutdoor</code> in feature <code>JumpingSumo</code>
 * @deprecated
 * Outdoor property
 * @param feature feature owning the commands
 * @param outdoor 1 if outdoor, 0 if indoor
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendSpeedSettingsOutdoor_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t outdoor);

/**
 * @brief Send a command <code>MediaStreamingVideoEnable</code> in feature <code>JumpingSumo</code>
 * Enable/disable video streaming.
 * @param feature feature owning the commands
 * @param enable 1 to enable, 0 to disable.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendMediaStreamingVideoEnable_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>VideoSettingsAutorecord</code> in feature <code>JumpingSumo</code>
 * Set video automatic recording state.
 * @param feature feature owning the commands
 * @param enabled 0: Disabled 1: Enabled.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_JumpingSumo_SendVideoSettingsAutorecord_t) (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, uint8_t enabled);

/**
 * @brief Feature controller allow to send command related of JumpingSumo Feature.
 * All commands specific to the Jumping Sumo.
 */
struct ARCONTROLLER_FEATURE_JumpingSumo_t
{
    ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPCMD_t sendPilotingPCMD;
    ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMD_t setPilotingPCMD;
    ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDFlag_t setPilotingPCMDFlag; /**< Send a command <code>PilotingPCMD</code> in feature <code>JumpingSumo</code>. */
    ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDSpeed_t setPilotingPCMDSpeed; /**< Send a command <code>PilotingPCMD</code> in feature <code>JumpingSumo</code>. */
    ARCONTROLLER_FEATURE_JumpingSumo_SetPilotingPCMDTurn_t setPilotingPCMDTurn; /**< Send a command <code>PilotingPCMD</code> in feature <code>JumpingSumo</code>. */
    ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingPosture_t sendPilotingPosture;
    ARCONTROLLER_FEATURE_JumpingSumo_SendPilotingAddCapOffset_t sendPilotingAddCapOffset;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpStop_t sendAnimationsJumpStop;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpCancel_t sendAnimationsJumpCancel;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJumpLoad_t sendAnimationsJumpLoad;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsJump_t sendAnimationsJump;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAnimationsSimpleAnimation_t sendAnimationsSimpleAnimation;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPicture_t sendMediaRecordPicture;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideo_t sendMediaRecordVideo;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordPictureV2_t sendMediaRecordPictureV2;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaRecordVideoV2_t sendMediaRecordVideoV2;
    ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkSettingsWifiSelection_t sendNetworkSettingsWifiSelection;
    ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiScan_t sendNetworkWifiScan;
    ARCONTROLLER_FEATURE_JumpingSumo_SendNetworkWifiAuthChannel_t sendNetworkWifiAuthChannel;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsMasterVolume_t sendAudioSettingsMasterVolume;
    ARCONTROLLER_FEATURE_JumpingSumo_SendAudioSettingsTheme_t sendAudioSettingsTheme;
    ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanAllScriptsMetadata_t sendRoadPlanAllScriptsMetadata;
    ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptUploaded_t sendRoadPlanScriptUploaded;
    ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanScriptDelete_t sendRoadPlanScriptDelete;
    ARCONTROLLER_FEATURE_JumpingSumo_SendRoadPlanPlayScript_t sendRoadPlanPlayScript;
    ARCONTROLLER_FEATURE_JumpingSumo_SendSpeedSettingsOutdoor_t sendSpeedSettingsOutdoor;
    ARCONTROLLER_FEATURE_JumpingSumo_SendMediaStreamingVideoEnable_t sendMediaStreamingVideoEnable;
    ARCONTROLLER_FEATURE_JumpingSumo_SendVideoSettingsAutorecord_t sendVideoSettingsAutorecord;
    ARCONTROLLER_FEATURE_JumpingSumo_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_JumpingSumo_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_JumpingSumo_SetNetworkController (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_JumpingSumo_GetCommandElements (ARCONTROLLER_FEATURE_JumpingSumo_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE mapper --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Mapper_t.
 */
typedef struct ARCONTROLLER_FEATURE_Mapper_Private_t ARCONTROLLER_FEATURE_Mapper_Private_t;

/**
 * @brief Feature controller allow to send command related of mapper Feature.
 * Key mapper for remote controllers
 */
typedef struct ARCONTROLLER_FEATURE_Mapper_t ARCONTROLLER_FEATURE_Mapper_t;

/**
 * @brief Create a new mapper Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_Mapper_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_Mapper_SetNetworkController().
 * @param[out] error executing error.
 * @return the new mapper Feature Controller
 * @see ARCONTROLLER_FEATURE_Mapper_Delete
 */
ARCONTROLLER_FEATURE_Mapper_t *ARCONTROLLER_FEATURE_Mapper_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the mapper Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_Mapper_New
 */
void ARCONTROLLER_FEATURE_Mapper_Delete (ARCONTROLLER_FEATURE_Mapper_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_RegisterARCommands (ARCONTROLLER_FEATURE_Mapper_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_UnregisterARCommands (ARCONTROLLER_FEATURE_Mapper_t *feature);

/**
 * @brief Get the dictionay of the mapper Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_Mapper_GetDictionary (ARCONTROLLER_FEATURE_Mapper_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>Mapper</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_Mapper_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_AddCallback (ARCONTROLLER_FEATURE_Mapper_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>Mapper</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_RemoveCallback (ARCONTROLLER_FEATURE_Mapper_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABSTATE_BUTTONS; /**< Key of the argument </code>buttons</code> of event <code>GrabState</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABSTATE_AXES; /**< Key of the argument </code>axes</code> of event <code>GrabState</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABSTATE_BUTTONS_STATE; /**< Key of the argument </code>buttons_state</code> of event <code>GrabState</code> in feature <code>Mapper</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABBUTTONEVENT_BUTTON; /**< Key of the argument </code>button</code> of event <code>GrabButtonEvent</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABBUTTONEVENT_EVENT; /**< Key of the argument </code>event</code> of event <code>GrabButtonEvent</code> in feature <code>Mapper</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABAXISEVENT_AXIS; /**< Key of the argument </code>axis</code> of event <code>GrabAxisEvent</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABAXISEVENT_VALUE; /**< Key of the argument </code>value</code> of event <code>GrabAxisEvent</code> in feature <code>Mapper</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_UID; /**< Key of the argument </code>uid</code> of event <code>ButtonMappingItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_PRODUCT; /**< Key of the argument </code>product</code> of event <code>ButtonMappingItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_ACTION; /**< Key of the argument </code>action</code> of event <code>ButtonMappingItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_BUTTONS; /**< Key of the argument </code>buttons</code> of event <code>ButtonMappingItem</code> in feature <code>Mapper</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_UID; /**< Key of the argument </code>uid</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_PRODUCT; /**< Key of the argument </code>product</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_ACTION; /**< Key of the argument </code>action</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_AXIS; /**< Key of the argument </code>axis</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_BUTTONS; /**< Key of the argument </code>buttons</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_APPLICATIONAXISEVENT_ACTION; /**< Key of the argument </code>action</code> of event <code>ApplicationAxisEvent</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_APPLICATIONAXISEVENT_VALUE; /**< Key of the argument </code>value</code> of event <code>ApplicationAxisEvent</code> in feature <code>Mapper</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_APPLICATIONBUTTONEVENT_ACTION; /**< Key of the argument </code>action</code> of event <code>ApplicationButtonEvent</code> in feature <code>Mapper</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_EXPOMAPITEM_UID; /**< Key of the argument </code>uid</code> of event <code>ExpoMapItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_EXPOMAPITEM_PRODUCT; /**< Key of the argument </code>product</code> of event <code>ExpoMapItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_EXPOMAPITEM_AXIS; /**< Key of the argument </code>axis</code> of event <code>ExpoMapItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_EXPOMAPITEM_EXPO; /**< Key of the argument </code>expo</code> of event <code>ExpoMapItem</code> in feature <code>Mapper</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_INVERTEDMAPITEM_UID; /**< Key of the argument </code>uid</code> of event <code>InvertedMapItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_INVERTEDMAPITEM_PRODUCT; /**< Key of the argument </code>product</code> of event <code>InvertedMapItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_INVERTEDMAPITEM_AXIS; /**< Key of the argument </code>axis</code> of event <code>InvertedMapItem</code> in feature <code>Mapper</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_INVERTEDMAPITEM_INVERTED; /**< Key of the argument </code>inverted</code> of event <code>InvertedMapItem</code> in feature <code>Mapper</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_ACTIVEPRODUCT_PRODUCT; /**< Key of the argument </code>product</code> of event <code>ActiveProduct</code> in feature <code>Mapper</code> */

/**
 * @brief Send a command <code>Grab</code> in feature <code>Mapper</code>
 * Grabbed buttons are sent to the app and are not handled by the mapper
 * @param feature feature owning the commands
 * @param buttons Buttons to grab/ungrab (bitfield)
 * @param axes Axes to grab/ungrab (bitfield)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Mapper_SendGrab_t) (ARCONTROLLER_FEATURE_Mapper_t *feature, uint32_t buttons, uint32_t axes);

/**
 * @brief Send a command <code>MapButtonAction</code> in feature <code>Mapper</code>
 * An action can only be mapped to one button set.
 * Each action can be mapped to different buttons for different products.
 * @param feature feature owning the commands
 * @param product Product (see libARDiscovery for list)
 * @param action The action (mapped on a button)
 * @param buttons Buttons combination mapped to the action (bitfield). Set 0 (no button) to unmap an action
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Mapper_SendMapButtonAction_t) (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product, eARCOMMANDS_MAPPER_BUTTON_ACTION action, uint32_t buttons);

/**
 * @brief Send a command <code>MapAxisAction</code> in feature <code>Mapper</code>
 * An action can only be mapped to one axis/button set.
 * Each action can be mapped to different axes/buttons for different products.
 * @param feature feature owning the commands
 * @param product Product (see libARDiscovery for list)
 * @param action The action (mapped on an axis)
 * @param axis The axis number on which the action will be mapped. Set a negative value to unmap the action.
 * @param buttons Buttons combination mapped to the action (bitfield). Can be zero if no buttons are required.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Mapper_SendMapAxisAction_t) (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product, eARCOMMANDS_MAPPER_AXIS_ACTION action, int32_t axis, uint32_t buttons);

/**
 * @brief Send a command <code>ResetMapping</code> in feature <code>Mapper</code>
 * Resets the mappings, axis exponential parameters, and axis inversion for the given product.
 * If the product is given as 0 (zero), the all products are reset.
 * @param feature feature owning the commands
 * @param product The product to reset, or 0 to reset all products.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Mapper_SendResetMapping_t) (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product);

/**
 * @brief Send a command <code>SetExpo</code> in feature <code>Mapper</code>
 * By default, each axis can have a different expo value.
 * For some products/mappings configuration, the expo values of two axes belonging to the same physical joystick can be locked to the same value. In this case, setting the value for one axis will automatically change both values.
 * @param feature feature owning the commands
 * @param product Product (see libARDiscovery for list). Set to 0 to apply to all products
 * @param axis Axis number. Set to -1 to apply to all axes.
 * @param expo Expo type
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Mapper_SendSetExpo_t) (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product, int32_t axis, eARCOMMANDS_MAPPER_EXPO_TYPE expo);

/**
 * @brief Send a command <code>SetInverted</code> in feature <code>Mapper</code>
 * Axis inversion has no effect on grabbed axes, nor on virtual buttons that might be generated from axes.
 * @param feature feature owning the commands
 * @param product Product (see libARDiscovery for list). Set to 0 to apply to all products
 * @param axis Axis number
 * @param inverted 0 : Axis not inverted. 1 : Axis inverted
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Mapper_SendSetInverted_t) (ARCONTROLLER_FEATURE_Mapper_t *feature, uint16_t product, int32_t axis, uint8_t inverted);

/**
 * @brief Feature controller allow to send command related of mapper Feature.
 * Key mapper for remote controllers
 */
struct ARCONTROLLER_FEATURE_Mapper_t
{
    ARCONTROLLER_FEATURE_Mapper_SendGrab_t sendGrab;
    ARCONTROLLER_FEATURE_Mapper_SendMapButtonAction_t sendMapButtonAction;
    ARCONTROLLER_FEATURE_Mapper_SendMapAxisAction_t sendMapAxisAction;
    ARCONTROLLER_FEATURE_Mapper_SendResetMapping_t sendResetMapping;
    ARCONTROLLER_FEATURE_Mapper_SendSetExpo_t sendSetExpo;
    ARCONTROLLER_FEATURE_Mapper_SendSetInverted_t sendSetInverted;
    ARCONTROLLER_FEATURE_Mapper_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_Mapper_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Mapper_SetNetworkController (ARCONTROLLER_FEATURE_Mapper_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Mapper_GetCommandElements (ARCONTROLLER_FEATURE_Mapper_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE mapper_mini --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_MapperMini_t.
 */
typedef struct ARCONTROLLER_FEATURE_MapperMini_Private_t ARCONTROLLER_FEATURE_MapperMini_Private_t;

/**
 * @brief Feature controller allow to send command related of mapper_mini Feature.
 * Key mapper for minidrones
 */
typedef struct ARCONTROLLER_FEATURE_MapperMini_t ARCONTROLLER_FEATURE_MapperMini_t;

/**
 * @brief Create a new mapper_mini Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_MapperMini_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_MapperMini_SetNetworkController().
 * @param[out] error executing error.
 * @return the new mapper_mini Feature Controller
 * @see ARCONTROLLER_FEATURE_MapperMini_Delete
 */
ARCONTROLLER_FEATURE_MapperMini_t *ARCONTROLLER_FEATURE_MapperMini_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the mapper_mini Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_MapperMini_New
 */
void ARCONTROLLER_FEATURE_MapperMini_Delete (ARCONTROLLER_FEATURE_MapperMini_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MapperMini_RegisterARCommands (ARCONTROLLER_FEATURE_MapperMini_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MapperMini_UnregisterARCommands (ARCONTROLLER_FEATURE_MapperMini_t *feature);

/**
 * @brief Get the dictionay of the mapper_mini Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_MapperMini_GetDictionary (ARCONTROLLER_FEATURE_MapperMini_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>MapperMini</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_MapperMini_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MapperMini_AddCallback (ARCONTROLLER_FEATURE_MapperMini_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>MapperMini</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MapperMini_RemoveCallback (ARCONTROLLER_FEATURE_MapperMini_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_MINI_BUTTONMAPPINGITEM_UID; /**< Key of the argument </code>uid</code> of event <code>ButtonMappingItem</code> in feature <code>MapperMini</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_MINI_BUTTONMAPPINGITEM_MODES; /**< Key of the argument </code>modes</code> of event <code>ButtonMappingItem</code> in feature <code>MapperMini</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_MINI_BUTTONMAPPINGITEM_ACTION; /**< Key of the argument </code>action</code> of event <code>ButtonMappingItem</code> in feature <code>MapperMini</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_MINI_BUTTONMAPPINGITEM_BUTTONS; /**< Key of the argument </code>buttons</code> of event <code>ButtonMappingItem</code> in feature <code>MapperMini</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_MINI_AXISMAPPINGITEM_UID; /**< Key of the argument </code>uid</code> of event <code>AxisMappingItem</code> in feature <code>MapperMini</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_MINI_AXISMAPPINGITEM_MODES; /**< Key of the argument </code>modes</code> of event <code>AxisMappingItem</code> in feature <code>MapperMini</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_MINI_AXISMAPPINGITEM_ACTION; /**< Key of the argument </code>action</code> of event <code>AxisMappingItem</code> in feature <code>MapperMini</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_MINI_AXISMAPPINGITEM_AXIS; /**< Key of the argument </code>axis</code> of event <code>AxisMappingItem</code> in feature <code>MapperMini</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MAPPER_MINI_AXISMAPPINGITEM_BUTTONS; /**< Key of the argument </code>buttons</code> of event <code>AxisMappingItem</code> in feature <code>MapperMini</code> */

/**
 * @brief Send a command <code>MapButtonAction</code> in feature <code>MapperMini</code>
 * An action can only be mapped to one button set.
 * Each action can be mapped to different buttons for different modes.
 * @param feature feature owning the commands
 * @param modes The modes on which the mapping will be set The piloting mode of the product
 * @param action The action (mapped on a button)
 * @param buttons Buttons combination mapped to the action (bitfield). Set 0 (no button) to unmap an action
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MapperMini_SendMapButtonAction_t) (ARCONTROLLER_FEATURE_MapperMini_t *feature, uint8_t modes, eARCOMMANDS_MAPPER_MINI_BUTTON_ACTION action, uint32_t buttons);

/**
 * @brief Send a command <code>MapAxisAction</code> in feature <code>MapperMini</code>
 * An action can only be mapped to one axis/button set.
 * Each action can be mapped to different axes/buttons for different modes.
 * @param feature feature owning the commands
 * @param modes The modes on which the mapping will be set The piloting mode of the product
 * @param action The action (mapped on an axis)
 * @param axis The axis number on which the action will be mapped. Set a negative value to unmap the action.
 * @param buttons Buttons combination mapped to the action (bitfield). Can be zero if no buttons are required.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MapperMini_SendMapAxisAction_t) (ARCONTROLLER_FEATURE_MapperMini_t *feature, uint8_t modes, eARCOMMANDS_MAPPER_MINI_AXIS_ACTION action, int8_t axis, uint32_t buttons);

/**
 * @brief Send a command <code>ResetMapping</code> in feature <code>MapperMini</code>
 * Resets the mappings for the given mode(s) to their default value.
 * @param feature feature owning the commands
 * @param modes The mode(s) to reset. The piloting mode of the product
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MapperMini_SendResetMapping_t) (ARCONTROLLER_FEATURE_MapperMini_t *feature, uint8_t modes);

/**
 * @brief Feature controller allow to send command related of mapper_mini Feature.
 * Key mapper for minidrones
 */
struct ARCONTROLLER_FEATURE_MapperMini_t
{
    ARCONTROLLER_FEATURE_MapperMini_SendMapButtonAction_t sendMapButtonAction;
    ARCONTROLLER_FEATURE_MapperMini_SendMapAxisAction_t sendMapAxisAction;
    ARCONTROLLER_FEATURE_MapperMini_SendResetMapping_t sendResetMapping;
    ARCONTROLLER_FEATURE_MapperMini_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_MapperMini_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MapperMini_SetNetworkController (ARCONTROLLER_FEATURE_MapperMini_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MapperMini_GetCommandElements (ARCONTROLLER_FEATURE_MapperMini_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE MiniDrone --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_MiniDrone_t.
 */
typedef struct ARCONTROLLER_FEATURE_MiniDrone_Private_t ARCONTROLLER_FEATURE_MiniDrone_Private_t;

/**
 * @brief Feature controller allow to send command related of MiniDrone Feature.
 * All MiniDrone-only commands
 */
typedef struct ARCONTROLLER_FEATURE_MiniDrone_t ARCONTROLLER_FEATURE_MiniDrone_t;

/**
 * @brief Create a new MiniDrone Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_MiniDrone_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_MiniDrone_SetNetworkController().
 * @param[out] error executing error.
 * @return the new MiniDrone Feature Controller
 * @see ARCONTROLLER_FEATURE_MiniDrone_Delete
 */
ARCONTROLLER_FEATURE_MiniDrone_t *ARCONTROLLER_FEATURE_MiniDrone_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the MiniDrone Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_MiniDrone_New
 */
void ARCONTROLLER_FEATURE_MiniDrone_Delete (ARCONTROLLER_FEATURE_MiniDrone_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_RegisterARCommands (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_UnregisterARCommands (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Get the dictionay of the MiniDrone Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_MiniDrone_GetDictionary (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>MiniDrone</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_MiniDrone_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_AddCallback (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>MiniDrone</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_RemoveCallback (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);


extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateFlyingStateChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateAlertStateChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateAutoTakeOffModeChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE; /**< Key of the argument </code>mode</code> of event <code>PilotingStateFlyingModeChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStatePlaneGearBoxChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE; /**< Key of the argument </code>mode</code> of event <code>PilotingStatePilotingModeChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID; /**< Key of the argument </code>mass_storage_id</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_BANKEDTURNCHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingSettingsStateBankedTurnChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTHROTTLECHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxThrottleChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE; /**< Key of the argument </code>mode</code> of event <code>PilotingSettingsStatePreferredPilotingModeChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_WHEELSCHANGED_PRESENT; /**< Key of the argument </code>present</code> of event <code>SpeedSettingsStateWheelsChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXPLANEMODEROTATIONSPEEDCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxPlaneModeRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXPLANEMODEROTATIONSPEEDCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxPlaneModeRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXPLANEMODEROTATIONSPEEDCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxPlaneModeRotationSpeedChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_MOTOR; /**< Key of the argument </code>motor</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductInertialVersionChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductInertialVersionChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_CUTOUTMODECHANGED_ENABLE; /**< Key of the argument </code>enable</code> of event <code>SettingsStateCutOutModeChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_FLOODCONTROLSTATE_FLOODCONTROLCHANGED_DELAY; /**< Key of the argument </code>delay</code> of event <code>FloodControlStateFloodControlChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_ID; /**< Key of the argument </code>id</code> of event <code>UsbAccessoryStateLightState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>UsbAccessoryStateLightState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_INTENSITY; /**< Key of the argument </code>intensity</code> of event <code>UsbAccessoryStateLightState</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_ID; /**< Key of the argument </code>id</code> of event <code>UsbAccessoryStateClawState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>UsbAccessoryStateClawState</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_ID; /**< Key of the argument </code>id</code> of event <code>UsbAccessoryStateGunState</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>UsbAccessoryStateGunState</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEPOSITION_POSX; /**< Key of the argument </code>posx</code> of event <code>NavigationDataStateDronePosition</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEPOSITION_POSY; /**< Key of the argument </code>posy</code> of event <code>NavigationDataStateDronePosition</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEPOSITION_POSZ; /**< Key of the argument </code>posz</code> of event <code>NavigationDataStateDronePosition</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEPOSITION_PSI; /**< Key of the argument </code>psi</code> of event <code>NavigationDataStateDronePosition</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEPOSITION_TS; /**< Key of the argument </code>ts</code> of event <code>NavigationDataStateDronePosition</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONESPEED_SPEED_X; /**< Key of the argument </code>speed_x</code> of event <code>NavigationDataStateDroneSpeed</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONESPEED_SPEED_Y; /**< Key of the argument </code>speed_y</code> of event <code>NavigationDataStateDroneSpeed</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONESPEED_SPEED_Z; /**< Key of the argument </code>speed_z</code> of event <code>NavigationDataStateDroneSpeed</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONESPEED_TS; /**< Key of the argument </code>ts</code> of event <code>NavigationDataStateDroneSpeed</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEALTITUDE_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>NavigationDataStateDroneAltitude</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEALTITUDE_TS; /**< Key of the argument </code>ts</code> of event <code>NavigationDataStateDroneAltitude</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEQUATERNION_Q_W; /**< Key of the argument </code>q_w</code> of event <code>NavigationDataStateDroneQuaternion</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEQUATERNION_Q_X; /**< Key of the argument </code>q_x</code> of event <code>NavigationDataStateDroneQuaternion</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEQUATERNION_Q_Y; /**< Key of the argument </code>q_y</code> of event <code>NavigationDataStateDroneQuaternion</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEQUATERNION_Q_Z; /**< Key of the argument </code>q_z</code> of event <code>NavigationDataStateDroneQuaternion</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_NAVIGATIONDATASTATE_DRONEQUATERNION_TS; /**< Key of the argument </code>ts</code> of event <code>NavigationDataStateDroneQuaternion</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE; /**< Key of the argument </code>power_mode</code> of event <code>MinicamStatePowerModeChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_PRODUCTSERIALCHANGED_SERIAL_NUMBER; /**< Key of the argument </code>serial_number</code> of event <code>MinicamStateProductSerialChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MinicamStateStateChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_VERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of event <code>MinicamStateVersionChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_VERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of event <code>MinicamStateVersionChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MinicamStatePictureChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT; /**< Key of the argument </code>result</code> of event <code>MinicamStatePictureChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MinicamStateVideoStateChanged</code> in feature <code>MiniDrone</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>MinicamStateVideoStateChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MINICAMSTATE_MASSSTORAGEFORMATCHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>MinicamStateMassStorageFormatChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_VIDEOSETTINGSSTATE_AUTORECORDCHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>VideoSettingsStateAutorecordChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY; /**< Key of the argument </code>frequency</code> of event <code>VideoSettingsStateElectricFrequencyChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>VideoSettingsStateVideoResolutionChanged</code> in feature <code>MiniDrone</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_REMOTECONTROLLERSTATE_CONNECTIONCHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>RemoteControllerStateConnectionChanged</code> in feature <code>MiniDrone</code> */

/**
 * @brief Send a command <code>PilotingFlatTrim</code> in feature <code>MiniDrone</code>
 * Do a flat trim
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingFlatTrim_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingTakeOff</code> in feature <code>MiniDrone</code>
 * Ask the drone to take off
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingTakeOff_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingPCMD</code> in feature <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * @param roll Roll consign for the MiniDrone [-100;100]
 * @param pitch Pitch consign for the MiniDrone [-100;100]
 * @param yaw Yaw consign for the MiniDrone [-100;100]
 * @param gaz Gaz consign for the MiniDrone [-100;100]
 * @param timestamp Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion).
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingPCMD_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, uint32_t timestamp);

/**
 * @brief Set the parameters to send through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * @param roll Roll consign for the MiniDrone [-100;100]
 * @param pitch Pitch consign for the MiniDrone [-100;100]
 * @param yaw Yaw consign for the MiniDrone [-100;100]
 * @param gaz Gaz consign for the MiniDrone [-100;100]
 * @param timestamp Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion).
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMD_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t flag, int8_t roll, int8_t pitch, int8_t yaw, int8_t gaz, uint32_t timestamp);

/**
 * @brief Send the a command <code>PilotingPCMD</code> in project <code>MiniDrone</code> with the parame set beforehand 
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_MiniDrone_SendPilotingPCMDStruct (ARCONTROLLER_FEATURE_MiniDrone_t *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set flag sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param flag Boolean flag to activate roll/pitch movement
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDFlag_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t flag);

/**
 * @brief Set roll sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param roll Roll consign for the MiniDrone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDRoll_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t roll);

/**
 * @brief Set pitch sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param pitch Pitch consign for the MiniDrone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDPitch_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t pitch);

/**
 * @brief Set yaw sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param yaw Yaw consign for the MiniDrone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDYaw_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t yaw);

/**
 * @brief Set gaz sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param gaz Gaz consign for the MiniDrone [-100;100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDGaz_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int8_t gaz);

/**
 * @brief Set timestamp sent through the command <code>PilotingPCMD</code> in project <code>MiniDrone</code>
 * Ask the drone to move around.
 * @param feature feature owning the commands
 * @param timestamp Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion).
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDTimestamp_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint32_t timestamp);

/**
 * @brief Send a command <code>PilotingLanding</code> in feature <code>MiniDrone</code>
 * Ask the MiniDrone to land
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingLanding_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingEmergency</code> in feature <code>MiniDrone</code>
 * Put drone in emergency state
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingEmergency_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingAutoTakeOffMode</code> in feature <code>MiniDrone</code>
 * Set MiniDrone automatic take off mode
 * @param feature feature owning the commands
 * @param state State of automatic take off mode
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingAutoTakeOffMode_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t state);

/**
 * @brief Send a command <code>PilotingFlyingMode</code> in feature <code>MiniDrone</code>
 * Set drone FlyingMode. Only supported by WingX
 * @param feature feature owning the commands
 * @param mode Drone Flying Mode
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingFlyingMode_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE mode);

/**
 * @brief Send a command <code>PilotingPlaneGearBox</code> in feature <code>MiniDrone</code>
 * Set Plane Gear Box. Only supported by WingX
 * @param feature feature owning the commands
 * @param state Plane Gear Box
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingPlaneGearBox_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE state);

/**
 * @brief Send a command <code>PilotingTogglePilotingMode</code> in feature <code>MiniDrone</code>
 * Command to toggle between "easy" piloting mode and "preferred" piloting mode.
 * This command only works while the drone is flying.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingTogglePilotingMode_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>AnimationsFlip</code> in feature <code>MiniDrone</code>
 * Make a flip
 * @param feature feature owning the commands
 * @param direction Direction for the flip
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsFlip_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION direction);

/**
 * @brief Send a command <code>AnimationsCap</code> in feature <code>MiniDrone</code>
 * Change the product cap
 * @param feature feature owning the commands
 * @param offset Change the cap with offset angle [-180;180]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsCap_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, int16_t offset);

/**
 * @brief Send a command <code>MediaRecordPicture</code> in feature <code>MiniDrone</code>
 * @deprecated
 * Take picture
 * @param feature feature owning the commands
 * @param mass_storage_id Mass storage id to take picture
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPicture_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t mass_storage_id);

/**
 * @brief Send a command <code>MediaRecordPictureV2</code> in feature <code>MiniDrone</code>
 * Take picture
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPictureV2_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>PilotingSettingsMaxAltitude</code> in feature <code>MiniDrone</code>
 * Set Max Altitude
 * @param feature feature owning the commands
 * @param current Current altitude max in m
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxAltitude_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsMaxTilt</code> in feature <code>MiniDrone</code>
 * Set Max Tilt
 * @param feature feature owning the commands
 * @param current Current tilt max in degree
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxTilt_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>PilotingSettingsBankedTurn</code> in feature <code>MiniDrone</code>
 * Set banked turn mode.
 * When banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.
 * @param feature feature owning the commands
 * @param value 1 to enable, 0 to disable
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsBankedTurn_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t value);

/**
 * @brief Send a command <code>PilotingSettingsMaxThrottle</code> in feature <code>MiniDrone</code>
 * This setting represents the vertical acceleration command that will be sent to the drone when piloting in gaz mode.
 * In this case, closed loop height control is no longer performed; an open loop vertical acceleration command is generated instead.
 * This command results from multiplying the user command coming from the joystick (float value between 0 and 1) by the MaxThrottle setting (also a value between 0 and 1) and by the gravity constant.
 * Thus, we obtain the corresponding value in [m/s²] that will then be mixed with the attitude commands and translated into rotation speeds.
 * As an example, if the value of this setting is 0.5, the maximal acceleration command that can be generated when the user command equals 1 is :
 * acc_cmd_max = 1 * 0.5 * 9.81 m/s² = 4.905 m/s².
 * @param feature feature owning the commands
 * @param max Max throttle, between 0 and 1.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxThrottle_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float max);

/**
 * @brief Send a command <code>PilotingSettingsPreferredPilotingMode</code> in feature <code>MiniDrone</code>
 * The flight envelope of Mambo FPV has been divided in three piloting modes.
 * @param feature feature owning the commands
 * @param mode Piloting modes.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsPreferredPilotingMode_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE mode);

/**
 * @brief Send a command <code>SpeedSettingsMaxVerticalSpeed</code> in feature <code>MiniDrone</code>
 * Set Max Vertical speed
 * @param feature feature owning the commands
 * @param current Current max vertical speed in m/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxVerticalSpeed_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsMaxRotationSpeed</code> in feature <code>MiniDrone</code>
 * Set Max Rotation speed
 * @param feature feature owning the commands
 * @param current Current max rotation speed in degree/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxRotationSpeed_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsWheels</code> in feature <code>MiniDrone</code>
 * Presence of wheels
 * @param feature feature owning the commands
 * @param present 1 if present, 0 if not present
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsWheels_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t present);

/**
 * @brief Send a command <code>SpeedSettingsMaxHorizontalSpeed</code> in feature <code>MiniDrone</code>
 * Set Max Horizontal speed (only used in case where PilotingSettings_MaxTilt is not used like in hydrofoil mode)
 * @param feature feature owning the commands
 * @param current Current max Horizontal speed in m/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxHorizontalSpeed_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>SpeedSettingsMaxPlaneModeRotationSpeed</code> in feature <code>MiniDrone</code>
 * Set max plane mode rotation speed (only available for wing x)
 * @param feature feature owning the commands
 * @param current Current max plane mode rotation speed in degree/s
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxPlaneModeRotationSpeed_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, float current);

/**
 * @brief Send a command <code>SettingsCutOutMode</code> in feature <code>MiniDrone</code>
 * Set MiniDrone cut out mode
 * @param feature feature owning the commands
 * @param enable Enable cut out mode (1 if is activate, 0 otherwise)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendSettingsCutOutMode_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>GPSControllerLatitudeForRun</code> in feature <code>MiniDrone</code>
 * Set the controller latitude for a run.
 * @param feature feature owning the commands
 * @param latitude Controller latitude in decimal degrees
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLatitudeForRun_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, double latitude);

/**
 * @brief Send a command <code>GPSControllerLongitudeForRun</code> in feature <code>MiniDrone</code>
 * Set the controller longitude for a run.
 * @param feature feature owning the commands
 * @param longitude Controller longitude in decimal degrees
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLongitudeForRun_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, double longitude);

/**
 * @brief Send a command <code>ConfigurationControllerType</code> in feature <code>MiniDrone</code>
 * Set the controller type.
 * @param feature feature owning the commands
 * @param type Controller type like iOS or Android
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendConfigurationControllerType_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, char * type);

/**
 * @brief Send a command <code>ConfigurationControllerName</code> in feature <code>MiniDrone</code>
 * Set the controller name.
 * @param feature feature owning the commands
 * @param name Controller name like com.parrot.freeflight3
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendConfigurationControllerName_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, char * name);

/**
 * @brief Send a command <code>UsbAccessoryLightControl</code> in feature <code>MiniDrone</code>
 * USB Light control cmd.
 * @param feature feature owning the commands
 * @param id Usb accessory id
 * @param mode Usb Light mode.
 * @param intensity Light intensity from 0 (OFF) to 100 (Max intensity). Only used in FIXED mode.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendUsbAccessoryLightControl_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t id, eARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE mode, uint8_t intensity);

/**
 * @brief Send a command <code>UsbAccessoryClawControl</code> in feature <code>MiniDrone</code>
 * USB Claw control cmd.
 * @param feature feature owning the commands
 * @param id Usb accessory id.
 * @param action USB Claw action.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendUsbAccessoryClawControl_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t id, eARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION action);

/**
 * @brief Send a command <code>UsbAccessoryGunControl</code> in feature <code>MiniDrone</code>
 * USB Gun control cmd.
 * @param feature feature owning the commands
 * @param id Usb accessory id
 * @param action USB Gun action.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendUsbAccessoryGunControl_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t id, eARCOMMANDS_MINIDRONE_USBACCESSORY_GUNCONTROL_ACTION action);

/**
 * @brief Send a command <code>RemoteControllerSetPairedRemote</code> in feature <code>MiniDrone</code>
 * Send the address of the remote controller on which the drone should be paired
 * This is used to pair a Tinos controller
 * Where mac address: MSB-MID-LSB.
 * @param feature feature owning the commands
 * @param msb_mac 2 most significant bytes of mac address
 * @param mid_mac 2 middle bytes of mac address
 * @param lsb_mac 2 least significant bytes of mac address
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendRemoteControllerSetPairedRemote_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint16_t msb_mac, uint16_t mid_mac, uint16_t lsb_mac);

/**
 * @brief Send a command <code>VideoSettingsAutorecord</code> in feature <code>MiniDrone</code>
 * Set video automatic recording state.
 * @param feature feature owning the commands
 * @param enable 0: disabled 1: enabled
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendVideoSettingsAutorecord_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>VideoSettingsElectricFrequency</code> in feature <code>MiniDrone</code>
 * Set the electric frequency (Anti-flickering).
 * @param feature feature owning the commands
 * @param frequency Type of the electric frequency.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendVideoSettingsElectricFrequency_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_VIDEOSETTINGS_ELECTRICFREQUENCY_FREQUENCY frequency);

/**
 * @brief Send a command <code>VideoSettingsVideoResolution</code> in feature <code>MiniDrone</code>
 * Set video streaming and recording resolution.
 * @param feature feature owning the commands
 * @param type Video resolution type.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendVideoSettingsVideoResolution_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_VIDEOSETTINGS_VIDEORESOLUTION_TYPE type);

/**
 * @brief Send a command <code>MinicamPicture</code> in feature <code>MiniDrone</code>
 * Take picture.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendMinicamPicture_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Send a command <code>MinicamVideo</code> in feature <code>MiniDrone</code>
 * Start/Stop video recording.
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendMinicamVideo_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCOMMANDS_MINIDRONE_MINICAM_VIDEO_RECORD record);

/**
 * @brief Send a command <code>MinicamMassStorageFormat</code> in feature <code>MiniDrone</code>
 * Format mass storage.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_MiniDrone_SendMinicamMassStorageFormat_t) (ARCONTROLLER_FEATURE_MiniDrone_t *feature);

/**
 * @brief Feature controller allow to send command related of MiniDrone Feature.
 * All MiniDrone-only commands
 */
struct ARCONTROLLER_FEATURE_MiniDrone_t
{
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingFlatTrim_t sendPilotingFlatTrim;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingTakeOff_t sendPilotingTakeOff;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingPCMD_t sendPilotingPCMD;
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMD_t setPilotingPCMD;
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDFlag_t setPilotingPCMDFlag; /**< Send a command <code>PilotingPCMD</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDRoll_t setPilotingPCMDRoll; /**< Send a command <code>PilotingPCMD</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDPitch_t setPilotingPCMDPitch; /**< Send a command <code>PilotingPCMD</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDYaw_t setPilotingPCMDYaw; /**< Send a command <code>PilotingPCMD</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDGaz_t setPilotingPCMDGaz; /**< Send a command <code>PilotingPCMD</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SetPilotingPCMDTimestamp_t setPilotingPCMDTimestamp; /**< Send a command <code>PilotingPCMD</code> in feature <code>MiniDrone</code>. */
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingLanding_t sendPilotingLanding;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingEmergency_t sendPilotingEmergency;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingAutoTakeOffMode_t sendPilotingAutoTakeOffMode;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingFlyingMode_t sendPilotingFlyingMode;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingPlaneGearBox_t sendPilotingPlaneGearBox;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingTogglePilotingMode_t sendPilotingTogglePilotingMode;
    ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsFlip_t sendAnimationsFlip;
    ARCONTROLLER_FEATURE_MiniDrone_SendAnimationsCap_t sendAnimationsCap;
    ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPicture_t sendMediaRecordPicture;
    ARCONTROLLER_FEATURE_MiniDrone_SendMediaRecordPictureV2_t sendMediaRecordPictureV2;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxAltitude_t sendPilotingSettingsMaxAltitude;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxTilt_t sendPilotingSettingsMaxTilt;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsBankedTurn_t sendPilotingSettingsBankedTurn;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsMaxThrottle_t sendPilotingSettingsMaxThrottle;
    ARCONTROLLER_FEATURE_MiniDrone_SendPilotingSettingsPreferredPilotingMode_t sendPilotingSettingsPreferredPilotingMode;
    ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxVerticalSpeed_t sendSpeedSettingsMaxVerticalSpeed;
    ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxRotationSpeed_t sendSpeedSettingsMaxRotationSpeed;
    ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsWheels_t sendSpeedSettingsWheels;
    ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxHorizontalSpeed_t sendSpeedSettingsMaxHorizontalSpeed;
    ARCONTROLLER_FEATURE_MiniDrone_SendSpeedSettingsMaxPlaneModeRotationSpeed_t sendSpeedSettingsMaxPlaneModeRotationSpeed;
    ARCONTROLLER_FEATURE_MiniDrone_SendSettingsCutOutMode_t sendSettingsCutOutMode;
    ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLatitudeForRun_t sendGPSControllerLatitudeForRun;
    ARCONTROLLER_FEATURE_MiniDrone_SendGPSControllerLongitudeForRun_t sendGPSControllerLongitudeForRun;
    ARCONTROLLER_FEATURE_MiniDrone_SendConfigurationControllerType_t sendConfigurationControllerType;
    ARCONTROLLER_FEATURE_MiniDrone_SendConfigurationControllerName_t sendConfigurationControllerName;
    ARCONTROLLER_FEATURE_MiniDrone_SendUsbAccessoryLightControl_t sendUsbAccessoryLightControl;
    ARCONTROLLER_FEATURE_MiniDrone_SendUsbAccessoryClawControl_t sendUsbAccessoryClawControl;
    ARCONTROLLER_FEATURE_MiniDrone_SendUsbAccessoryGunControl_t sendUsbAccessoryGunControl;
    ARCONTROLLER_FEATURE_MiniDrone_SendRemoteControllerSetPairedRemote_t sendRemoteControllerSetPairedRemote;
    ARCONTROLLER_FEATURE_MiniDrone_SendVideoSettingsAutorecord_t sendVideoSettingsAutorecord;
    ARCONTROLLER_FEATURE_MiniDrone_SendVideoSettingsElectricFrequency_t sendVideoSettingsElectricFrequency;
    ARCONTROLLER_FEATURE_MiniDrone_SendVideoSettingsVideoResolution_t sendVideoSettingsVideoResolution;
    ARCONTROLLER_FEATURE_MiniDrone_SendMinicamPicture_t sendMinicamPicture;
    ARCONTROLLER_FEATURE_MiniDrone_SendMinicamVideo_t sendMinicamVideo;
    ARCONTROLLER_FEATURE_MiniDrone_SendMinicamMassStorageFormat_t sendMinicamMassStorageFormat;
    ARCONTROLLER_FEATURE_MiniDrone_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_MiniDrone_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_MiniDrone_SetNetworkController (ARCONTROLLER_FEATURE_MiniDrone_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_MiniDrone_GetCommandElements (ARCONTROLLER_FEATURE_MiniDrone_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE powerup --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Powerup_t.
 */
typedef struct ARCONTROLLER_FEATURE_Powerup_Private_t ARCONTROLLER_FEATURE_Powerup_Private_t;

/**
 * @brief Feature controller allow to send command related of powerup Feature.
 * All commands specific to the Power Up.
 */
typedef struct ARCONTROLLER_FEATURE_Powerup_t ARCONTROLLER_FEATURE_Powerup_t;

/**
 * @brief Create a new powerup Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_Powerup_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_Powerup_SetNetworkController().
 * @param[out] error executing error.
 * @return the new powerup Feature Controller
 * @see ARCONTROLLER_FEATURE_Powerup_Delete
 */
ARCONTROLLER_FEATURE_Powerup_t *ARCONTROLLER_FEATURE_Powerup_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the powerup Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_Powerup_New
 */
void ARCONTROLLER_FEATURE_Powerup_Delete (ARCONTROLLER_FEATURE_Powerup_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_RegisterARCommands (ARCONTROLLER_FEATURE_Powerup_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_UnregisterARCommands (ARCONTROLLER_FEATURE_Powerup_t *feature);

/**
 * @brief Get the dictionay of the powerup Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_Powerup_GetDictionary (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>Powerup</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_Powerup_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_AddCallback (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>Powerup</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_RemoveCallback (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateAlertStateChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE; /**< Key of the argument </code>state</code> of event <code>PilotingStateFlyingStateChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE; /**< Key of the argument </code>mode</code> of event <code>PilotingStateMotorModeChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSTATE_ATTITUDECHANGED_ROLL; /**< Key of the argument </code>roll</code> of event <code>PilotingStateAttitudeChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSTATE_ATTITUDECHANGED_PITCH; /**< Key of the argument </code>pitch</code> of event <code>PilotingStateAttitudeChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSTATE_ATTITUDECHANGED_YAW; /**< Key of the argument </code>yaw</code> of event <code>PilotingStateAttitudeChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSTATE_ALTITUDECHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>PilotingStateAltitudeChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING; /**< Key of the argument </code>setting</code> of event <code>PilotingSettingsStateSettingChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_CURRENT; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateSettingChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_MIN; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateSettingChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_MAX; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateSettingChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE; /**< Key of the argument </code>state</code> of event <code>MediaRecordStateVideoStateChangedV2</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordStateVideoStateChangedV2</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventVideoEventChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventVideoEventChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_SSID; /**< Key of the argument </code>ssid</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_RSSI; /**< Key of the argument </code>rssi</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>Powerup</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>Powerup</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_IN_OR_OUT; /**< Key of the argument </code>in_or_out</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>Powerup</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_NETWORKSTATE_LINKQUALITYCHANGED_QUALITY; /**< Key of the argument </code>quality</code> of event <code>NetworkStateLinkQualityChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>MediaStreamingStateVideoEnableChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_VIDEOSETTINGSSTATE_AUTORECORDCHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>VideoSettingsStateAutorecordChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE; /**< Key of the argument </code>mode</code> of event <code>VideoSettingsStateVideoModeChanged</code> in feature <code>Powerup</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_POWERUP_SOUNDSSTATE_BUZZCHANGED_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>SoundsStateBuzzChanged</code> in feature <code>Powerup</code> */

/**
 * @brief Send a command <code>PilotingPCMD</code> in feature <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param throttle Throttle value [0:100].
 * @param roll Yaw-roll value. [-100:100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendPilotingPCMD_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t flag, uint8_t throttle, int8_t roll);

/**
 * @brief Set the parameters to send through the command <code>PilotingPCMD</code> in project <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * @param throttle Throttle value [0:100].
 * @param roll Yaw-roll value. [-100:100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMD_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t flag, uint8_t throttle, int8_t roll);

/**
 * @brief Send the a command <code>PilotingPCMD</code> in project <code>Powerup</code> with the parame set beforehand 
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param cmdBuffer buffer to store the command
 * @param cmdBufferSize size of the buffer
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_Powerup_SendPilotingPCMDStruct (ARCONTROLLER_FEATURE_Powerup_t *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);

/**
 * @brief Set flag sent through the command <code>PilotingPCMD</code> in project <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param flag Boolean for "touch screen".
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMDFlag_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t flag);

/**
 * @brief Set throttle sent through the command <code>PilotingPCMD</code> in project <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param throttle Throttle value [0:100].
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMDThrottle_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t throttle);

/**
 * @brief Set roll sent through the command <code>PilotingPCMD</code> in project <code>Powerup</code>
 * Ask the Power Up speed and turn ratio.
 * @param feature feature owning the commands
 * @param roll Yaw-roll value. [-100:100]
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMDRoll_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, int8_t roll);

/**
 * @brief Send a command <code>PilotingUserTakeOff</code> in feature <code>Powerup</code>
 * Set drone in user take off state
 * @param feature feature owning the commands
 * @param state State of user take off mode - 1 to enter in user take off. - 0 to exit from user take off.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendPilotingUserTakeOff_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t state);

/**
 * @brief Send a command <code>PilotingMotorMode</code> in feature <code>Powerup</code>
 * Motor mode
 * @param feature feature owning the commands
 * @param mode 
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendPilotingMotorMode_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_PILOTING_MOTORMODE_MODE mode);

/**
 * @brief Send a command <code>PilotingSettingsSet</code> in feature <code>Powerup</code>
 * Set the given setting
 * @param feature feature owning the commands
 * @param setting Variety of setting that can be customized
 * @param value value of the given setting
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendPilotingSettingsSet_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING setting, float value);

/**
 * @brief Send a command <code>MediaRecordPictureV2</code> in feature <code>Powerup</code>
 * Take picture
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendMediaRecordPictureV2_t) (ARCONTROLLER_FEATURE_Powerup_t *feature);

/**
 * @brief Send a command <code>MediaRecordVideoV2</code> in feature <code>Powerup</code>
 * Video record
 * @param feature feature owning the commands
 * @param record Command to record video
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendMediaRecordVideoV2_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_MEDIARECORD_VIDEOV2_RECORD record);

/**
 * @brief Send a command <code>NetworkSettingsWifiSelection</code> in feature <code>Powerup</code>
 * Auto-select channel of choosen band
 * @param feature feature owning the commands
 * @param type The type of wifi selection (auto, manual)
 * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 * @param channel The channel (not used in auto mode)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendNetworkSettingsWifiSelection_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>NetworkWifiScan</code> in feature <code>Powerup</code>
 * Launches wifi network scan
 * @param feature feature owning the commands
 * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendNetworkWifiScan_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND band);

/**
 * @brief Send a command <code>NetworkWifiAuthChannel</code> in feature <code>Powerup</code>
 * Controller inquire the list of authorized wifi channels.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendNetworkWifiAuthChannel_t) (ARCONTROLLER_FEATURE_Powerup_t *feature);

/**
 * @brief Send a command <code>MediaStreamingVideoEnable</code> in feature <code>Powerup</code>
 * Enable/disable video streaming.
 * @param feature feature owning the commands
 * @param enable 1 to enable, 0 to disable.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendMediaStreamingVideoEnable_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>VideoSettingsAutorecord</code> in feature <code>Powerup</code>
 * Set video automatic recording state.
 * @param feature feature owning the commands
 * @param enable 0: Disabled 1: Enabled.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendVideoSettingsAutorecord_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>VideoSettingsVideoMode</code> in feature <code>Powerup</code>
 * Set video mode
 * @param feature feature owning the commands
 * @param mode Video mode
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendVideoSettingsVideoMode_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCOMMANDS_POWERUP_VIDEOSETTINGS_VIDEOMODE_MODE mode);

/**
 * @brief Send a command <code>SoundsBuzz</code> in feature <code>Powerup</code>
 * Enable/disable the buzzer sound
 * @param feature feature owning the commands
 * @param enable 0: Disabled 1: Enabled.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Powerup_SendSoundsBuzz_t) (ARCONTROLLER_FEATURE_Powerup_t *feature, uint8_t enable);

/**
 * @brief Feature controller allow to send command related of powerup Feature.
 * All commands specific to the Power Up.
 */
struct ARCONTROLLER_FEATURE_Powerup_t
{
    ARCONTROLLER_FEATURE_Powerup_SendPilotingPCMD_t sendPilotingPCMD;
    ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMD_t setPilotingPCMD;
    ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMDFlag_t setPilotingPCMDFlag; /**< Send a command <code>PilotingPCMD</code> in feature <code>Powerup</code>. */
    ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMDThrottle_t setPilotingPCMDThrottle; /**< Send a command <code>PilotingPCMD</code> in feature <code>Powerup</code>. */
    ARCONTROLLER_FEATURE_Powerup_SetPilotingPCMDRoll_t setPilotingPCMDRoll; /**< Send a command <code>PilotingPCMD</code> in feature <code>Powerup</code>. */
    ARCONTROLLER_FEATURE_Powerup_SendPilotingUserTakeOff_t sendPilotingUserTakeOff;
    ARCONTROLLER_FEATURE_Powerup_SendPilotingMotorMode_t sendPilotingMotorMode;
    ARCONTROLLER_FEATURE_Powerup_SendPilotingSettingsSet_t sendPilotingSettingsSet;
    ARCONTROLLER_FEATURE_Powerup_SendMediaRecordPictureV2_t sendMediaRecordPictureV2;
    ARCONTROLLER_FEATURE_Powerup_SendMediaRecordVideoV2_t sendMediaRecordVideoV2;
    ARCONTROLLER_FEATURE_Powerup_SendNetworkSettingsWifiSelection_t sendNetworkSettingsWifiSelection;
    ARCONTROLLER_FEATURE_Powerup_SendNetworkWifiScan_t sendNetworkWifiScan;
    ARCONTROLLER_FEATURE_Powerup_SendNetworkWifiAuthChannel_t sendNetworkWifiAuthChannel;
    ARCONTROLLER_FEATURE_Powerup_SendMediaStreamingVideoEnable_t sendMediaStreamingVideoEnable;
    ARCONTROLLER_FEATURE_Powerup_SendVideoSettingsAutorecord_t sendVideoSettingsAutorecord;
    ARCONTROLLER_FEATURE_Powerup_SendVideoSettingsVideoMode_t sendVideoSettingsVideoMode;
    ARCONTROLLER_FEATURE_Powerup_SendSoundsBuzz_t sendSoundsBuzz;
    ARCONTROLLER_FEATURE_Powerup_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_Powerup_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Powerup_SetNetworkController (ARCONTROLLER_FEATURE_Powerup_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Powerup_GetCommandElements (ARCONTROLLER_FEATURE_Powerup_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE rc --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Rc_t.
 */
typedef struct ARCONTROLLER_FEATURE_Rc_Private_t ARCONTROLLER_FEATURE_Rc_Private_t;

/**
 * @brief Feature controller allow to send command related of rc Feature.
 * All commands/events related to Calibration and Mapping of RadioCommands
 */
typedef struct ARCONTROLLER_FEATURE_Rc_t ARCONTROLLER_FEATURE_Rc_t;

/**
 * @brief Create a new rc Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_Rc_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_Rc_SetNetworkController().
 * @param[out] error executing error.
 * @return the new rc Feature Controller
 * @see ARCONTROLLER_FEATURE_Rc_Delete
 */
ARCONTROLLER_FEATURE_Rc_t *ARCONTROLLER_FEATURE_Rc_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the rc Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_Rc_New
 */
void ARCONTROLLER_FEATURE_Rc_Delete (ARCONTROLLER_FEATURE_Rc_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_RegisterARCommands (ARCONTROLLER_FEATURE_Rc_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_UnregisterARCommands (ARCONTROLLER_FEATURE_Rc_t *feature);

/**
 * @brief Get the dictionay of the rc Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_Rc_GetDictionary (ARCONTROLLER_FEATURE_Rc_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>Rc</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_Rc_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_AddCallback (ARCONTROLLER_FEATURE_Rc_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>Rc</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_RemoveCallback (ARCONTROLLER_FEATURE_Rc_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_RECEIVERSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>ReceiverState</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_RECEIVERSTATE_PROTOCOL; /**< Key of the argument </code>protocol</code> of event <code>ReceiverState</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_RECEIVERSTATE_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>ReceiverState</code> in feature <code>Rc</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CHANNELSMONITORSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>ChannelsMonitorState</code> in feature <code>Rc</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CHANNELVALUE_ID; /**< Key of the argument </code>id</code> of event <code>ChannelValue</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CHANNELVALUE_ACTION; /**< Key of the argument </code>action</code> of event <code>ChannelValue</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CHANNELVALUE_VALUE; /**< Key of the argument </code>value</code> of event <code>ChannelValue</code> in feature <code>Rc</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CALIBRATIONSTATE_CALIBRATION_TYPE; /**< Key of the argument </code>calibration_type</code> of event <code>CalibrationState</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CALIBRATIONSTATE_CHANNEL_ACTION; /**< Key of the argument </code>channel_action</code> of event <code>CalibrationState</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CALIBRATIONSTATE_REQUIRED; /**< Key of the argument </code>required</code> of event <code>CalibrationState</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CALIBRATIONSTATE_CALIBRATED; /**< Key of the argument </code>calibrated</code> of event <code>CalibrationState</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CALIBRATIONSTATE_NEUTRAL_CALIBRATED; /**< Key of the argument </code>neutral_calibrated</code> of event <code>CalibrationState</code> in feature <code>Rc</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CHANNELACTIONITEM_ACTION; /**< Key of the argument </code>action</code> of event <code>ChannelActionItem</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CHANNELACTIONITEM_SUPPORTED_TYPE; /**< Key of the argument </code>supported_type</code> of event <code>ChannelActionItem</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CHANNELACTIONITEM_CALIBRATED_TYPE; /**< Key of the argument </code>calibrated_type</code> of event <code>ChannelActionItem</code> in feature <code>Rc</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_RC_CHANNELACTIONITEM_INVERTED; /**< Key of the argument </code>inverted</code> of event <code>ChannelActionItem</code> in feature <code>Rc</code> */

/**
 * @brief Send a command <code>MonitorChannels</code> in feature <code>Rc</code>
 * Enable or Disable RC channels monitoring.
 * If enable, drone will send periodically rc channel value
 * events.
 * @param feature feature owning the commands
 * @param enable 1 for enable / 0 to disable
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Rc_SendMonitorChannels_t) (ARCONTROLLER_FEATURE_Rc_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>StartCalibration</code> in feature <code>Rc</code>
 * Start a calibration.
 * @param feature feature owning the commands
 * @param calibration_type Type of calibration. Calibration type.
 * @param channel_action Channel action. only used when calibration_type=min_max. Channel action.
 * @param channel_type Channel type. only used when calibration_type=min_max. Channel physical type.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Rc_SendStartCalibration_t) (ARCONTROLLER_FEATURE_Rc_t *feature, eARCOMMANDS_RC_CALIBRATION_TYPE calibration_type, eARCOMMANDS_RC_CHANNEL_ACTION channel_action, eARCOMMANDS_RC_CHANNEL_TYPE channel_type);

/**
 * @brief Send a command <code>InvertChannel</code> in feature <code>Rc</code>
 * Invert a RC channel values
 * @param feature feature owning the commands
 * @param action Channel action. Channel action.
 * @param flag 1 to invert channel 0 to restore channel.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Rc_SendInvertChannel_t) (ARCONTROLLER_FEATURE_Rc_t *feature, eARCOMMANDS_RC_CHANNEL_ACTION action, uint8_t flag);

/**
 * @brief Send a command <code>AbortCalibration</code> in feature <code>Rc</code>
 * Abort current calibration.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Rc_SendAbortCalibration_t) (ARCONTROLLER_FEATURE_Rc_t *feature);

/**
 * @brief Send a command <code>ResetCalibration</code> in feature <code>Rc</code>
 * Reset calibration to default values.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Rc_SendResetCalibration_t) (ARCONTROLLER_FEATURE_Rc_t *feature);

/**
 * @brief Send a command <code>EnableReceiver</code> in feature <code>Rc</code>
 * Enable or disable RC receiver.
 * If enable, drone will apply values sent by RC receiver.
 * @param feature feature owning the commands
 * @param enable 1 for enable / 0 to disable
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Rc_SendEnableReceiver_t) (ARCONTROLLER_FEATURE_Rc_t *feature, uint8_t enable);

/**
 * @brief Feature controller allow to send command related of rc Feature.
 * All commands/events related to Calibration and Mapping of RadioCommands
 */
struct ARCONTROLLER_FEATURE_Rc_t
{
    ARCONTROLLER_FEATURE_Rc_SendMonitorChannels_t sendMonitorChannels;
    ARCONTROLLER_FEATURE_Rc_SendStartCalibration_t sendStartCalibration;
    ARCONTROLLER_FEATURE_Rc_SendInvertChannel_t sendInvertChannel;
    ARCONTROLLER_FEATURE_Rc_SendAbortCalibration_t sendAbortCalibration;
    ARCONTROLLER_FEATURE_Rc_SendResetCalibration_t sendResetCalibration;
    ARCONTROLLER_FEATURE_Rc_SendEnableReceiver_t sendEnableReceiver;
    ARCONTROLLER_FEATURE_Rc_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_Rc_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Rc_SetNetworkController (ARCONTROLLER_FEATURE_Rc_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Rc_GetCommandElements (ARCONTROLLER_FEATURE_Rc_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE SkyController --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_SkyController_t.
 */
typedef struct ARCONTROLLER_FEATURE_SkyController_Private_t ARCONTROLLER_FEATURE_SkyController_Private_t;

/**
 * @brief Feature controller allow to send command related of SkyController Feature.
 * All SkyController-only commands
 */
typedef struct ARCONTROLLER_FEATURE_SkyController_t ARCONTROLLER_FEATURE_SkyController_t;

/**
 * @brief Create a new SkyController Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_SkyController_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_SkyController_SetNetworkController().
 * @param[out] error executing error.
 * @return the new SkyController Feature Controller
 * @see ARCONTROLLER_FEATURE_SkyController_Delete
 */
ARCONTROLLER_FEATURE_SkyController_t *ARCONTROLLER_FEATURE_SkyController_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the SkyController Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_SkyController_New
 */
void ARCONTROLLER_FEATURE_SkyController_Delete (ARCONTROLLER_FEATURE_SkyController_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_RegisterARCommands (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_UnregisterARCommands (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Get the dictionay of the SkyController Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_SkyController_GetDictionary (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>SkyController</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_SkyController_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_AddCallback (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>SkyController</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_RemoveCallback (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_BSSID; /**< Key of the argument </code>bssid</code> of event <code>WifiStateWifiList</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_SSID; /**< Key of the argument </code>ssid</code> of event <code>WifiStateWifiList</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_SECURED; /**< Key of the argument </code>secured</code> of event <code>WifiStateWifiList</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_SAVED; /**< Key of the argument </code>saved</code> of event <code>WifiStateWifiList</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_RSSI; /**< Key of the argument </code>rssi</code> of event <code>WifiStateWifiList</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFILIST_FREQUENCY; /**< Key of the argument </code>frequency</code> of event <code>WifiStateWifiList</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_SSID; /**< Key of the argument </code>ssid</code> of event <code>WifiStateConnexionChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS; /**< Key of the argument </code>status</code> of event <code>WifiStateConnexionChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>WifiStateWifiAuthChannelListChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>WifiStateWifiAuthChannelListChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_IN_OR_OUT; /**< Key of the argument </code>in_or_out</code> of event <code>WifiStateWifiAuthChannelListChanged</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFISIGNALCHANGED_LEVEL; /**< Key of the argument </code>level</code> of event <code>WifiStateWifiSignalChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND; /**< Key of the argument </code>band</code> of event <code>WifiStateWifiAuthChannelListChangedV2</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>WifiStateWifiAuthChannelListChangedV2</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_IN_OR_OUT; /**< Key of the argument </code>in_or_out</code> of event <code>WifiStateWifiAuthChannelListChangedV2</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFICOUNTRYCHANGED_CODE; /**< Key of the argument </code>code</code> of event <code>WifiStateWifiCountryChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT; /**< Key of the argument </code>environment</code> of event <code>WifiStateWifiEnvironmentChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_DEVICESTATE_DEVICELIST_NAME; /**< Key of the argument </code>name</code> of event <code>DeviceStateDeviceList</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS; /**< Key of the argument </code>status</code> of event <code>DeviceStateConnexionChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_DEVICENAME; /**< Key of the argument </code>deviceName</code> of event <code>DeviceStateConnexionChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_DEVICEPRODUCTID; /**< Key of the argument </code>deviceProductID</code> of event <code>DeviceStateConnexionChanged</code> in feature <code>SkyController</code> */



extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SETTINGSSTATE_PRODUCTSERIALCHANGED_SERIALNUMBER; /**< Key of the argument </code>serialNumber</code> of event <code>SettingsStateProductSerialChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT; /**< Key of the argument </code>variant</code> of event <code>SettingsStateProductVariantChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVERSIONCHANGED_SOFTWARE; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductVersionChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVERSIONCHANGED_HARDWARE; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductVersionChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SETTINGSSTATE_CPUID_ID; /**< Key of the argument </code>id</code> of event <code>SettingsStateCPUID</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYCHANGED_PERCENT; /**< Key of the argument </code>percent</code> of event <code>SkyControllerStateBatteryChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSFIXCHANGED_FIXED; /**< Key of the argument </code>fixed</code> of event <code>SkyControllerStateGpsFixChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSPOSITIONCHANGED_LATITUDE; /**< Key of the argument </code>latitude</code> of event <code>SkyControllerStateGpsPositionChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSPOSITIONCHANGED_LONGITUDE; /**< Key of the argument </code>longitude</code> of event <code>SkyControllerStateGpsPositionChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSPOSITIONCHANGED_ALTITUDE; /**< Key of the argument </code>altitude</code> of event <code>SkyControllerStateGpsPositionChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_GPSPOSITIONCHANGED_HEADING; /**< Key of the argument </code>heading</code> of event <code>SkyControllerStateGpsPositionChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE; /**< Key of the argument </code>state</code> of event <code>SkyControllerStateBatteryState</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_ATTITUDECHANGED_Q0; /**< Key of the argument </code>q0</code> of event <code>SkyControllerStateAttitudeChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_ATTITUDECHANGED_Q1; /**< Key of the argument </code>q1</code> of event <code>SkyControllerStateAttitudeChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_ATTITUDECHANGED_Q2; /**< Key of the argument </code>q2</code> of event <code>SkyControllerStateAttitudeChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_SKYCONTROLLERSTATE_ATTITUDECHANGED_Q3; /**< Key of the argument </code>q3</code> of event <code>SkyControllerStateAttitudeChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_ACCESSPOINTSSIDCHANGED_SSID; /**< Key of the argument </code>ssid</code> of event <code>AccessPointSettingsStateAccessPointSSIDChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_ACCESSPOINTCHANNELCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>AccessPointSettingsStateAccessPointChannelChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>AccessPointSettingsStateWifiSelectionChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>AccessPointSettingsStateWifiSelectionChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>AccessPointSettingsStateWifiSelectionChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE; /**< Key of the argument </code>security_type</code> of event <code>AccessPointSettingsStateWifiSecurityChanged</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_KEY; /**< Key of the argument </code>key</code> of event <code>AccessPointSettingsStateWifiSecurityChanged</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE; /**< Key of the argument </code>type</code> of event <code>GamepadInfosStateGamepadControl</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_ID; /**< Key of the argument </code>id</code> of event <code>GamepadInfosStateGamepadControl</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_NAME; /**< Key of the argument </code>name</code> of event <code>GamepadInfosStateGamepadControl</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_BUTTONMAPPINGSSTATE_CURRENTBUTTONMAPPINGS_KEY_ID; /**< Key of the argument </code>key_id</code> of event <code>ButtonMappingsStateCurrentButtonMappings</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_BUTTONMAPPINGSSTATE_CURRENTBUTTONMAPPINGS_MAPPING_UID; /**< Key of the argument </code>mapping_uid</code> of event <code>ButtonMappingsStateCurrentButtonMappings</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_BUTTONMAPPINGSSTATE_AVAILABLEBUTTONMAPPINGS_MAPPING_UID; /**< Key of the argument </code>mapping_uid</code> of event <code>ButtonMappingsStateAvailableButtonMappings</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_BUTTONMAPPINGSSTATE_AVAILABLEBUTTONMAPPINGS_NAME; /**< Key of the argument </code>name</code> of event <code>ButtonMappingsStateAvailableButtonMappings</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISMAPPINGSSTATE_CURRENTAXISMAPPINGS_AXIS_ID; /**< Key of the argument </code>axis_id</code> of event <code>AxisMappingsStateCurrentAxisMappings</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISMAPPINGSSTATE_CURRENTAXISMAPPINGS_MAPPING_UID; /**< Key of the argument </code>mapping_uid</code> of event <code>AxisMappingsStateCurrentAxisMappings</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISMAPPINGSSTATE_AVAILABLEAXISMAPPINGS_MAPPING_UID; /**< Key of the argument </code>mapping_uid</code> of event <code>AxisMappingsStateAvailableAxisMappings</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISMAPPINGSSTATE_AVAILABLEAXISMAPPINGS_NAME; /**< Key of the argument </code>name</code> of event <code>AxisMappingsStateAvailableAxisMappings</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISFILTERSSTATE_CURRENTAXISFILTERS_AXIS_ID; /**< Key of the argument </code>axis_id</code> of event <code>AxisFiltersStateCurrentAxisFilters</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISFILTERSSTATE_CURRENTAXISFILTERS_FILTER_UID_OR_BUILDER; /**< Key of the argument </code>filter_uid_or_builder</code> of event <code>AxisFiltersStateCurrentAxisFilters</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISFILTERSSTATE_PRESETAXISFILTERS_FILTER_UID; /**< Key of the argument </code>filter_uid</code> of event <code>AxisFiltersStatePresetAxisFilters</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_AXISFILTERSSTATE_PRESETAXISFILTERS_NAME; /**< Key of the argument </code>name</code> of event <code>AxisFiltersStatePresetAxisFilters</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE; /**< Key of the argument </code>source</code> of event <code>CoPilotingStatePilotingSource</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS; /**< Key of the argument </code>status</code> of event <code>CalibrationStateMagnetoCalibrationState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_X_QUALITY; /**< Key of the argument </code>X_Quality</code> of event <code>CalibrationStateMagnetoCalibrationState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_Y_QUALITY; /**< Key of the argument </code>Y_Quality</code> of event <code>CalibrationStateMagnetoCalibrationState</code> in feature <code>SkyController</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_Z_QUALITY; /**< Key of the argument </code>Z_Quality</code> of event <code>CalibrationStateMagnetoCalibrationState</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONQUALITYUPDATESSTATE_ENABLED; /**< Key of the argument </code>enabled</code> of event <code>CalibrationStateMagnetoCalibrationQualityUpdatesState</code> in feature <code>SkyController</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE; /**< Key of the argument </code>state</code> of event <code>CalibrationStateMagnetoCalibrationStateV2</code> in feature <code>SkyController</code> */


extern const char *ARCONTROLLER_DICTIONARY_KEY_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON; /**< Key of the argument </code>reason</code> of event <code>CommonEventStateShutdown</code> in feature <code>SkyController</code> */

/**
 * @brief Send a command <code>WifiRequestWifiList</code> in feature <code>SkyController</code>
 * After recieving this command, the SkyController will do a network scan to get the wifi list.
 * Communication with the drone is stopped during the network scan, so the controller should avoid sending this command during flight.
 * The controller should clear the local wifi list before sending this command.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiRequestWifiList_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>WifiRequestCurrentWifi</code> in feature <code>SkyController</code>
 * This is a synchronization command. The SkyController will automatically send its current wifi info when any data changes, so this command should only be used when connecting, in order to get an initial state.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiRequestCurrentWifi_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>WifiConnectToWifi</code> in feature <code>SkyController</code>
 * The network should be a visible network retrieved from the [WifiList](#4-0-0) event.
 * If the network is secured, then the passphrase must be set. For non-secure network, the passphrase argument is ignored.
 * @param feature feature owning the commands
 * @param bssid Wifi bssid
 * @param ssid Wifi ssid
 * @param passphrase Wifi passphrase
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiConnectToWifi_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, char * bssid, char * ssid, char * passphrase);

/**
 * @brief Send a command <code>WifiForgetWifi</code> in feature <code>SkyController</code>
 * Removes the network from the saved network list.
 * If the network is the current network, then the SkyController will be disconnected first.
 * @param feature feature owning the commands
 * @param ssid Wifi ssid
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiForgetWifi_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, char * ssid);

/**
 * @brief Send a command <code>WifiWifiAuthChannel</code> in feature <code>SkyController</code>
 * Requests the list of authorized wifi channels for the current country/regulatory domain.
 * These channels are valid for the [AccessPointChannel](#4-9-1) command.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendWifiWifiAuthChannel_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>DeviceRequestDeviceList</code> in feature <code>SkyController</code>
 * @deprecated
 * This command is deprecated (The SkyController can only see one device at a time, so a device list is not required), and should not be used.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestDeviceList_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>DeviceRequestCurrentDevice</code> in feature <code>SkyController</code>
 * @deprecated
 * This command is deprecated and should not be used.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestCurrentDevice_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>DeviceConnectToDevice</code> in feature <code>SkyController</code>
 * @deprecated
 * This command is deprecated and should not be used.
 * The SkyController will automatically connect to the first visible device on the current wifi network.
 * @param feature feature owning the commands
 * @param deviceName Device name
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendDeviceConnectToDevice_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, char * deviceName);

/**
 * @brief Send a command <code>SettingsAllSettings</code> in feature <code>SkyController</code>
 * Request the controller to send all its settings.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendSettingsAllSettings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>SettingsReset</code> in feature <code>SkyController</code>
 * Reset all settings (i.e. everything except drone pairing).
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendSettingsReset_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>CommonAllStates</code> in feature <code>SkyController</code>
 * Request the controller to send all its states.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCommonAllStates_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AccessPointSettingsAccessPointSSID</code> in feature <code>SkyController</code>
 * Set the SkyController access point SSID.
 * The name will be checked, and can be modified before application. Use the [AccessPointSSIDChanged](#4-10-0) event to get the applied network name.
 * @param feature feature owning the commands
 * @param ssid AccessPoint SSID
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointSSID_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, char * ssid);

/**
 * @brief Send a command <code>AccessPointSettingsAccessPointChannel</code> in feature <code>SkyController</code>
 * @deprecated
 * Set the SkyController access point channel.
 * The channel will be checked, and can be modified before application. Use the [AccessPointChannelChanged](#4-10-1) event to get the applied channel.
 * The list of authorized channels for the current country can be retrived with the [WifiAuthChannel](#4-1-4) command.
 * This command is deprecated. Use the [WifiSelection](#4-9-2) command instead.
 * @param feature feature owning the commands
 * @param channel AccessPoint Channel
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointChannel_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t channel);

/**
 * @brief Send a command <code>AccessPointSettingsWifiSelection</code> in feature <code>SkyController</code>
 * Set the SkyController access point channel.
 * The channel will be checked, and can be modified before application. Use the [WifiSelectionChanged](#4-10-2) event to get the applied channel/band.
 * The list of authorized channels for the current country can be retrived with the [WifiAuthChannel](#4-1-4) command.
 * @param feature feature owning the commands
 * @param type The type of wifi selection (only manual at the moment)
 * @param band The allowed band : 2.4 Ghz or 5 Ghz
 * @param channel The channel
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsWifiSelection_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE type, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>AccessPointSettingsWifiSecurity</code> in feature <code>SkyController</code>
 * Set the SkyController access point security. The key will be checked, and can be refused by the product. In this case, the security will not be changed. Use the [WifiSecurityChanged](#4-10-3) event to get the applied security settings.
 * @param feature feature owning the commands
 * @param security_type The type of security for the network
 * @param key The security key (ignored if security_type is open)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsWifiSecurity_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISECURITY_SECURITY_TYPE security_type, char * key);

/**
 * @brief Send a command <code>CameraResetOrientation</code> in feature <code>SkyController</code>
 * @deprecated
 * This command is deprecated. The same effect can be achieved by sending a [CameraOrientation](#1-1-0) command with values retrieved from the [defaultCameraOrientation](#1-25-1) event.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCameraResetOrientation_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>GamepadInfosGetGamepadControls</code> in feature <code>SkyController</code>
 * This commands allow the application to get a representation of all the mappable controls on the SkyController. Some physical controls might be absent from this list because their function can not be changed.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendGamepadInfosGetGamepadControls_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>ButtonMappingsGetCurrentButtonMappings</code> in feature <code>SkyController</code>
 * The SkyController will send its full button mapping. This command is mainly useful for initial synchronization, as every change to the button mapping (via the [setButtonMapping](#4-12-2) command) will trigger [currentButtonMappings](#4-13-0) events.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetCurrentButtonMappings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>ButtonMappingsGetAvailableButtonMappings</code> in feature <code>SkyController</code>
 * The SkyController will send all the available action that can be mapped on buttons.
 * As this list is static, the controller only need to request this information once.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetAvailableButtonMappings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>ButtonMappingsSetButtonMapping</code> in feature <code>SkyController</code>
 * Any previous mapping for the given button will be removed, as a button can only be mapped to one action.
 * To unmap a button, a NO_ACTION mapping can be used (see the [availableButtonMappings](#4-13-2) event).
 * Some actions can not be mapped to two different buttons at the same time. In this case, the first button will automatically be set to NO_ACTION, and the corresponding [currentButtonMappings](#4-13-0) event will be fired.
 * @param feature feature owning the commands
 * @param key_id The keycode to map
 * @param mapping_uid The mapping to associate with the key
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsSetButtonMapping_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t key_id, char * mapping_uid);

/**
 * @brief Send a command <code>ButtonMappingsDefaultButtonMapping</code> in feature <code>SkyController</code>
 * The default values can change between software versions.
 * The default values are different for Black Edition SkyControllers
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsDefaultButtonMapping_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisMappingsGetCurrentAxisMappings</code> in feature <code>SkyController</code>
 * The SkyController will send its full axis mapping. This command is mainly useful for initial synchronization, as every change to the axis mapping (via the [setAxisMapping](#4-14-2) command) will trigger [currentAxisMappings](#4-15-0) events.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetCurrentAxisMappings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisMappingsGetAvailableAxisMappings</code> in feature <code>SkyController</code>
 * The SkyController will send all the available action that can be mapped on axes.
 * As this list is static, the controller only need to request this information once.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetAvailableAxisMappings_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisMappingsSetAxisMapping</code> in feature <code>SkyController</code>
 * Any previous mapping for the given axis will be removed, as a axis can only be mapped to one action.
 * To unmap a axis, a NO_ACTION mapping can be used (see the [availableAxisMappings](#4-15-2) event).
 * Some actions can not be mapped to two different axes at the same time. In this case, the first axis will automatically be set to NO_ACTION, and the corresponding [currentAxisMappings](#4-15-0) event will be fired.
 * @param feature feature owning the commands
 * @param axis_id The axiscode to map
 * @param mapping_uid The mapping to associate with the axis
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsSetAxisMapping_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t axis_id, char * mapping_uid);

/**
 * @brief Send a command <code>AxisMappingsDefaultAxisMapping</code> in feature <code>SkyController</code>
 * The default values can change between software versions.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsDefaultAxisMapping_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisFiltersGetCurrentAxisFilters</code> in feature <code>SkyController</code>
 * The SkyController will send its full axis filters map. This command is mainly useful for initial synchronization, as every change to the filters map (via the [setAxisFilter](#4-16-2) command) will trigger [currentAxisFilters](#4-17-0) events.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetCurrentAxisFilters_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisFiltersGetPresetAxisFilters</code> in feature <code>SkyController</code>
 * @deprecated
 * The preset list is empty and will never be filled, so this command is flagged as deprecated.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetPresetAxisFilters_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>AxisFiltersSetAxisFilter</code> in feature <code>SkyController</code>
 * A filter modifies the response curve of an axis.
 * As the preset filters list is empty, all filters are to be sent using the builder syntax.
 * 
 * The builder syntax supports two types of filters: Multilinear and Exponential.
 * 
 * Multilinear filters create response curves made of multiple linear segments:
 * * The default filter (ARMF;) is purely linear and create a single segment from the two implicit `[-1; -1]` and `[1; 1]` points.
 * * Additionnal points can be added to the filter with the following syntax: `ARMF;x1>y1;...;xN>yN;`, where all numbers are floating point numbers in range `[-1; 1]`.
 * * Additionnal points **must** respect the following constraints : `x(N)>x(N-1)` and `y(N)>=y(N-1)`.
 * 
 * Exponential filters:
 * * The syntax is `ARXF;CPx;CPy;`, where CPx and CPy are floating point numbers in range `[0; 1]`.
 * * Best results are achieved when `CPx + CPy == 1` and `CPx > CPy`.
 * * If the control point is on the diagonal (i.e. `CPx == CPy`), then the resulting filter will be linear.
 * @param feature feature owning the commands
 * @param axis_id The axiscode to filter
 * @param filter_uid_or_builder The mapping preset to associate with the axis (Or a string to build a new one)
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersSetAxisFilter_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, int32_t axis_id, char * filter_uid_or_builder);

/**
 * @brief Send a command <code>AxisFiltersDefaultAxisFilters</code> in feature <code>SkyController</code>
 * The default values can change between software versions.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersDefaultAxisFilters_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>CoPilotingSetPilotingSource</code> in feature <code>SkyController</code>
 * Change who is piloting the drone.
 * By default, the SkyController is the source of piloting commands, and any connected application (i.e. FreeFlight) can not send [piloting commands](#1-0-2) commands directly to the drone. When the piloting source is set to Controller, the SkyController will forward the controller commands to the drone, and won't send any commands itself.
 * The piloting source is automatically reset to SkyController when the controller is disconnected.
 * @param feature feature owning the commands
 * @param source The new piloting source
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCoPilotingSetPilotingSource_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE source);

/**
 * @brief Send a command <code>CalibrationEnableMagnetoCalibrationQualityUpdates</code> in feature <code>SkyController</code>
 * Asks the SkyController to send (or not) the magneto calibration quality updates.
 * The [MagnetoCalibrationState](#4-23-0) event will always be sent when the status parameters changes, regardless of this setting.
 * @param feature feature owning the commands
 * @param enable Flag to enable the feature: 1 = Enable quality updates 0 = Disable quality updates
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCalibrationEnableMagnetoCalibrationQualityUpdates_t) (ARCONTROLLER_FEATURE_SkyController_t *feature, uint8_t enable);

/**
 * @brief Send a command <code>CalibrationStartCalibration</code> in feature <code>SkyController</code>
 * Asks the SkyController to start a magneto calibration.
 * If the calibration is already started, this command has no effect.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCalibrationStartCalibration_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>CalibrationAbortCalibration</code> in feature <code>SkyController</code>
 * Asks the SkyController to abort an in-progress magneto calibration.
 * If no calibration is in progress, this command has no effect.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendCalibrationAbortCalibration_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Send a command <code>FactoryReset</code> in feature <code>SkyController</code>
 * This command will request a factory reset from the SkyController. *The factory reset procedure implies an automatic reboot*, which will be done immediately after recieving this command.
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_SkyController_SendFactoryReset_t) (ARCONTROLLER_FEATURE_SkyController_t *feature);

/**
 * @brief Feature controller allow to send command related of SkyController Feature.
 * All SkyController-only commands
 */
struct ARCONTROLLER_FEATURE_SkyController_t
{
    ARCONTROLLER_FEATURE_SkyController_SendWifiRequestWifiList_t sendWifiRequestWifiList;
    ARCONTROLLER_FEATURE_SkyController_SendWifiRequestCurrentWifi_t sendWifiRequestCurrentWifi;
    ARCONTROLLER_FEATURE_SkyController_SendWifiConnectToWifi_t sendWifiConnectToWifi;
    ARCONTROLLER_FEATURE_SkyController_SendWifiForgetWifi_t sendWifiForgetWifi;
    ARCONTROLLER_FEATURE_SkyController_SendWifiWifiAuthChannel_t sendWifiWifiAuthChannel;
    ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestDeviceList_t sendDeviceRequestDeviceList;
    ARCONTROLLER_FEATURE_SkyController_SendDeviceRequestCurrentDevice_t sendDeviceRequestCurrentDevice;
    ARCONTROLLER_FEATURE_SkyController_SendDeviceConnectToDevice_t sendDeviceConnectToDevice;
    ARCONTROLLER_FEATURE_SkyController_SendSettingsAllSettings_t sendSettingsAllSettings;
    ARCONTROLLER_FEATURE_SkyController_SendSettingsReset_t sendSettingsReset;
    ARCONTROLLER_FEATURE_SkyController_SendCommonAllStates_t sendCommonAllStates;
    ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointSSID_t sendAccessPointSettingsAccessPointSSID;
    ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsAccessPointChannel_t sendAccessPointSettingsAccessPointChannel;
    ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsWifiSelection_t sendAccessPointSettingsWifiSelection;
    ARCONTROLLER_FEATURE_SkyController_SendAccessPointSettingsWifiSecurity_t sendAccessPointSettingsWifiSecurity;
    ARCONTROLLER_FEATURE_SkyController_SendCameraResetOrientation_t sendCameraResetOrientation;
    ARCONTROLLER_FEATURE_SkyController_SendGamepadInfosGetGamepadControls_t sendGamepadInfosGetGamepadControls;
    ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetCurrentButtonMappings_t sendButtonMappingsGetCurrentButtonMappings;
    ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsGetAvailableButtonMappings_t sendButtonMappingsGetAvailableButtonMappings;
    ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsSetButtonMapping_t sendButtonMappingsSetButtonMapping;
    ARCONTROLLER_FEATURE_SkyController_SendButtonMappingsDefaultButtonMapping_t sendButtonMappingsDefaultButtonMapping;
    ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetCurrentAxisMappings_t sendAxisMappingsGetCurrentAxisMappings;
    ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsGetAvailableAxisMappings_t sendAxisMappingsGetAvailableAxisMappings;
    ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsSetAxisMapping_t sendAxisMappingsSetAxisMapping;
    ARCONTROLLER_FEATURE_SkyController_SendAxisMappingsDefaultAxisMapping_t sendAxisMappingsDefaultAxisMapping;
    ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetCurrentAxisFilters_t sendAxisFiltersGetCurrentAxisFilters;
    ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersGetPresetAxisFilters_t sendAxisFiltersGetPresetAxisFilters;
    ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersSetAxisFilter_t sendAxisFiltersSetAxisFilter;
    ARCONTROLLER_FEATURE_SkyController_SendAxisFiltersDefaultAxisFilters_t sendAxisFiltersDefaultAxisFilters;
    ARCONTROLLER_FEATURE_SkyController_SendCoPilotingSetPilotingSource_t sendCoPilotingSetPilotingSource;
    ARCONTROLLER_FEATURE_SkyController_SendCalibrationEnableMagnetoCalibrationQualityUpdates_t sendCalibrationEnableMagnetoCalibrationQualityUpdates;
    ARCONTROLLER_FEATURE_SkyController_SendCalibrationStartCalibration_t sendCalibrationStartCalibration;
    ARCONTROLLER_FEATURE_SkyController_SendCalibrationAbortCalibration_t sendCalibrationAbortCalibration;
    ARCONTROLLER_FEATURE_SkyController_SendFactoryReset_t sendFactoryReset;
    ARCONTROLLER_FEATURE_SkyController_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_SkyController_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_SkyController_SetNetworkController (ARCONTROLLER_FEATURE_SkyController_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_SkyController_GetCommandElements (ARCONTROLLER_FEATURE_SkyController_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE thermal_cam --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_ThermalCam_t.
 */
typedef struct ARCONTROLLER_FEATURE_ThermalCam_Private_t ARCONTROLLER_FEATURE_ThermalCam_Private_t;

/**
 * @brief Feature controller allow to send command related of thermal_cam Feature.
 * Thermal camera accessory feature
 */
typedef struct ARCONTROLLER_FEATURE_ThermalCam_t ARCONTROLLER_FEATURE_ThermalCam_t;

/**
 * @brief Create a new thermal_cam Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_ThermalCam_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_ThermalCam_SetNetworkController().
 * @param[out] error executing error.
 * @return the new thermal_cam Feature Controller
 * @see ARCONTROLLER_FEATURE_ThermalCam_Delete
 */
ARCONTROLLER_FEATURE_ThermalCam_t *ARCONTROLLER_FEATURE_ThermalCam_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the thermal_cam Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_ThermalCam_New
 */
void ARCONTROLLER_FEATURE_ThermalCam_Delete (ARCONTROLLER_FEATURE_ThermalCam_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ThermalCam_RegisterARCommands (ARCONTROLLER_FEATURE_ThermalCam_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ThermalCam_UnregisterARCommands (ARCONTROLLER_FEATURE_ThermalCam_t *feature);

/**
 * @brief Get the dictionay of the thermal_cam Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_ThermalCam_GetDictionary (ARCONTROLLER_FEATURE_ThermalCam_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>ThermalCam</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_ThermalCam_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ThermalCam_AddCallback (ARCONTROLLER_FEATURE_ThermalCam_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>ThermalCam</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ThermalCam_RemoveCallback (ARCONTROLLER_FEATURE_ThermalCam_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_THERMAL_CAM_CAMERASTATE_CAM_ID; /**< Key of the argument </code>cam_id</code> of event <code>CameraState</code> in feature <code>ThermalCam</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_THERMAL_CAM_CAMERASTATE_STATE; /**< Key of the argument </code>state</code> of event <code>CameraState</code> in feature <code>ThermalCam</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_THERMAL_CAM_SENSITIVITY_CAM_ID; /**< Key of the argument </code>cam_id</code> of event <code>Sensitivity</code> in feature <code>ThermalCam</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_THERMAL_CAM_SENSITIVITY_CURRENT_RANGE; /**< Key of the argument </code>current_range</code> of event <code>Sensitivity</code> in feature <code>ThermalCam</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_THERMAL_CAM_SENSITIVITY_AVAILABLE_RANGES; /**< Key of the argument </code>available_ranges</code> of event <code>Sensitivity</code> in feature <code>ThermalCam</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_THERMAL_CAM_CALIBRATIONINFOS_CAM_ID; /**< Key of the argument </code>cam_id</code> of event <code>CalibrationInfos</code> in feature <code>ThermalCam</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_THERMAL_CAM_CALIBRATIONINFOS_ROLL; /**< Key of the argument </code>roll</code> of event <code>CalibrationInfos</code> in feature <code>ThermalCam</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_THERMAL_CAM_CALIBRATIONINFOS_PITCH; /**< Key of the argument </code>pitch</code> of event <code>CalibrationInfos</code> in feature <code>ThermalCam</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_THERMAL_CAM_CALIBRATIONINFOS_YAW; /**< Key of the argument </code>yaw</code> of event <code>CalibrationInfos</code> in feature <code>ThermalCam</code> */

/**
 * @brief Send a command <code>Activate</code> in feature <code>ThermalCam</code>
 * Activate a given thermal camera.
 * Activating a camera may deactivate others on some drones.
 * @param feature feature owning the commands
 * @param cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ThermalCam_SendActivate_t) (ARCONTROLLER_FEATURE_ThermalCam_t *feature, uint8_t cam_id);

/**
 * @brief Send a command <code>Deactivate</code> in feature <code>ThermalCam</code>
 * Deactivate a given thermal camera.
 * @param feature feature owning the commands
 * @param cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ThermalCam_SendDeactivate_t) (ARCONTROLLER_FEATURE_ThermalCam_t *feature, uint8_t cam_id);

/**
 * @brief Send a command <code>SetSensitivity</code> in feature <code>ThermalCam</code>
 * Set the thermal camera sensitivity range.
 * @param feature feature owning the commands
 * @param cam_id Thermal camera id, as given in the [connected accessories](#1-33-0) event.
 * @param range Thermal range
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_ThermalCam_SendSetSensitivity_t) (ARCONTROLLER_FEATURE_ThermalCam_t *feature, uint8_t cam_id, eARCOMMANDS_THERMAL_CAM_RANGE range);

/**
 * @brief Feature controller allow to send command related of thermal_cam Feature.
 * Thermal camera accessory feature
 */
struct ARCONTROLLER_FEATURE_ThermalCam_t
{
    ARCONTROLLER_FEATURE_ThermalCam_SendActivate_t sendActivate;
    ARCONTROLLER_FEATURE_ThermalCam_SendDeactivate_t sendDeactivate;
    ARCONTROLLER_FEATURE_ThermalCam_SendSetSensitivity_t sendSetSensitivity;
    ARCONTROLLER_FEATURE_ThermalCam_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_ThermalCam_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_ThermalCam_SetNetworkController (ARCONTROLLER_FEATURE_ThermalCam_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_ThermalCam_GetCommandElements (ARCONTROLLER_FEATURE_ThermalCam_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

/*******************************
 * --- FEATURE wifi --- 
 ******************************/

/**
 * @brief Private part of ARCONTROLLER_FEATURE_Wifi_t.
 */
typedef struct ARCONTROLLER_FEATURE_Wifi_Private_t ARCONTROLLER_FEATURE_Wifi_Private_t;

/**
 * @brief Feature controller allow to send command related of wifi Feature.
 * All commands/events related to the Wifi
 */
typedef struct ARCONTROLLER_FEATURE_Wifi_t ARCONTROLLER_FEATURE_Wifi_t;

/**
 * @brief Create a new wifi Feature Controller
 * @warning This function allocate memory
 * @post ARCONTROLLER_FEATURE_Wifi_Delete() must be called to delete the Feature Controller and free the memory allocated.
 * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with ARCONTROLLER_FEATURE_Wifi_SetNetworkController().
 * @param[out] error executing error.
 * @return the new wifi Feature Controller
 * @see ARCONTROLLER_FEATURE_Wifi_Delete
 */
ARCONTROLLER_FEATURE_Wifi_t *ARCONTROLLER_FEATURE_Wifi_New (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);

/**
 * @brief Delete the wifi Feature Controller
 * @warning This function free memory
 * @param feature The feature controller to delete
 * @see ARCONTROLLER_FEATURE_Wifi_New
 */
void ARCONTROLLER_FEATURE_Wifi_Delete (ARCONTROLLER_FEATURE_Wifi_t **feature);

/**
 * @brief Register the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to register
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_RegisterARCommands (ARCONTROLLER_FEATURE_Wifi_t *feature);

/**
 * @brief Unegister the feature controller to be called when the commands are decoded.
 * @param feature The feature controller to unregister
 * return executing error
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_UnregisterARCommands (ARCONTROLLER_FEATURE_Wifi_t *feature);

/**
 * @brief Get the dictionay of the wifi Feature Controller
 * @param feature The feature controller owning the dictionary to get
 * @param[out] error executing error.
 */
ARCONTROLLER_DICTIONARY_COMMANDS_t *ARCONTROLLER_FEATURE_Wifi_GetDictionary (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCONTROLLER_ERROR *error);

/**
 * @brief Add a callback to use when a command in project <code>Wifi</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] callback the callback to add.
 * @param[in] commandKey Key of the command which the callback must be associated.
 * @param[out] error executing error.
 * @param[int] customData custom data given as parameter to the callback.
 * @see ARCONTROLLER_FEATURE_Wifi_RemoveCallback.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_AddCallback (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

/**
 * @brief Remove a callback used when a command in project <code>Wifi</code> is received
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] callback the callback to remove.
 * @param[int] customData The custom data given to the register.
 * @param[out] error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_RemoveCallback (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_CALLBACK_t callback, void *customData);

extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_SCANNEDITEM_SSID; /**< Key of the argument </code>ssid</code> of event <code>ScannedItem</code> in feature <code>Wifi</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_SCANNEDITEM_RSSI; /**< Key of the argument </code>rssi</code> of event <code>ScannedItem</code> in feature <code>Wifi</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_SCANNEDITEM_BAND; /**< Key of the argument </code>band</code> of event <code>ScannedItem</code> in feature <code>Wifi</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_SCANNEDITEM_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>ScannedItem</code> in feature <code>Wifi</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_AUTHORIZEDCHANNEL_BAND; /**< Key of the argument </code>band</code> of event <code>AuthorizedChannel</code> in feature <code>Wifi</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_AUTHORIZEDCHANNEL_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>AuthorizedChannel</code> in feature <code>Wifi</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_AUTHORIZEDCHANNEL_ENVIRONMENT; /**< Key of the argument </code>environment</code> of event <code>AuthorizedChannel</code> in feature <code>Wifi</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_APCHANNELCHANGED_TYPE; /**< Key of the argument </code>type</code> of event <code>ApChannelChanged</code> in feature <code>Wifi</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_APCHANNELCHANGED_BAND; /**< Key of the argument </code>band</code> of event <code>ApChannelChanged</code> in feature <code>Wifi</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_APCHANNELCHANGED_CHANNEL; /**< Key of the argument </code>channel</code> of event <code>ApChannelChanged</code> in feature <code>Wifi</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_SECURITYCHANGED_KEY; /**< Key of the argument </code>key</code> of event <code>SecurityChanged</code> in feature <code>Wifi</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_SECURITYCHANGED_KEY_TYPE; /**< Key of the argument </code>key_type</code> of event <code>SecurityChanged</code> in feature <code>Wifi</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_COUNTRYCHANGED_SELECTION_MODE; /**< Key of the argument </code>selection_mode</code> of event <code>CountryChanged</code> in feature <code>Wifi</code> */
extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_COUNTRYCHANGED_CODE; /**< Key of the argument </code>code</code> of event <code>CountryChanged</code> in feature <code>Wifi</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_ENVIRONMENTCHANGED_ENVIRONMENT; /**< Key of the argument </code>environment</code> of event <code>EnvironmentChanged</code> in feature <code>Wifi</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_RSSICHANGED_RSSI; /**< Key of the argument </code>rssi</code> of event <code>RssiChanged</code> in feature <code>Wifi</code> */

extern const char *ARCONTROLLER_DICTIONARY_KEY_WIFI_SUPPORTEDCOUNTRIES_COUNTRIES; /**< Key of the argument </code>countries</code> of event <code>SupportedCountries</code> in feature <code>Wifi</code> */

/**
 * @brief Send a command <code>Scan</code> in feature <code>Wifi</code>
 * Launches wifi network scan for a given band to get a list of all wifi networks found by the drone.
 * @param feature feature owning the commands
 * @param band The band : 2.4 Ghz or 5 Ghz
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Wifi_SendScan_t) (ARCONTROLLER_FEATURE_Wifi_t *feature, uint8_t band);

/**
 * @brief Send a command <code>UpdateAuthorizedChannels</code> in feature <code>Wifi</code>
 * Get all available Wifi channels.
 * The list of available Wifi channels is related to the country of the drone. You can get this country with the event [WifiCountryChanged](#wifi-CountryChanged).
 * @param feature feature owning the commands
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Wifi_SendUpdateAuthorizedChannels_t) (ARCONTROLLER_FEATURE_Wifi_t *feature);

/**
 * @brief Send a command <code>SetApChannel</code> in feature <code>Wifi</code>
 * Select channel of choosen band to put the drone's access point on this channel.
 * @param feature feature owning the commands
 * @param type The wifi selection type available
 * @param band The band : 2.4 Ghz or 5 Ghz
 * @param channel The channel you want to select. Used only when type is manual.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Wifi_SendSetApChannel_t) (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_SELECTION_TYPE type, eARCOMMANDS_WIFI_BAND band, uint8_t channel);

/**
 * @brief Send a command <code>SetSecurity</code> in feature <code>Wifi</code>
 * Set the wifi security.
 * The security is changed on the next boot.
 * @param feature feature owning the commands
 * @param type The type of wifi security (open, wpa2)
 * @param key The key to secure the network. Not used if type is open
 * @param key_type Type of the key sent
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Wifi_SendSetSecurity_t) (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_SECURITY_TYPE type, char * key, eARCOMMANDS_WIFI_SECURITY_KEY_TYPE key_type);

/**
 * @brief Send a command <code>SetCountry</code> in feature <code>Wifi</code>
 * Set the wifi country.
 * @param feature feature owning the commands
 * @param selection_mode Type of country selection
 * @param code Country code with ISO 3166 format. Not used if automatic is 1.
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Wifi_SendSetCountry_t) (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_COUNTRY_SELECTION selection_mode, char * code);

/**
 * @brief Send a command <code>SetEnvironment</code> in feature <code>Wifi</code>
 * Set indoor or outdoor wifi settings.
 * @param feature feature owning the commands
 * @param environment Type of environment
 * return executing error
 */
typedef eARCONTROLLER_ERROR (*ARCONTROLLER_FEATURE_Wifi_SendSetEnvironment_t) (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCOMMANDS_WIFI_ENVIRONMENT environment);

/**
 * @brief Feature controller allow to send command related of wifi Feature.
 * All commands/events related to the Wifi
 */
struct ARCONTROLLER_FEATURE_Wifi_t
{
    ARCONTROLLER_FEATURE_Wifi_SendScan_t sendScan;
    ARCONTROLLER_FEATURE_Wifi_SendUpdateAuthorizedChannels_t sendUpdateAuthorizedChannels;
    ARCONTROLLER_FEATURE_Wifi_SendSetApChannel_t sendSetApChannel;
    ARCONTROLLER_FEATURE_Wifi_SendSetSecurity_t sendSetSecurity;
    ARCONTROLLER_FEATURE_Wifi_SendSetCountry_t sendSetCountry;
    ARCONTROLLER_FEATURE_Wifi_SendSetEnvironment_t sendSetEnvironment;
    ARCONTROLLER_FEATURE_Wifi_Private_t *privatePart; /**< Private part of ARCONTROLLER_FEATURE_Wifi_t */
};

/**
 * @brief Set a NetworkController to use to send commands.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command which the callback must be unassociated.
 * @param[in] networkController The networkController used to send commands ; must be not NULL.
 * @return error executing error.
 */
eARCONTROLLER_ERROR ARCONTROLLER_FEATURE_Wifi_SetNetworkController (ARCONTROLLER_FEATURE_Wifi_t *feature, ARCONTROLLER_Network_t *networkController);

/**
 * @brief Get the elements of a command received.
 * @param feature The feature controller receiving the command.
 * @param[in] commandKey Key of the command.
 * @param[out] error executing error.
 * @return Element dictionary of the command ; Can be null if an error is occurred.
 */
ARCONTROLLER_DICTIONARY_ELEMENT_t *ARCONTROLLER_Wifi_GetCommandElements (ARCONTROLLER_FEATURE_Wifi_t *feature, eARCONTROLLER_DICTIONARY_KEY commandKey, eARCONTROLLER_ERROR *error);

#endif /* _ARCONTROLLER_FEATURE_H_ */

// END GENERATED CODE
