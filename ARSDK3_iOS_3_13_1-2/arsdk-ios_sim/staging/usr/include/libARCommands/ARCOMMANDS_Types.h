// ARSDK_NO_ENUM_PREPROCESS //
/**
 * @file libARCommands/ARCOMMANDS_Types.h
 * @brief libARCommands types header.
 * This file contains all types declarations needed to use commands
 * @note Autogenerated file
 **/
#ifndef _LIBARCOMMANDS_ARCOMMANDS_TYPES_H_
#define _LIBARCOMMANDS_ARCOMMANDS_TYPES_H_
#include <inttypes.h>

/**
 * @brief Size of the ARCommands header.
 * This is the minimum size of a zero-arg command.
 * The size of a command is equal to this, plus the size
 * of its arguments.
 */
#define ARCOMMANDS_HEADER_SIZE (4)

/**
 * Defined only if the library includes debug commands
 */
#define ARCOMMANDS_HAS_DEBUG_COMMANDS (1)

// Feature generic

/**
 * @brief Flags use by maps and lists
 */
typedef enum
{
    ARCOMMANDS_GENERIC_LIST_FLAGS_FIRST = 0,    ///< indicate it's the first element of the list.
    ARCOMMANDS_GENERIC_LIST_FLAGS_LAST = 1,    ///< indicate it's the last element of the list.
    ARCOMMANDS_GENERIC_LIST_FLAGS_EMPTY = 2,    ///< indicate the list is empty (implies First/Last). All other arguments should be ignored.
    ARCOMMANDS_GENERIC_LIST_FLAGS_REMOVE = 3,    ///< This value should be removed from the existing list.
    ARCOMMANDS_GENERIC_LIST_FLAGS_MAX
} eARCOMMANDS_GENERIC_LIST_FLAGS;

#define ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_FIRST (UINT32_C(1) << ARCOMMANDS_GENERIC_LIST_FLAGS_FIRST)    ///< indicate it's the first element of the list.
#define ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_LAST (UINT32_C(1) << ARCOMMANDS_GENERIC_LIST_FLAGS_LAST)    ///< indicate it's the last element of the list.
#define ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_EMPTY (UINT32_C(1) << ARCOMMANDS_GENERIC_LIST_FLAGS_EMPTY)    ///< indicate the list is empty (implies First/Last). All other arguments should be ignored.
#define ARCOMMANDS_FLAG_GENERIC_LIST_FLAGS_REMOVE (UINT32_C(1) << ARCOMMANDS_GENERIC_LIST_FLAGS_REMOVE)    ///< This value should be removed from the existing list.

// Feature animation

/**
 * @brief Animation type.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_TYPE_NONE = 0,    ///< No animation
    ARCOMMANDS_ANIMATION_TYPE_FLIP = 1,    ///< The drone makes a flip
    ARCOMMANDS_ANIMATION_TYPE_HORIZONTAL_PANORAMA = 2,    ///< The drone horizontaly rotates on itself
    ARCOMMANDS_ANIMATION_TYPE_DRONIE = 3,    ///< The drone flies away on a given distance with a computed angle
    ARCOMMANDS_ANIMATION_TYPE_HORIZONTAL_REVEAL = 4,    ///< The drone starts looking down, then moves forward while slowly looking at the horizon
    ARCOMMANDS_ANIMATION_TYPE_VERTICAL_REVEAL = 5,    ///< The drone starts looking down, then moves up while slowly looking at the horizon.\nWhen it reaches its target altitude, it rotates on itself to do a panorama.
    ARCOMMANDS_ANIMATION_TYPE_SPIRAL = 6,    ///< The drone circles around its target.
    ARCOMMANDS_ANIMATION_TYPE_PARABOLA = 7,    ///< The drone makes a parabola on top of its target and ends on the other side of it.
    ARCOMMANDS_ANIMATION_TYPE_CANDLE = 8,    ///< The drone flies horizontally in direction of the target then flies up.
    ARCOMMANDS_ANIMATION_TYPE_DOLLY_SLIDE = 9,    ///< The drone slides horizontally.
    ARCOMMANDS_ANIMATION_TYPE_MAX
} eARCOMMANDS_ANIMATION_TYPE;

#define ARCOMMANDS_FLAG_ANIMATION_TYPE_NONE (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_NONE)    ///< No animation
#define ARCOMMANDS_FLAG_ANIMATION_TYPE_FLIP (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_FLIP)    ///< The drone makes a flip
#define ARCOMMANDS_FLAG_ANIMATION_TYPE_HORIZONTAL_PANORAMA (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_HORIZONTAL_PANORAMA)    ///< The drone horizontaly rotates on itself
#define ARCOMMANDS_FLAG_ANIMATION_TYPE_DRONIE (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_DRONIE)    ///< The drone flies away on a given distance with a computed angle
#define ARCOMMANDS_FLAG_ANIMATION_TYPE_HORIZONTAL_REVEAL (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_HORIZONTAL_REVEAL)    ///< The drone starts looking down, then moves forward while slowly looking at the horizon
#define ARCOMMANDS_FLAG_ANIMATION_TYPE_VERTICAL_REVEAL (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_VERTICAL_REVEAL)    ///< The drone starts looking down, then moves up while slowly looking at the horizon.\nWhen it reaches its target altitude, it rotates on itself to do a panorama.
#define ARCOMMANDS_FLAG_ANIMATION_TYPE_SPIRAL (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_SPIRAL)    ///< The drone circles around its target.
#define ARCOMMANDS_FLAG_ANIMATION_TYPE_PARABOLA (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_PARABOLA)    ///< The drone makes a parabola on top of its target and ends on the other side of it.
#define ARCOMMANDS_FLAG_ANIMATION_TYPE_CANDLE (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_CANDLE)    ///< The drone flies horizontally in direction of the target then flies up.
#define ARCOMMANDS_FLAG_ANIMATION_TYPE_DOLLY_SLIDE (UINT32_C(1) << ARCOMMANDS_ANIMATION_TYPE_DOLLY_SLIDE)    ///< The drone slides horizontally.


/**
 * @brief Animation state.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_STATE_IDLE = 0,    ///< The animation is not running.
    ARCOMMANDS_ANIMATION_STATE_RUNNING = 1,    ///< The animation is running.
    ARCOMMANDS_ANIMATION_STATE_CANCELING = 2,    ///< The current animation is canceling.
    ARCOMMANDS_ANIMATION_STATE_MAX
} eARCOMMANDS_ANIMATION_STATE;


/**
 * @brief Animation play mode.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_PLAY_MODE_NORMAL = 0,    ///< Animation is played once, normally.
    ARCOMMANDS_ANIMATION_PLAY_MODE_ONCE_THEN_MIRRORED = 1,    ///< Animation is played once and then the animation is played mirrored.
    ARCOMMANDS_ANIMATION_PLAY_MODE_MAX
} eARCOMMANDS_ANIMATION_PLAY_MODE;


/**
 * @brief Animation flip type.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_FLIP_TYPE_FRONT = 0,    ///< The drone makes a front flip
    ARCOMMANDS_ANIMATION_FLIP_TYPE_BACK = 1,    ///< The drone makes a back flip
    ARCOMMANDS_ANIMATION_FLIP_TYPE_LEFT = 2,    ///< The drone makes a left flip (its left side goes up)
    ARCOMMANDS_ANIMATION_FLIP_TYPE_RIGHT = 3,    ///< The drone makes a right flip (its right side goes up)
    ARCOMMANDS_ANIMATION_FLIP_TYPE_MAX
} eARCOMMANDS_ANIMATION_FLIP_TYPE;


/**
 * @brief Horizontal panorama configuration parameter.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM_ROTATION_ANGLE = 0,    ///< Rotation angle parameter.
    ARCOMMANDS_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM_ROTATION_SPEED = 1,    ///< Rotation speed parameter.
    ARCOMMANDS_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM_MAX
} eARCOMMANDS_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM;

#define ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM_ROTATION_ANGLE (UINT32_C(1) << ARCOMMANDS_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM_ROTATION_ANGLE)    ///< Rotation angle parameter.
#define ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM_ROTATION_SPEED (UINT32_C(1) << ARCOMMANDS_ANIMATION_HORIZONTAL_PANORAMA_CONFIG_PARAM_ROTATION_SPEED)    ///< Rotation speed parameter.


/**
 * @brief Dronie animation configuration parameter.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_DRONIE_CONFIG_PARAM_SPEED = 0,    ///< Speed parameter.
    ARCOMMANDS_ANIMATION_DRONIE_CONFIG_PARAM_DISTANCE = 1,    ///< Distance parameter.
    ARCOMMANDS_ANIMATION_DRONIE_CONFIG_PARAM_PLAY_MODE = 2,    ///< Play mode parameter.
    ARCOMMANDS_ANIMATION_DRONIE_CONFIG_PARAM_MAX
} eARCOMMANDS_ANIMATION_DRONIE_CONFIG_PARAM;

#define ARCOMMANDS_FLAG_ANIMATION_DRONIE_CONFIG_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_ANIMATION_DRONIE_CONFIG_PARAM_SPEED)    ///< Speed parameter.
#define ARCOMMANDS_FLAG_ANIMATION_DRONIE_CONFIG_PARAM_DISTANCE (UINT32_C(1) << ARCOMMANDS_ANIMATION_DRONIE_CONFIG_PARAM_DISTANCE)    ///< Distance parameter.
#define ARCOMMANDS_FLAG_ANIMATION_DRONIE_CONFIG_PARAM_PLAY_MODE (UINT32_C(1) << ARCOMMANDS_ANIMATION_DRONIE_CONFIG_PARAM_PLAY_MODE)    ///< Play mode parameter.


/**
 * @brief Horizontal reveal animation configuration parameter.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_SPEED = 0,    ///< Speed parameter.
    ARCOMMANDS_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_DISTANCE = 1,    ///< Distance parameter.
    ARCOMMANDS_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_PLAY_MODE = 2,    ///< Play mode parameter.
    ARCOMMANDS_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_MAX
} eARCOMMANDS_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM;

#define ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_SPEED)    ///< Speed parameter.
#define ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_DISTANCE (UINT32_C(1) << ARCOMMANDS_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_DISTANCE)    ///< Distance parameter.
#define ARCOMMANDS_FLAG_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_PLAY_MODE (UINT32_C(1) << ARCOMMANDS_ANIMATION_HORIZONTAL_REVEAL_CONFIG_PARAM_PLAY_MODE)    ///< Play mode parameter.


/**
 * @brief Vertical reveal animation configuration parameter.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_SPEED = 0,    ///< Speed parameter.
    ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_VERTICAL_DISTANCE = 1,    ///< Vertical distance parameter.
    ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_ROTATION_ANGLE = 2,    ///< Rotation angle parameter.
    ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_ROTATION_SPEED = 3,    ///< Rotation speed parameter.
    ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_PLAY_MODE = 4,    ///< Play mode parameter.
    ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_MAX
} eARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM;

#define ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_SPEED)    ///< Speed parameter.
#define ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_VERTICAL_DISTANCE (UINT32_C(1) << ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_VERTICAL_DISTANCE)    ///< Vertical distance parameter.
#define ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_ROTATION_ANGLE (UINT32_C(1) << ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_ROTATION_ANGLE)    ///< Rotation angle parameter.
#define ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_ROTATION_SPEED (UINT32_C(1) << ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_ROTATION_SPEED)    ///< Rotation speed parameter.
#define ARCOMMANDS_FLAG_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_PLAY_MODE (UINT32_C(1) << ARCOMMANDS_ANIMATION_VERTICAL_REVEAL_CONFIG_PARAM_PLAY_MODE)    ///< Play mode parameter.


/**
 * @brief Spiral animation configuration parameter.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_SPEED = 0,    ///< Speed parameter.
    ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_RADIUS_VARIATION = 1,    ///< Radius variation parameter.
    ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_VERTICAL_DISTANCE = 2,    ///< Vertical distance parameter.
    ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_REVOLUTION_NB = 3,    ///< Revolution number parameter.
    ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_PLAY_MODE = 4,    ///< Play mode parameter.
    ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_MAX
} eARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM;

#define ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_SPEED)    ///< Speed parameter.
#define ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_RADIUS_VARIATION (UINT32_C(1) << ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_RADIUS_VARIATION)    ///< Radius variation parameter.
#define ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_VERTICAL_DISTANCE (UINT32_C(1) << ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_VERTICAL_DISTANCE)    ///< Vertical distance parameter.
#define ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_REVOLUTION_NB (UINT32_C(1) << ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_REVOLUTION_NB)    ///< Revolution number parameter.
#define ARCOMMANDS_FLAG_ANIMATION_SPIRAL_CONFIG_PARAM_PLAY_MODE (UINT32_C(1) << ARCOMMANDS_ANIMATION_SPIRAL_CONFIG_PARAM_PLAY_MODE)    ///< Play mode parameter.


/**
 * @brief Parabola animation configuration parameter.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_PARABOLA_CONFIG_PARAM_SPEED = 0,    ///< Speed parameter.
    ARCOMMANDS_ANIMATION_PARABOLA_CONFIG_PARAM_VERTICAL_DISTANCE = 1,    ///< Vertical distance parameter.
    ARCOMMANDS_ANIMATION_PARABOLA_CONFIG_PARAM_PLAY_MODE = 2,    ///< Play mode parameter.
    ARCOMMANDS_ANIMATION_PARABOLA_CONFIG_PARAM_MAX
} eARCOMMANDS_ANIMATION_PARABOLA_CONFIG_PARAM;

#define ARCOMMANDS_FLAG_ANIMATION_PARABOLA_CONFIG_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_ANIMATION_PARABOLA_CONFIG_PARAM_SPEED)    ///< Speed parameter.
#define ARCOMMANDS_FLAG_ANIMATION_PARABOLA_CONFIG_PARAM_VERTICAL_DISTANCE (UINT32_C(1) << ARCOMMANDS_ANIMATION_PARABOLA_CONFIG_PARAM_VERTICAL_DISTANCE)    ///< Vertical distance parameter.
#define ARCOMMANDS_FLAG_ANIMATION_PARABOLA_CONFIG_PARAM_PLAY_MODE (UINT32_C(1) << ARCOMMANDS_ANIMATION_PARABOLA_CONFIG_PARAM_PLAY_MODE)    ///< Play mode parameter.


/**
 * @brief Candle animation configuration parameter.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_CANDLE_CONFIG_PARAM_SPEED = 0,    ///< Speed parameter.
    ARCOMMANDS_ANIMATION_CANDLE_CONFIG_PARAM_VERTICAL_DISTANCE = 1,    ///< Vertical distance parameter.
    ARCOMMANDS_ANIMATION_CANDLE_CONFIG_PARAM_PLAY_MODE = 2,    ///< Play mode parameter.
    ARCOMMANDS_ANIMATION_CANDLE_CONFIG_PARAM_MAX
} eARCOMMANDS_ANIMATION_CANDLE_CONFIG_PARAM;

#define ARCOMMANDS_FLAG_ANIMATION_CANDLE_CONFIG_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_ANIMATION_CANDLE_CONFIG_PARAM_SPEED)    ///< Speed parameter.
#define ARCOMMANDS_FLAG_ANIMATION_CANDLE_CONFIG_PARAM_VERTICAL_DISTANCE (UINT32_C(1) << ARCOMMANDS_ANIMATION_CANDLE_CONFIG_PARAM_VERTICAL_DISTANCE)    ///< Vertical distance parameter.
#define ARCOMMANDS_FLAG_ANIMATION_CANDLE_CONFIG_PARAM_PLAY_MODE (UINT32_C(1) << ARCOMMANDS_ANIMATION_CANDLE_CONFIG_PARAM_PLAY_MODE)    ///< Play mode parameter.


/**
 * @brief Dolly slide animation configuration parameter.
 */
typedef enum
{
    ARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_SPEED = 0,    ///< Speed parameter.
    ARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_ANGLE = 1,    ///< Angle parameter.
    ARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_HORIZONTAL_DISTANCE = 2,    ///< Horizontal distance parameter.
    ARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_PLAY_MODE = 3,    ///< Play mode parameter.
    ARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_MAX
} eARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM;

#define ARCOMMANDS_FLAG_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_SPEED)    ///< Speed parameter.
#define ARCOMMANDS_FLAG_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_ANGLE (UINT32_C(1) << ARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_ANGLE)    ///< Angle parameter.
#define ARCOMMANDS_FLAG_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_HORIZONTAL_DISTANCE (UINT32_C(1) << ARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_HORIZONTAL_DISTANCE)    ///< Horizontal distance parameter.
#define ARCOMMANDS_FLAG_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_PLAY_MODE (UINT32_C(1) << ARCOMMANDS_ANIMATION_DOLLY_SLIDE_CONFIG_PARAM_PLAY_MODE)    ///< Play mode parameter.

// Feature ARDrone3

/**
 * @brief The circling direction
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION_CW = 0,    ///< Circling ClockWise
    ARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION_CCW = 1,    ///< Circling Counter ClockWise
    ARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION_DEFAULT = 2,    ///< Use drone default Circling direction set by CirclingDirection cmd
    ARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION_MAX
} eARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION;


/**
 * @brief Orientation mode of the move to
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE_NONE = 0,    ///< The drone won't change its orientation
    ARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE_TO_TARGET = 1,    ///< The drone will make a rotation to look in direction of the given location
    ARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE_HEADING_START = 2,    ///< The drone will orientate itself to the given heading before moving to the location
    ARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE_HEADING_DURING = 3,    ///< The drone will orientate itself to the given heading while moving to the location
    ARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE_MAX
} eARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE;


/**
 * @brief Direction for the flip
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_FRONT = 0,    ///< Flip direction front
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_BACK = 1,    ///< Flip direction back
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_RIGHT = 2,    ///< Flip direction right
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_LEFT = 3,    ///< Flip direction left
    ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_MAX
} eARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION;


/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_STOP = 0,    ///< Stop the video recording
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_START = 1,    ///< Start the video recording
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD;


/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD_STOP = 0,    ///< Stop the video recording
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD_START = 1,    ///< Start the video recording
    ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD;


/**
 * @brief State of video
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STOPPED = 0,    ///< Video was stopped
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STARTED = 1,    ///< Video was started
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_FAILED = 2,    ///< Video was failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_AUTOSTOPPED = 3,    ///< Video was auto stopped
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE;


/**
 * @brief State of device picture recording
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY = 0,    ///< The picture recording is ready
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY = 1,    ///< The picture recording is busy
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE = 2,    ///< The picture recording is not available
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE;


/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN = 1,    ///< Unknown generic error
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO = 2,    ///< Picture camera is out of order
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL = 3,    ///< Memory full ; cannot save one additional picture
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY = 4,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR;


/**
 * @brief State of device video recording
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STOPPED = 0,    ///< Video is stopped
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STARTED = 1,    ///< Video is started
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_NOTAVAILABLE = 2,    ///< The video recording is not available
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE;


/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_UNKNOWN = 1,    ///< Unknown generic error
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_CAMERA_KO = 2,    ///< Video camera is out of order
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MEMORYFULL = 3,    ///< Memory full ; cannot save one additional video
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_LOWBATTERY = 4,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR;


/**
 * @brief Streaming resolution
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING_RES360P = 0,    ///< 360p resolution.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING_RES480P = 1,    ///< 480p resolution.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING_RES720P = 2,    ///< 720p resolution.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING_RES1080P = 3,    ///< 1080p resolution.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING;


/**
 * @brief Recording resolution
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING_RES360P = 0,    ///< 360p resolution.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING_RES480P = 1,    ///< 480p resolution.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING_RES720P = 2,    ///< 720p resolution.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING_RES1080P = 3,    ///< 1080p resolution.
    ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING;


/**
 * @brief Last event of picture recording
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN = 0,    ///< Picture taken and saved
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED = 1,    ///< Picture failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT;


/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN = 1,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY = 2,    ///< Picture recording is busy ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE = 3,    ///< Picture recording not available ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL = 4,    ///< Memory full ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY = 5,    ///< Battery is too low to record.
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR;


/**
 * @brief Event of video recording
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_START = 0,    ///< Video start
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_STOP = 1,    ///< Video stop and saved
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_FAILED = 2,    ///< Video failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT;


/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_UNKNOWN = 1,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_BUSY = 2,    ///< Video recording is busy ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_NOTAVAILABLE = 3,    ///< Video recording not available ; only when state is failed
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MEMORYFULL = 4,    ///< Memory full
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_LOWBATTERY = 5,    ///< Battery is too low to record.
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_AUTOSTOPPED = 6,    ///< Video was auto stopped
    ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR;


/**
 * @brief Drone flying state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDED = 0,    ///< Landed state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_TAKINGOFF = 1,    ///< Taking off state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_HOVERING = 2,    ///< Hovering / Circling (for fixed wings) state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_FLYING = 3,    ///< Flying state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDING = 4,    ///< Landing state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY = 5,    ///< Emergency state
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_USERTAKEOFF = 6,    ///< User take off state. Waiting for user action to take off.
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_MOTOR_RAMPING = 7,    ///< Motor ramping state.
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY_LANDING = 8,    ///< Emergency landing state.\nDrone autopilot has detected defective sensor(s).\nOnly Yaw argument in PCMD is taken into account.\nAll others flying commands are ignored.
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE;


/**
 * @brief Drone alert state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE = 0,    ///< No alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_USER = 1,    ///< User emergency alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CUT_OUT = 2,    ///< Cut out alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY = 3,    ///< Critical battery alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY = 4,    ///< Low battery alert
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_TOO_MUCH_ANGLE = 5,    ///< The angle of the drone is too high
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE;


/**
 * @brief State of navigate home
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_AVAILABLE = 0,    ///< Navigate home is available
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_INPROGRESS = 1,    ///< Navigate home is in progress
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_UNAVAILABLE = 2,    ///< Navigate home is not available
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_PENDING = 3,    ///< Navigate home has been received, but its process is pending
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE;


/**
 * @brief Reason of the state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_USERREQUEST = 0,    ///< User requested a navigate home (available->inProgress)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_CONNECTIONLOST = 1,    ///< Connection between controller and product lost (available->inProgress)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_LOWBATTERY = 2,    ///< Low battery occurred (available->inProgress)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_FINISHED = 3,    ///< Navigate home is finished (inProgress->available)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_STOPPED = 4,    ///< Navigate home has been stopped (inProgress->available)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_DISABLED = 5,    ///< Navigate home disabled by product (inProgress->unavailable or available->unavailable)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_ENABLED = 6,    ///< Navigate home enabled by product (unavailable->available)
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON;


/**
 * @brief Drone landing state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE_LINEAR = 0,    ///< Linear landing
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE_SPIRAL = 1,    ///< Spiral landing
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE;


/**
 * @brief Orientation mode of the move to
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE_NONE = 0,    ///< The drone won't change its orientation
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE_TO_TARGET = 1,    ///< The drone will make a rotation to look in direction of the given location
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE_HEADING_START = 2,    ///< The drone will orientate itself to the given heading before moving to the location
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE_HEADING_DURING = 3,    ///< The drone will orientate itself to the given heading while moving to the location
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE;


/**
 * @brief Status of the move to
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS_RUNNING = 0,    ///< The drone is actually flying to the given position
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS_DONE = 1,    ///< The drone has reached the target
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS_CANCELED = 2,    ///< The move to has been canceled, either by a CancelMoveTo command\nor when a disconnection appears.
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS_ERROR = 3,    ///< The move to has not been finished or started because of an error.
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS;


/**
 * @brief Motion state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE_STEADY = 0,    ///< Drone is steady
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE_MOVING = 1,    ///< Drone is moving
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE;


/**
 * @brief Status of the move to
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS_UNAVAILABLE = 0,    ///< The piloted POI is not available
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS_AVAILABLE = 1,    ///< The piloted POI is available
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS_PENDING = 2,    ///< Piloted POI has been requested. Waiting to be in state that allow the piloted POI to start
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS_RUNNING = 3,    ///< Piloted POI is running
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS;


/**
 * @brief Status of battery to return home
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS_OK = 0,    ///< The battery is full enough to do a return home
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS_WARNING = 1,    ///< The battery is about to be too discharged to do a return home
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS_CRITICAL = 2,    ///< The battery level is too low to return to the home position
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS_UNKNOWN = 3,    ///< Battery capacity to do a return home is unknown.\nThis can be either because the home is unknown or the position of the drone is unknown,\nor the drone has not enough information to determine how long it takes to fly home.
    ARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS;


/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_OK = 0,    ///< No Error ; The relative displacement
    ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_UNKNOWN = 1,    ///< Unknown generic error
    ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_BUSY = 2,    ///< The Device is busy ; command moveBy ignored
    ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_NOTAVAILABLE = 3,    ///< Command moveBy is not available ; command moveBy ignored
    ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_INTERRUPTED = 4,    ///< Command moveBy interrupted
    ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR;


/**
 * @brief The band(s) : 2.4 Ghz, 5 Ghz, or both
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_ALL = 2,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND;


/**
 * @brief The band : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND;


/**
 * @brief The band of this channel : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND;


/**
 * @brief The circling direction
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE_CW = 0,    ///< Circling ClockWise
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE_CCW = 1,    ///< Circling Counter ClockWise
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE;


/**
 * @brief The Pitch mode
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE_NORMAL = 0,    ///< Positive pitch values will make the drone lower its nose.\nNegative pitch values will make the drone raise its nose.
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE_INVERTED = 1,    ///< Pitch commands are inverted.\nPositive pitch values will make the drone raise its nose.\nNegative pitch values will make the drone lower its nose.
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE;


/**
 * @brief The circling direction
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE_CW = 0,    ///< Circling ClockWise
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE_CCW = 1,    ///< Circling Counter ClockWise
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE;


/**
 * @brief The Pitch mode
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE_NORMAL = 0,    ///< Positive pitch values will make the drone lower its nose.\nNegative pitch values will make the drone raise its nose.
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE_INVERTED = 1,    ///< Pitch commands are inverted.\nPositive pitch values will make the drone raise its nose.\nNegative pitch values will make the drone lower its nose.
    ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE_MAX
} eARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE;


/**
 * @brief The type of wifi selection (auto, manual)
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_AUTO = 0,    ///< Auto selection
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_MANUAL = 1,    ///< Manual selection
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE;


/**
 * @brief The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_ALL = 2,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND;


/**
 * @brief The type of wifi security (open, wpa2)
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE_OPEN = 0,    ///< Wifi is not protected by any security (default)
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE_WPA2 = 1,    ///< Wifi is protected by wpa2
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE;


/**
 * @brief Type of the key
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_KEYTYPE_PLAIN = 0,    ///< Key is plain text, not encrypted
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_KEYTYPE_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_KEYTYPE;


/**
 * @brief The type of wifi selection settings
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_ALL = 0,    ///< Auto selection
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_2_4GHZ = 1,    ///< Auto selection 2.4ghz
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_5GHZ = 2,    ///< Auto selection 5 ghz
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL = 3,    ///< Manual selection
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE;


/**
 * @brief The actual wifi band state
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ALL = 2,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND;


/**
 * @brief The type of wifi security (open, wpa2)
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE_OPEN = 0,    ///< Wifi is not protected by any security (default)
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE_WPA2 = 1,    ///< Wifi is protected by wpa2
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE;


/**
 * @brief The type of wifi security (open, wpa2)
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE_OPEN = 0,    ///< Wifi is not protected by any security (default)
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE_WPA2 = 1,    ///< Wifi is protected by wpa2
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE;


/**
 * @brief Type of the key
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE_PLAIN = 0,    ///< Key is plain text, not encrypted
    ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE_MAX
} eARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE;


/**
 * @brief Enumeration of the motor error
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_NOERROR = 0,    ///< No error detected
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERROREEPROM = 1,    ///< EEPROM access failure
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOTORSTALLED = 2,    ///< Motor stalled
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORPROPELLERSECURITY = 3,    ///< Propeller cutout security triggered
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORCOMMLOST = 4,    ///< Communication with motor failed by timeout
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORRCEMERGENCYSTOP = 5,    ///< RC emergency stop
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORREALTIME = 6,    ///< Motor controler scheduler real-time out of bounds
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOTORSETTING = 7,    ///< One or several incorrect values in motor settings
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORTEMPERATURE = 8,    ///< Too hot or too cold Cypress temperature
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORBATTERYVOLTAGE = 9,    ///< Battery voltage out of bounds
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORLIPOCELLS = 10,    ///< Incorrect number of LIPO cells
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOSFET = 11,    ///< Defectuous MOSFET or broken motor phases
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORBOOTLOADER = 12,    ///< Not use for BLDC but useful for HAL
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORASSERT = 13,    ///< Error Made by BLDC_ASSERT()
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_MAX
} eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR;


/**
 * @brief Enumeration of the motor error
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_NOERROR = 0,    ///< No error detected
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERROREEPROM = 1,    ///< EEPROM access failure
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORMOTORSTALLED = 2,    ///< Motor stalled
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORPROPELLERSECURITY = 3,    ///< Propeller cutout security triggered
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORCOMMLOST = 4,    ///< Communication with motor failed by timeout
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORRCEMERGENCYSTOP = 5,    ///< RC emergency stop
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORREALTIME = 6,    ///< Motor controler scheduler real-time out of bounds
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORMOTORSETTING = 7,    ///< One or several incorrect values in motor settings
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORBATTERYVOLTAGE = 8,    ///< Battery voltage out of bounds
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORLIPOCELLS = 9,    ///< Incorrect number of LIPO cells
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORMOSFET = 10,    ///< Defectuous MOSFET or broken motor phases
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORTEMPERATURE = 11,    ///< Too hot or too cold Cypress temperature
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORBOOTLOADER = 12,    ///< Not use for BLDC but useful for HAL
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORASSERT = 13,    ///< Error Made by BLDC_ASSERT()
    ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_MAX
} eARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR;


/**
 * @brief The type of photo format
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_RAW = 0,    ///< Take raw image
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_JPEG = 1,    ///< Take a 4:3 jpeg photo
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_SNAPSHOT = 2,    ///< Take a 16:9 snapshot from camera
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_JPEG_FISHEYE = 3,    ///< Take jpeg fisheye image only
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE;


/**
 * @brief The type auto white balance
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_AUTO = 0,    ///< Auto guess of best white balance params
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_TUNGSTEN = 1,    ///< Tungsten white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_DAYLIGHT = 2,    ///< Daylight white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_CLOUDY = 3,    ///< Cloudy white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_COOL_WHITE = 4,    ///< White balance for a flash
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE;


/**
 * @brief Video stabilization mode
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_ROLL_PITCH = 0,    ///< Video flat on roll and pitch
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_PITCH = 1,    ///< Video flat on pitch only
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_ROLL = 2,    ///< Video flat on roll only
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_NONE = 3,    ///< Video follows drone angles
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE;


/**
 * @brief Video recording mode
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORECORDINGMODE_MODE_QUALITY = 0,    ///< Maximize recording quality.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORECORDINGMODE_MODE_TIME = 1,    ///< Maximize recording time.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORECORDINGMODE_MODE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORECORDINGMODE_MODE;


/**
 * @brief Video framerate
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE_24_FPS = 0,    ///< 23.976 frames per second.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE_25_FPS = 1,    ///< 25 frames per second.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE_30_FPS = 2,    ///< 29.97 frames per second.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE;


/**
 * @brief Video streaming and recording resolutions
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORESOLUTIONS_TYPE_REC1080_STREAM480 = 0,    ///< 1080p recording, 480p streaming.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORESOLUTIONS_TYPE_REC720_STREAM720 = 1,    ///< 720p recording, 720p streaming.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORESOLUTIONS_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORESOLUTIONS_TYPE;


/**
 * @brief The type of photo format
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_RAW = 0,    ///< Take raw image
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_JPEG = 1,    ///< Take a 4:3 jpeg photo
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_SNAPSHOT = 2,    ///< Take a 16:9 snapshot from camera
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_JPEG_FISHEYE = 3,    ///< Take jpeg fisheye image only
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE;


/**
 * @brief The type auto white balance
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_AUTO = 0,    ///< Auto guess of best white balance params
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_TUNGSTEN = 1,    ///< Tungsten white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_DAYLIGHT = 2,    ///< Daylight white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_CLOUDY = 3,    ///< Cloudy white balance
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_COOL_WHITE = 4,    ///< White balance for a flash
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE;


/**
 * @brief Video stabilization mode
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE_ROLL_PITCH = 0,    ///< Video flat on roll and pitch
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE_PITCH = 1,    ///< Video flat on pitch only
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE_ROLL = 2,    ///< Video flat on roll only
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE_NONE = 3,    ///< Video follows drone angles
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE;


/**
 * @brief Video recording mode
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE_QUALITY = 0,    ///< Maximize recording quality.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE_TIME = 1,    ///< Maximize recording time.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE;


/**
 * @brief Video framerate
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE_24_FPS = 0,    ///< 23.976 frames per second.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE_25_FPS = 1,    ///< 25 frames per second.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE_30_FPS = 2,    ///< 29.97 frames per second.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE;


/**
 * @brief Video resolution type.
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE_REC1080_STREAM480 = 0,    ///< 1080p recording, 480p streaming.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE_REC720_STREAM720 = 1,    ///< 720p recording, 720p streaming.
    ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE;


/**
 * @brief stream mode
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE_LOW_LATENCY = 0,    ///< Minimize latency with average reliability (best for piloting).
    ARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE_HIGH_RELIABILITY = 1,    ///< Maximize the reliability with an average latency (best when streaming quality is important but not the latency).
    ARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE_HIGH_RELIABILITY_LOW_FRAMERATE = 2,    ///< Maximize the reliability using a framerate decimation with an average latency (best when streaming quality is important but not the latency).
    ARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE_MAX
} eARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE;


/**
 * @brief Current video streaming status.
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENABLED = 0,    ///< Video streaming is enabled.
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_DISABLED = 1,    ///< Video streaming is disabled.
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ERROR = 2,    ///< Video streaming failed to start.
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_MAX
} eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED;


/**
 * @brief stream mode
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE_LOW_LATENCY = 0,    ///< Minimize latency with average reliability (best for piloting).
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE_HIGH_RELIABILITY = 1,    ///< Maximize the reliability with an average latency (best when streaming quality is important but not the latency).
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE_HIGH_RELIABILITY_LOW_FRAMERATE = 2,    ///< Maximize the reliability using a framerate decimation with an average latency (best when streaming quality is important but not the latency).
    ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE_MAX
} eARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE;


/**
 * @brief The type of the home position
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_TAKEOFF = 0,    ///< The drone will try to return to the take off position
    ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_PILOT = 1,    ///< The drone will try to return to the pilot position
    ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_FOLLOWEE = 2,    ///< The drone will try to return to the target of the current (or last) follow me
    ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_MAX
} eARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE;


/**
 * @brief The state of the gps update
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_UPDATED = 0,    ///< Drone GPS update succeed
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_INPROGRESS = 1,    ///< Drone GPS update In progress
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_FAILED = 2,    ///< Drone GPS update failed
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_MAX
} eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE;


/**
 * @brief The type of the home position
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_TAKEOFF = 0,    ///< The drone will try to return to the take off position
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_PILOT = 1,    ///< The drone will try to return to the pilot position
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_FOLLOWEE = 2,    ///< The drone will try to return to the target of the current (or last) follow me
    ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE;


/**
 * @brief Type of the electric frequency
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY_FIFTYHERTZ = 0,    ///< Electric frequency of the country is 50hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY_SIXTYHERTZ = 1,    ///< Electric frequency of the country is 60hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY_MAX
} eARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY;


/**
 * @brief Mode of the anti flickering functionnality
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_AUTO = 0,    ///< Anti flickering based on the electric frequency previously sent
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_FIXEDFIFTYHERTZ = 1,    ///< Anti flickering based on a fixed frequency of 50Hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_FIXEDSIXTYHERTZ = 2,    ///< Anti flickering based on a fixed frequency of 60Hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_MAX
} eARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE;


/**
 * @brief Type of the electric frequency
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_FIFTYHERTZ = 0,    ///< Electric frequency of the country is 50hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_SIXTYHERTZ = 1,    ///< Electric frequency of the country is 60hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_MAX
} eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY;


/**
 * @brief Mode of the anti flickering functionnality
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_AUTO = 0,    ///< Anti flickering based on the electric frequency previously sent
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_FIXEDFIFTYHERTZ = 1,    ///< Anti flickering based on a fixed frequency of 50Hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_FIXEDSIXTYHERTZ = 2,    ///< Anti flickering based on a fixed frequency of 60Hz
    ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_MAX
} eARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE;


/**
 * @brief The type of the return home
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_TAKEOFF = 0,    ///< The drone has enough information to return to the take off position
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_PILOT = 1,    ///< The drone has enough information to return to the pilot position
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_FIRST_FIX = 2,    ///< The drone has not enough information, it will return to the first GPS fix
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_FOLLOWEE = 3,    ///< The drone has enough information to return to the target of the current (or last) follow me
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE;


/**
 * @brief The type of the return home chosen
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_TAKEOFF = 0,    ///< The drone will return to the take off position
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_PILOT = 1,    ///< The drone will return to the pilot position\nIn this case, the drone will use the position given by ARDrone3-SendControllerGPS
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_FIRST_FIX = 2,    ///< The drone has not enough information, it will return to the first GPS fix
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_FOLLOWEE = 3,    ///< The drone will return to the target of the current (or last) follow me\nIn this case, the drone will use the position of the target of the followMe (given by ControllerInfo-GPS)
    ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_MAX
} eARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE;


/**
 * @brief Accessory type
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE_SEQUOIA = 0,    ///< Parrot Sequoia (multispectral camera for agriculture)
    ARCOMMANDS_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE_FLIR = 1,    ///< FLIR camera (thermal+rgb camera)
    ARCOMMANDS_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE_MAX
} eARCOMMANDS_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE;


/**
 * @brief State of the alert sound
 */
typedef enum
{
    ARCOMMANDS_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE_STOPPED = 0,    ///< Alert sound is not playing
    ARCOMMANDS_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE_PLAYING = 1,    ///< Alert sound is playing
    ARCOMMANDS_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE_MAX
} eARCOMMANDS_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE;

// Feature common

/**
 * @brief Cause of the disconnection of the product
 */
typedef enum
{
    ARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE_OFF_BUTTON = 0,    ///< The button off has been pressed
    ARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE_UNKNOWN = 1,    ///< Unknown generic cause
    ARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE_MAX
} eARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE;


/**
 * @brief Sensor name
 */
typedef enum
{
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_IMU = 0,    ///< Inertial Measurement Unit sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_BAROMETER = 1,    ///< Barometer sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_ULTRASOUND = 2,    ///< Ultrasonic sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_GPS = 3,    ///< GPS sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_MAGNETOMETER = 4,    ///< Magnetometer sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_VERTICAL_CAMERA = 5,    ///< Vertical Camera sensor
    ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_MAX
} eARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME;


/**
 * @brief The Model of the product.
 */
typedef enum
{
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_TRAVIS = 0,    ///< Travis (RS taxi) model.
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_MARS = 1,    ///< Mars (RS space) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_SWAT = 2,    ///< SWAT (RS SWAT) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_MCLANE = 3,    ///< Mc Lane (RS police) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_BLAZE = 4,    ///< Blaze (RS fire) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_ORAK = 5,    ///< Orak (RS carbon hydrofoil) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_NEWZ = 6,    ///< New Z (RS wooden hydrofoil) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_MARSHALL = 7,    ///< Marshall (JS fire) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_DIESEL = 8,    ///< Diesel (JS SWAT) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_BUZZ = 9,    ///< Buzz (JS space) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_MAX = 10,    ///< Max (JS F1) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_JETT = 11,    ///< Jett (JS flames) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_TUKTUK = 12,    ///< Tuk-Tuk (JS taxi) model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_SW_BLACK = 13,    ///< Swing black model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_SW_WHITE = 14,    ///< Swing white model
    ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_MAX
} eARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL;


/**
 * @brief type of the played mavlink file
 */
typedef enum
{
    ARCOMMANDS_COMMON_MAVLINK_START_TYPE_FLIGHTPLAN = 0,    ///< Mavlink file for FlightPlan
    ARCOMMANDS_COMMON_MAVLINK_START_TYPE_MAPMYHOUSE = 1,    ///< Mavlink file for MapMyHouse
    ARCOMMANDS_COMMON_MAVLINK_START_TYPE_MAX
} eARCOMMANDS_COMMON_MAVLINK_START_TYPE;


/**
 * @brief State of the mavlink
 */
typedef enum
{
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_PLAYING = 0,    ///< Mavlink file is playing
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_STOPPED = 1,    ///< Mavlink file is stopped (arg filepath and type are useless in this state)
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_PAUSED = 2,    ///< Mavlink file is paused
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_LOADED = 3,    ///< Mavlink file is loaded (it will be played at take-off)
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_MAX
} eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE;


/**
 * @brief type of the played mavlink file
 */
typedef enum
{
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE_FLIGHTPLAN = 0,    ///< Mavlink file for FlightPlan
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE_MAPMYHOUSE = 1,    ///< Mavlink file for MapMyHouse
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE_MAX
} eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE;


/**
 * @brief State of play error
 */
typedef enum
{
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_NONE = 0,    ///< There is no error
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_NOTINOUTDOORMODE = 1,    ///< The drone is not in outdoor mode
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_GPSNOTFIXED = 2,    ///< The gps is not fixed
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_NOTCALIBRATED = 3,    ///< The magnetometer of the drone is not calibrated
    ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_MAX
} eARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR;


/**
 * @brief The axis to calibrate
 */
typedef enum
{
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_XAXIS = 0,    ///< If the current calibration axis should be the x axis
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_YAXIS = 1,    ///< If the current calibration axis should be the y axis
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_ZAXIS = 2,    ///< If the current calibration axis should be the z axis
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_NONE = 3,    ///< If none of the axis should be calibrated
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_MAX
} eARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS;


/**
 * @brief State of pitot calibration
 */
typedef enum
{
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE_DONE = 0,    ///< Calibration is ok
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE_READY = 1,    ///< Calibration is started, waiting user action
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE_IN_PROGRESS = 2,    ///< Calibration is in progress
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE_REQUIRED = 3,    ///< Calibration is required
    ARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE_MAX
} eARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE;


/**
 * @brief Drone FlightPlan component id (unique)
 */
typedef enum
{
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_GPS = 0,    ///< Drone GPS component.\nState is 0 when the drone needs a GPS fix.
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_CALIBRATION = 1,    ///< Drone Calibration component.\nState is 0 when the sensors of the drone needs to be calibrated.
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_MAVLINK_FILE = 2,    ///< Mavlink file component.\nState is 0 when the mavlink file is missing or contains error.
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_TAKEOFF = 3,    ///< Drone Take off component.\nState is 0 when the drone cannot take-off.
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_WAYPOINTSBEYONDGEOFENCE = 4,    ///< Component for waypoints beyond the geofence.\nState is 0 when one or more waypoints are beyond the geofence.
    ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_MAX
} eARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT;


/**
 * @brief Animation to start.
 */
typedef enum
{
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_HEADLIGHTS_FLASH = 0,    ///< Flash headlights.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_HEADLIGHTS_BLINK = 1,    ///< Blink headlights.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_HEADLIGHTS_OSCILLATION = 2,    ///< Oscillating headlights.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SPIN = 3,    ///< Spin animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_TAP = 4,    ///< Tap animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SLOW_SHAKE = 5,    ///< Slow shake animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_METRONOME = 6,    ///< Metronome animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_ONDULATION = 7,    ///< Standing dance animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SPIN_JUMP = 8,    ///< Spin jump animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SPIN_TO_POSTURE = 9,    ///< Spin that end in standing posture, or in jumper if it was standing animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SPIRAL = 10,    ///< Spiral animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SLALOM = 11,    ///< Slalom animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_BOOST = 12,    ///< Boost animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_LOOPING = 13,    ///< Make a looping. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_BARREL_ROLL_180_RIGHT = 14,    ///< Make a barrel roll of 180 degree turning on right. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_BARREL_ROLL_180_LEFT = 15,    ///< Make a barrel roll of 180 degree turning on left. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_BACKSWAP = 16,    ///< Put the drone upside down. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_MAX
} eARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM;


/**
 * @brief Animation to stop.
 */
typedef enum
{
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_HEADLIGHTS_FLASH = 0,    ///< Flash headlights.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_HEADLIGHTS_BLINK = 1,    ///< Blink headlights.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_HEADLIGHTS_OSCILLATION = 2,    ///< Oscillating headlights.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SPIN = 3,    ///< Spin animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_TAP = 4,    ///< Tap animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SLOW_SHAKE = 5,    ///< Slow shake animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_METRONOME = 6,    ///< Metronome animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_ONDULATION = 7,    ///< Standing dance animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SPIN_JUMP = 8,    ///< Spin jump animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SPIN_TO_POSTURE = 9,    ///< Spin that end in standing posture, or in jumper if it was standing animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SPIRAL = 10,    ///< Spiral animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SLALOM = 11,    ///< Slalom animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_BOOST = 12,    ///< Boost animation.
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_LOOPING = 13,    ///< Make a looping. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_BARREL_ROLL_180_RIGHT = 14,    ///< Make a barrel roll of 180 degree turning on right. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_BARREL_ROLL_180_LEFT = 15,    ///< Make a barrel roll of 180 degree turning on left. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_BACKSWAP = 16,    ///< Put the drone upside down. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_MAX
} eARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM;


/**
 * @brief Animation type.
 */
typedef enum
{
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_HEADLIGHTS_FLASH = 0,    ///< Flash headlights.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_HEADLIGHTS_BLINK = 1,    ///< Blink headlights.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_HEADLIGHTS_OSCILLATION = 2,    ///< Oscillating headlights.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SPIN = 3,    ///< Spin animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_TAP = 4,    ///< Tap animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SLOW_SHAKE = 5,    ///< Slow shake animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_METRONOME = 6,    ///< Metronome animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_ONDULATION = 7,    ///< Standing dance animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SPIN_JUMP = 8,    ///< Spin jump animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SPIN_TO_POSTURE = 9,    ///< Spin that end in standing posture, or in jumper if it was standing animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SPIRAL = 10,    ///< Spiral animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SLALOM = 11,    ///< Slalom animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_BOOST = 12,    ///< Boost animation.
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_LOOPING = 13,    ///< Make a looping. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_BARREL_ROLL_180_RIGHT = 14,    ///< Make a barrel roll of 180 degree turning on right. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_BARREL_ROLL_180_LEFT = 15,    ///< Make a barrel roll of 180 degree turning on left. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_BACKSWAP = 16,    ///< Put the drone upside down. (Only for WingX)
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_MAX
} eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM;


/**
 * @brief State of the animation
 */
typedef enum
{
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE_STOPPED = 0,    ///< animation is stopped
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE_STARTED = 1,    ///< animation is started
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE_NOTAVAILABLE = 2,    ///< The animation is not available
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE_MAX
} eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE;


/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ERROR_UNKNOWN = 1,    ///< Unknown generic error
    ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ERROR_MAX
} eARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ERROR;


/**
 * @brief Accessory configuration to set.
 */
typedef enum
{
    ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_NO_ACCESSORY = 0,    ///< No accessory.
    ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_STD_WHEELS = 1,    ///< Standard wheels
    ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_TRUCK_WHEELS = 2,    ///< Truck wheels
    ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_HULL = 3,    ///< Hull
    ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_HYDROFOIL = 4,    ///< Hydrofoil
    ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_MAX
} eARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY;


/**
 * @brief Accessory configurations supported by the product.
 */
typedef enum
{
    ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_NO_ACCESSORY = 0,    ///< No accessory.
    ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_STD_WHEELS = 1,    ///< Standard wheels
    ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_TRUCK_WHEELS = 2,    ///< Truck wheels
    ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_HULL = 3,    ///< Hull
    ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_HYDROFOIL = 4,    ///< Hydrofoil
    ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_MAX
} eARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY;


/**
 * @brief Accessory configuration reported by firmware.
 */
typedef enum
{
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_UNCONFIGURED = 0,    ///< No accessory configuration set. Controller needs to set one.
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_NO_ACCESSORY = 1,    ///< No accessory.
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_STD_WHEELS = 2,    ///< Standard wheels
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_TRUCK_WHEELS = 3,    ///< Truck wheels
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_HULL = 4,    ///< Hull
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_HYDROFOIL = 5,    ///< Hydrofoil
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_IN_PROGRESS = 6,    ///< Configuration in progress.
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_MAX
} eARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY;


/**
 * @brief Error code.
 */
typedef enum
{
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR_OK = 0,    ///< No error. Accessory config change successful.
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR_UNKNOWN = 1,    ///< Cannot change accessory configuration for some reason.
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR_FLYING = 2,    ///< Cannot change accessory configuration while flying.
    ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR_MAX
} eARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR;


/**
 * @brief The new maximum charge rate.
 */
typedef enum
{
    ARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE_SLOW = 0,    ///< Fully charge the battery at a slow rate. Typically limit max charge current to 512 mA.
    ARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE_MODERATE = 1,    ///< Almost fully-charge the battery at moderate rate (> 512mA) but slower than the fastest rate.
    ARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE_FAST = 2,    ///< Almost fully-charge the battery at the highest possible rate supported by the charger.
    ARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE_MAX
} eARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE;


/**
 * @brief The current maximum charge rate.
 */
typedef enum
{
    ARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE_SLOW = 0,    ///< Fully charge the battery at a slow rate. Typically limit max charge current to 512 mA.
    ARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE_MODERATE = 1,    ///< Almost fully-charge the battery at moderate rate (> 512 mA) but slower than the fastest rate.
    ARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE_FAST = 2,    ///< Almost fully-charge the battery at the highest possible rate supported by the charger.
    ARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE_MAX
} eARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE;


/**
 * @brief Charger status.
 */
typedef enum
{
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_DISCHARGING = 0,    ///< The battery is discharging.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_CHARGING_SLOW = 1,    ///< The battery is charging at a slow rate about 512 mA.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_CHARGING_MODERATE = 2,    ///< The battery is charging at a moderate rate (> 512 mA) but slower than the fastest rate.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_CHARGING_FAST = 3,    ///< The battery is charging at a the fastest rate.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_BATTERY_FULL = 4,    ///< The charger is plugged and the battery is fully charged.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_MAX
} eARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS;


/**
 * @brief The current charging phase.
 */
typedef enum
{
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_UNKNOWN = 0,    ///< The charge phase is unknown or irrelevant.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_CONSTANT_CURRENT_1 = 1,    ///< First phase of the charging process. The battery is charging with constant current.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_CONSTANT_CURRENT_2 = 2,    ///< Second phase of the charging process. The battery is charging with constant current, with a higher voltage than the first phase.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_CONSTANT_VOLTAGE = 3,    ///< Last part of the charging process. The battery is charging with a constant voltage.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_CHARGED = 4,    ///< The battery is fully charged.
    ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_MAX
} eARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE;


/**
 * @brief The charge rate recorded by the firmware for the last charge.
 */
typedef enum
{
    ARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE_UNKNOWN = 0,    ///< The last charge rate is not known.
    ARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE_SLOW = 1,    ///< Slow charge rate.
    ARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE_MODERATE = 2,    ///< Moderate charge rate.
    ARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE_FAST = 3,    ///< Fast charge rate.
    ARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE_MAX
} eARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE;


/**
 * @brief The current charging phase.
 */
typedef enum
{
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_UNKNOWN = 0,    ///< The charge phase is unknown or irrelevant.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_CONSTANT_CURRENT_1 = 1,    ///< First phase of the charging process. The battery is charging with constant current.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_CONSTANT_CURRENT_2 = 2,    ///< Second phase of the charging process. The battery is charging with constant current, with a higher voltage than the first phase.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_CONSTANT_VOLTAGE = 3,    ///< Last part of the charging process. The battery is charging with a constant voltage.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_CHARGED = 4,    ///< The battery is fully charged.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_DISCHARGING = 5,    ///< The battery is discharging; Other arguments refers to the last charge.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_MAX
} eARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE;


/**
 * @brief The charge rate. If phase is DISCHARGING, refers to the last charge.
 */
typedef enum
{
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE_UNKNOWN = 0,    ///< The charge rate is not known.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE_SLOW = 1,    ///< Slow charge rate.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE_MODERATE = 2,    ///< Moderate charge rate.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE_FAST = 3,    ///< Fast charge rate.
    ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE_MAX
} eARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE;

// Feature controller_info
// Feature debug

/**
 * @brief Setting type.
 */
typedef enum
{
    ARCOMMANDS_DEBUG_SETTING_TYPE_BOOL = 0,    ///< Boolean Setting. (ex: 0, 1)
    ARCOMMANDS_DEBUG_SETTING_TYPE_DECIMAL = 1,    ///< Decimal Setting. (ex: -3.5, 0, 2, 3.6, 6.5)
    ARCOMMANDS_DEBUG_SETTING_TYPE_TEXT = 2,    ///< Single line text Setting.
    ARCOMMANDS_DEBUG_SETTING_TYPE_MAX
} eARCOMMANDS_DEBUG_SETTING_TYPE;


/**
 * @brief Setting mode.
 */
typedef enum
{
    ARCOMMANDS_DEBUG_SETTING_MODE_READ_ONLY = 0,    ///< Controller can only read setting.
    ARCOMMANDS_DEBUG_SETTING_MODE_READ_WRITE = 1,    ///< Controller can read and write setting.
    ARCOMMANDS_DEBUG_SETTING_MODE_MAX
} eARCOMMANDS_DEBUG_SETTING_MODE;

// Feature drone_manager

/**
 * @brief The security of the drone network.
 */
typedef enum
{
    ARCOMMANDS_DRONE_MANAGER_SECURITY_NONE = 0,    ///< The drone is not protected.
    ARCOMMANDS_DRONE_MANAGER_SECURITY_WPA2 = 1,    ///< The drone is protected with Wpa2 (passphrase).
    ARCOMMANDS_DRONE_MANAGER_SECURITY_MAX
} eARCOMMANDS_DRONE_MANAGER_SECURITY;


/**
 * @brief The state of the connection to a drone.
 */
typedef enum
{
    ARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE_IDLE = 0,    ///< The drone manager do nothing (wait for command).
    ARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE_SEARCHING = 1,    ///< The drone manager is searching for a known drone.
    ARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE_CONNECTING = 2,    ///< The drone manager is connecting to a drone.
    ARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE_CONNECTED = 3,    ///< The drone manager is connected to a drone.
    ARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE_DISCONNECTING = 4,    ///< The drone manager is finishing the connection with the drone before taking further action.
    ARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE_MAX
} eARCOMMANDS_DRONE_MANAGER_CONNECTION_STATE;

// Feature follow_me

/**
 * @brief FollowMe mode
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_MODE_NONE = 0,    ///< No follow me
    ARCOMMANDS_FOLLOW_ME_MODE_LOOK_AT = 1,    ///< Look at the target without moving automatically
    ARCOMMANDS_FOLLOW_ME_MODE_GEOGRAPHIC = 2,    ///< Follow the target keeping the same vector
    ARCOMMANDS_FOLLOW_ME_MODE_RELATIVE = 3,    ///< Follow the target keeping the same orientation to its direction
    ARCOMMANDS_FOLLOW_ME_MODE_MAX
} eARCOMMANDS_FOLLOW_ME_MODE;


/**
 * @brief FollowMe behavior
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_BEHAVIOR_IDLE = 0,    ///< Drone is not moving according to the target\nThis means that at least one required input is missing
    ARCOMMANDS_FOLLOW_ME_BEHAVIOR_FOLLOW = 1,    ///< Follow the target
    ARCOMMANDS_FOLLOW_ME_BEHAVIOR_LOOK_AT = 2,    ///< Look at the target without moving
    ARCOMMANDS_FOLLOW_ME_BEHAVIOR_MAX
} eARCOMMANDS_FOLLOW_ME_BEHAVIOR;


/**
 * @brief Input values used by the FollowMe
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_INPUT_DRONE_CALIBRATED = 0,    ///< Drone is calibrated
    ARCOMMANDS_FOLLOW_ME_INPUT_DRONE_GPS_GOOD_ACCURACY = 1,    ///< Drone gps has fixed and has a good accuracy
    ARCOMMANDS_FOLLOW_ME_INPUT_TARGET_GPS_GOOD_ACCURACY = 2,    ///< Target gps data is known and has a good accuracy
    ARCOMMANDS_FOLLOW_ME_INPUT_TARGET_BAROMETER_OK = 3,    ///< Target barometer data is available
    ARCOMMANDS_FOLLOW_ME_INPUT_DRONE_FAR_ENOUGH = 4,    ///< Drone is far enough from the target
    ARCOMMANDS_FOLLOW_ME_INPUT_DRONE_HIGH_ENOUGH = 5,    ///< Drone is high enough from the ground
    ARCOMMANDS_FOLLOW_ME_INPUT_IMAGE_DETECTION = 6,    ///< Target detection is done by image detection among other things
    ARCOMMANDS_FOLLOW_ME_INPUT_MAX
} eARCOMMANDS_FOLLOW_ME_INPUT;

#define ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_CALIBRATED (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_INPUT_DRONE_CALIBRATED)    ///< Drone is calibrated
#define ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_GPS_GOOD_ACCURACY (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_INPUT_DRONE_GPS_GOOD_ACCURACY)    ///< Drone gps has fixed and has a good accuracy
#define ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_TARGET_GPS_GOOD_ACCURACY (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_INPUT_TARGET_GPS_GOOD_ACCURACY)    ///< Target gps data is known and has a good accuracy
#define ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_TARGET_BAROMETER_OK (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_INPUT_TARGET_BAROMETER_OK)    ///< Target barometer data is available
#define ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_FAR_ENOUGH (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_INPUT_DRONE_FAR_ENOUGH)    ///< Drone is far enough from the target
#define ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_DRONE_HIGH_ENOUGH (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_INPUT_DRONE_HIGH_ENOUGH)    ///< Drone is high enough from the ground
#define ARCOMMANDS_FLAG_FOLLOW_ME_INPUT_IMAGE_DETECTION (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_INPUT_IMAGE_DETECTION)    ///< Target detection is done by image detection among other things


/**
 * @brief Geographic and Relative follow me configuration parameters
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_DISTANCE = 0,    ///< Distance configuration
    ARCOMMANDS_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_ELEVATION = 1,    ///< Elevation configuration
    ARCOMMANDS_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_AZIMUTH = 2,    ///< Azimuth configuration
    ARCOMMANDS_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_MAX
} eARCOMMANDS_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM;

#define ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_DISTANCE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_DISTANCE)    ///< Distance configuration
#define ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_ELEVATION (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_ELEVATION)    ///< Elevation configuration
#define ARCOMMANDS_FLAG_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_AZIMUTH (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_GEO_REL_CONFIGURE_PARAM_AZIMUTH)    ///< Azimuth configuration


/**
 * @brief FollowMe animation type
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_ANIMATION_NONE = 0,    ///< No animation
    ARCOMMANDS_FOLLOW_ME_ANIMATION_HELICOID = 1,    ///< Turn around the target
    ARCOMMANDS_FOLLOW_ME_ANIMATION_SWING = 2,    ///< Pass by the zenith and change of side
    ARCOMMANDS_FOLLOW_ME_ANIMATION_BOOMERANG = 3,    ///< Fly far from the target and fly back
    ARCOMMANDS_FOLLOW_ME_ANIMATION_CANDLE = 4,    ///< Move to the target and go high when it is near
    ARCOMMANDS_FOLLOW_ME_ANIMATION_DOLLY_SLIDE = 5,    ///< Fly in line
    ARCOMMANDS_FOLLOW_ME_ANIMATION_MAX
} eARCOMMANDS_FOLLOW_ME_ANIMATION;

#define ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_NONE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_ANIMATION_NONE)    ///< No animation
#define ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_HELICOID (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_ANIMATION_HELICOID)    ///< Turn around the target
#define ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_SWING (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_ANIMATION_SWING)    ///< Pass by the zenith and change of side
#define ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_BOOMERANG (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_ANIMATION_BOOMERANG)    ///< Fly far from the target and fly back
#define ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_CANDLE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_ANIMATION_CANDLE)    ///< Move to the target and go high when it is near
#define ARCOMMANDS_FLAG_FOLLOW_ME_ANIMATION_DOLLY_SLIDE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_ANIMATION_DOLLY_SLIDE)    ///< Fly in line


/**
 * @brief Helicoid animation configuration parameters.
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_SPEED = 0,    ///< Speed parameter
    ARCOMMANDS_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_REVOLUTION_NB = 1,    ///< Number of turn
    ARCOMMANDS_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_VERTICAL_DISTANCE = 2,    ///< Vertical distance
    ARCOMMANDS_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_MAX
} eARCOMMANDS_FOLLOW_ME_HELICOID_CONFIGURE_PARAM;

#define ARCOMMANDS_FLAG_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_SPEED)    ///< Speed parameter
#define ARCOMMANDS_FLAG_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_REVOLUTION_NB (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_REVOLUTION_NB)    ///< Number of turn
#define ARCOMMANDS_FLAG_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_VERTICAL_DISTANCE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_HELICOID_CONFIGURE_PARAM_VERTICAL_DISTANCE)    ///< Vertical distance


/**
 * @brief Swing configure parameters.
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_SWING_CONFIGURE_PARAM_SPEED = 0,    ///< Speed parameter
    ARCOMMANDS_FOLLOW_ME_SWING_CONFIGURE_PARAM_VERTICAL_DISTANCE = 1,    ///< Vertical distance
    ARCOMMANDS_FOLLOW_ME_SWING_CONFIGURE_PARAM_MAX
} eARCOMMANDS_FOLLOW_ME_SWING_CONFIGURE_PARAM;

#define ARCOMMANDS_FLAG_FOLLOW_ME_SWING_CONFIGURE_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_SWING_CONFIGURE_PARAM_SPEED)    ///< Speed parameter
#define ARCOMMANDS_FLAG_FOLLOW_ME_SWING_CONFIGURE_PARAM_VERTICAL_DISTANCE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_SWING_CONFIGURE_PARAM_VERTICAL_DISTANCE)    ///< Vertical distance


/**
 * @brief Boomerang animation configure parameters.
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_SPEED = 0,    ///< Speed parameter
    ARCOMMANDS_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_DISTANCE = 1,    ///< Distance
    ARCOMMANDS_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_MAX
} eARCOMMANDS_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM;

#define ARCOMMANDS_FLAG_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_SPEED)    ///< Speed parameter
#define ARCOMMANDS_FLAG_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_DISTANCE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_BOOMERANG_CONFIGURE_PARAM_DISTANCE)    ///< Distance


/**
 * @brief Candle animation configure parameters.
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_SPEED = 0,    ///< Speed parameter
    ARCOMMANDS_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_VERTICAL_DISTANCE = 1,    ///< Follow the target keeping the same vector
    ARCOMMANDS_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_MAX
} eARCOMMANDS_FOLLOW_ME_CANDLE_CONFIGURE_PARAM;

#define ARCOMMANDS_FLAG_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_SPEED)    ///< Speed parameter
#define ARCOMMANDS_FLAG_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_VERTICAL_DISTANCE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_CANDLE_CONFIGURE_PARAM_VERTICAL_DISTANCE)    ///< Follow the target keeping the same vector


/**
 * @brief Dolly slide animation configure parameters.
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_SPEED = 0,    ///< Speed parameter
    ARCOMMANDS_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_ANGLE = 1,    ///< Angle
    ARCOMMANDS_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_HORIZONTAL_DISTANCE = 2,    ///< Horizontal distance
    ARCOMMANDS_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_MAX
} eARCOMMANDS_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM;

#define ARCOMMANDS_FLAG_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_SPEED (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_SPEED)    ///< Speed parameter
#define ARCOMMANDS_FLAG_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_ANGLE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_ANGLE)    ///< Angle
#define ARCOMMANDS_FLAG_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_HORIZONTAL_DISTANCE (UINT32_C(1) << ARCOMMANDS_FOLLOW_ME_DOLLY_SLIDE_CONFIGURE_PARAM_HORIZONTAL_DISTANCE)    ///< Horizontal distance


/**
 * @brief State of the image detection
 */
typedef enum
{
    ARCOMMANDS_FOLLOW_ME_IMAGE_DETECTION_STATUS_NONE = 0,    ///< No image detection
    ARCOMMANDS_FOLLOW_ME_IMAGE_DETECTION_STATUS_OK = 1,    ///< Image detection is considered ok by the drone
    ARCOMMANDS_FOLLOW_ME_IMAGE_DETECTION_STATUS_LOST = 2,    ///< Image detection is considered lost or\nin contradiction with gps value.\nThis state will remain until a new selection of the target is done
    ARCOMMANDS_FOLLOW_ME_IMAGE_DETECTION_STATUS_MAX
} eARCOMMANDS_FOLLOW_ME_IMAGE_DETECTION_STATUS;

// Feature JumpingSumo

/**
 * @brief Type of Posture
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_STANDING = 0,    ///< Standing type
    ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_JUMPER = 1,    ///< Jumper type
    ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_KICKER = 2,    ///< Kicker type
    ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_MAX
} eARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE;


/**
 * @brief State of posture
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_STANDING = 0,    ///< Standing state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_JUMPER = 1,    ///< Jumper state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_KICKER = 2,    ///< Kicker state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_STUCK = 3,    ///< Stuck state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_UNKNOWN = 4,    ///< Unknown state
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE;


/**
 * @brief JS alert state
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE = 0,    ///< No alert
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY = 1,    ///< Critical battery alert
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY = 2,    ///< Low battery alert
    ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE;


/**
 * @brief Type of jump
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_LONG = 0,    ///< Long jump.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_HIGH = 1,    ///< High jump
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE;


/**
 * @brief Animation ID.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_STOP = 0,    ///< Stop ongoing animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPIN = 1,    ///< Start a spin animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_TAP = 2,    ///< Start a tap animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SLOWSHAKE = 3,    ///< Start a slow shake animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_METRONOME = 4,    ///< Start a Metronome animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_ONDULATION = 5,    ///< Start a standing dance animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPINJUMP = 6,    ///< Start a spin jump animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPINTOPOSTURE = 7,    ///< Start a spin that end in standing posture, or in jumper if it was standing animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPIRAL = 8,    ///< Start a spiral animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SLALOM = 9,    ///< Start a slalom animation.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID;


/**
 * @brief State of jump load
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_UNKNOWN = 0,    ///< Unknown state (obsolete).
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_UNLOADED = 1,    ///< Unloaded state.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_LOADED = 2,    ///< Loaded state.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_BUSY = 3,    ///< Unknown state (obsolete).
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_LOW_BATTERY_UNLOADED = 4,    ///< Unloaded state and low battery.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_LOW_BATTERY_LOADED = 5,    ///< Loaded state and low battery.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE;


/**
 * @brief State of jump type.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_NONE = 0,    ///< None.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_LONG = 1,    ///< Long jump type.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_HIGH = 2,    ///< High jump type.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE;


/**
 * @brief Enum describing the problem of the motor
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_NONE = 0,    ///< None.
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_BLOCKED = 1,    ///< Motor blocked
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_OVER_HEATED = 2,    ///< Motor over heated
    ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR;


/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_STOP = 0,    ///< Stop the video recording
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_START = 1,    ///< Start the video recording
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD;


/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD_STOP = 0,    ///< Stop the video recording
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD_START = 1,    ///< Start the video recording
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD;


/**
 * @brief State of video
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STOPPED = 0,    ///< Video was stopped
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STARTED = 1,    ///< Video was started
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_FAILED = 2,    ///< Video was failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE;


/**
 * @brief State of device picture recording
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY = 0,    ///< The picture recording is ready
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY = 1,    ///< The picture recording is busy
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE = 2,    ///< The picture recording is not available
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE;


/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN = 1,    ///< Unknown generic error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO = 2,    ///< Picture camera is out of order
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL = 3,    ///< Memory full ; cannot save one additional picture
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY = 4,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR;


/**
 * @brief State of device video recording
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STOPPED = 0,    ///< Video is stopped
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STARTED = 1,    ///< Video is started
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_NOTAVAILABLE = 2,    ///< The video recording is not available
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE;


/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_UNKNOWN = 1,    ///< Unknown generic error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_CAMERA_KO = 2,    ///< Video camera is out of order
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MEMORYFULL = 3,    ///< Memory full ; cannot save one additional video
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_LOWBATTERY = 4,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR;


/**
 * @brief Last event of picture recording
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN = 0,    ///< Picture taken and saved
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED = 1,    ///< Picture failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT;


/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN = 1,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY = 2,    ///< Picture recording is busy ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE = 3,    ///< Picture recording not available ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL = 4,    ///< Memory full ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY = 5,    ///< Battery is too low to record.
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR;


/**
 * @brief Event of video recording
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_START = 0,    ///< Video start
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_STOP = 1,    ///< Video stop and saved
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_FAILED = 2,    ///< Video failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT;


/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_UNKNOWN = 1,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_BUSY = 2,    ///< Video recording is busy ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_NOTAVAILABLE = 3,    ///< Video recording not available ; only when state is failed
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MEMORYFULL = 4,    ///< Memory full
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_LOWBATTERY = 5,    ///< Battery is too low to record.
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_AUTOSTOPPED = 6,    ///< Video was auto stopped
    ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR;


/**
 * @brief The type of wifi selection (auto, manual)
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_AUTO = 0,    ///< Auto selection
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_MANUAL = 1,    ///< Manual selection
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE;


/**
 * @brief The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_ALL = 2,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND;


/**
 * @brief The type of wifi selection settings
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_ALL = 0,    ///< Auto selection
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_2_4GHZ = 1,    ///< Auto selection 2.4ghz
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_5GHZ = 2,    ///< Auto selection 5 ghz
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL = 3,    ///< Manual selection
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE;


/**
 * @brief The actual wifi band state
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ALL = 2,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND;


/**
 * @brief The band(s) : 2.4 Ghz, 5 Ghz, or both
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_ALL = 2,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND;


/**
 * @brief The band : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND;


/**
 * @brief The band of this channel : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_MAX
} eARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND;


/**
 * @brief The audio theme to set.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_DEFAULT = 0,    ///< Default audio theme (depends on the product color)
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_ROBOT = 1,    ///< Robot audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_INSECT = 2,    ///< Insect audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_MONSTER = 3,    ///< Monster audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_MAX
} eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME;


/**
 * @brief The audio theme to set.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_DEFAULT = 0,    ///< Default audio theme (depends on the product color)
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_ROBOT = 1,    ///< Robot audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_INSECT = 2,    ///< Insect audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_MONSTER = 3,    ///< Monster audio theme.
    ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_MAX
} eARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME;


/**
 * @brief Error code.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_OK = 0,    ///< The script was parsed successfully.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_FILE_CORRUPTED = 1,    ///< The MD5 hash codes are different or file is unreadable.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_INVALID_FORMAT = 2,    ///< The parser is not well formed or can not be parsed.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_FILE_TOO_LARGE = 3,    ///< The file is larger than maximum allowed size.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_UNSUPPORTED = 4,    ///< Script version is not supported by device.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_MAX
} eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE;


/**
 * @brief Error code.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ERROR_OK = 0,    ///< The script was deleted successfully.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ERROR_NO_SUCH_SCRIPT = 1,    ///< No script with this uuid exists.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ERROR_INTERNAL_FAILURE = 2,    ///< An internal error occured while attempting to delete the script.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_MAX
} eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE;


/**
 * @brief Error code.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_STARTED = 0,    ///< The script started playing successfully.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_FINISHED = 1,    ///< The script finished successfully.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_NO_SUCH_SCRIPT = 2,    ///< No script with this uuid exists.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_ERROR = 3,    ///< An error occured while playing the script.
    ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_MAX
} eARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE;


/**
 * @brief Current video streaming status.
 */
typedef enum
{
    ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENABLED = 0,    ///< Video streaming is enabled.
    ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_DISABLED = 1,    ///< Video streaming is disabled.
    ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ERROR = 2,    ///< Video streaming failed to start.
    ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_MAX
} eARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED;

// Feature mapper

/**
 * @brief The action (mapped on a button)
 */
typedef enum
{
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_0 = 0,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_1 = 1,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_2 = 2,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_3 = 3,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_4 = 4,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_5 = 5,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_6 = 6,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_7 = 7,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_8 = 8,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_9 = 9,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_10 = 10,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_11 = 11,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_12 = 12,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_13 = 13,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_14 = 14,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_APP_15 = 15,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_BUTTON_ACTION_RETURN_HOME = 16,    ///< Return to home
    ARCOMMANDS_MAPPER_BUTTON_ACTION_TAKEOFF_LAND = 17,    ///< Take off or land
    ARCOMMANDS_MAPPER_BUTTON_ACTION_VIDEO_RECORD = 18,    ///< Start/stop video record
    ARCOMMANDS_MAPPER_BUTTON_ACTION_TAKE_PICTURE = 19,    ///< Take a picture
    ARCOMMANDS_MAPPER_BUTTON_ACTION_CAMERA_EXPOSITION_INC = 20,    ///< Increment camera exposition
    ARCOMMANDS_MAPPER_BUTTON_ACTION_CAMERA_EXPOSITION_DEC = 21,    ///< Decrement camera exposition
    ARCOMMANDS_MAPPER_BUTTON_ACTION_FLIP_LEFT = 22,    ///< Flip left
    ARCOMMANDS_MAPPER_BUTTON_ACTION_FLIP_RIGHT = 23,    ///< Flip right
    ARCOMMANDS_MAPPER_BUTTON_ACTION_FLIP_FRONT = 24,    ///< Flip front
    ARCOMMANDS_MAPPER_BUTTON_ACTION_FLIP_BACK = 25,    ///< Flip back
    ARCOMMANDS_MAPPER_BUTTON_ACTION_EMERGENCY = 26,    ///< Emergency motors shutdown
    ARCOMMANDS_MAPPER_BUTTON_ACTION_CENTER_CAMERA = 27,    ///< Reset camera to its default position
    ARCOMMANDS_MAPPER_BUTTON_ACTION_CYCLE_HUD = 28,    ///< Cycle between different hud configurations on HDMI\n(Skycontroller 1 only)
    ARCOMMANDS_MAPPER_BUTTON_ACTION_MAX
} eARCOMMANDS_MAPPER_BUTTON_ACTION;


/**
 * @brief The action (mapped on an axis)
 */
typedef enum
{
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_0 = 0,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_1 = 1,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_2 = 2,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_3 = 3,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_4 = 4,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_5 = 5,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_6 = 6,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_7 = 7,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_8 = 8,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_9 = 9,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_10 = 10,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_11 = 11,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_12 = 12,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_13 = 13,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_14 = 14,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_APP_15 = 15,    ///< Action handled by the application
    ARCOMMANDS_MAPPER_AXIS_ACTION_ROLL = 16,    ///< roll
    ARCOMMANDS_MAPPER_AXIS_ACTION_PITCH = 17,    ///< pitch
    ARCOMMANDS_MAPPER_AXIS_ACTION_YAW = 18,    ///< yaw
    ARCOMMANDS_MAPPER_AXIS_ACTION_GAZ = 19,    ///< gaz
    ARCOMMANDS_MAPPER_AXIS_ACTION_CAMERA_PAN = 20,    ///< camera pan
    ARCOMMANDS_MAPPER_AXIS_ACTION_CAMERA_TILT = 21,    ///< camera tilt
    ARCOMMANDS_MAPPER_AXIS_ACTION_MAX
} eARCOMMANDS_MAPPER_AXIS_ACTION;


/**
 * @brief Button event
 */
typedef enum
{
    ARCOMMANDS_MAPPER_BUTTON_EVENT_RELEASE = 0,    ///< button released
    ARCOMMANDS_MAPPER_BUTTON_EVENT_PRESS = 1,    ///< button pressed
    ARCOMMANDS_MAPPER_BUTTON_EVENT_MAX
} eARCOMMANDS_MAPPER_BUTTON_EVENT;


/**
 * @brief Expo type
 */
typedef enum
{
    ARCOMMANDS_MAPPER_EXPO_TYPE_LINEAR = 0,    ///< No expo applied, axis is linear
    ARCOMMANDS_MAPPER_EXPO_TYPE_EXPO_0 = 1,    ///< Light exponential curve
    ARCOMMANDS_MAPPER_EXPO_TYPE_EXPO_1 = 2,    ///< Medium exponential curve
    ARCOMMANDS_MAPPER_EXPO_TYPE_EXPO_2 = 3,    ///< Heavy exponential curve
    ARCOMMANDS_MAPPER_EXPO_TYPE_EXPO_4 = 4,    ///< Maximum exponential curve
    ARCOMMANDS_MAPPER_EXPO_TYPE_MAX
} eARCOMMANDS_MAPPER_EXPO_TYPE;

// Feature mapper_mini

/**
 * @brief The action (mapped on a button)
 */
typedef enum
{
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_TAKEOFF_LAND = 0,    ///< Take off or land
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_TAKE_PICTURE = 1,    ///< Take a picture
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_FLIP_LEFT = 2,    ///< Flip left
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_FLIP_RIGHT = 3,    ///< Flip right
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_FLIP_FRONT = 4,    ///< Flip front
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_FLIP_BACK = 5,    ///< Flip back
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_EMERGENCY = 6,    ///< Emergency motors shutdown
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_ACCESSORY_GUN = 7,    ///< Launch USB accessory gun action (shoot)
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_THROWN_TAKEOFF = 8,    ///< Thrown take off
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_CW_90_SWIPE = 9,    ///< 90 deg clockwise swipe
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_CCW_90_SWIPE = 10,    ///< 90 deg counter clockwise swipe
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_CW_180_SWIPE = 11,    ///< 180 deg clockwise swipe
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_CCW_180_SWIPE = 12,    ///< 180 deg counter clockwise swipe
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_GEAR_UP = 13,    ///< increase gear
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_GEAR_DOWN = 14,    ///< decrease gear
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_PLANE_MODE_HALF_BAREL_ROLL_RIGHT = 15,    ///< in plane mode make a 180 deg anticlockwise swipe on roll axis
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_PLANE_MODE_HALF_BAREL_ROLL_LEFT = 16,    ///< in plane mode make a 180 deg clockwise swipe on roll axis
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_PLANE_MODE_BACKSWAP = 17,    ///< in plane mode make a 180 deg clockwise swipe on pitch axis
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_PLANE_MODE_LOOPING = 18,    ///< vertical circular loop in plane mode
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_PLANE_MODE_TOGGLE = 19,    ///< switch between plane mode and quad mode
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_ACCESSORY_CLAW = 20,    ///< Launch USB accessory claw action (open/close)
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_LIGHT_CONTINUOUS = 21,    ///< switch continuous light (ON/OFF)
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_LIGHT_BLINK = 22,    ///< switch blink light (ON/OFF)
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_LIGHT_SINUS = 23,    ///< switch sinus light (ON/OFF)
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_LIGHT_TOGGLE = 24,    ///< toggle between light animations (OFF-continuous-blink-sinus-OFF)
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_PILOTING_MODE_TOGGLE = 25,    ///< toggle between easy and preferred piloting mode
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_VIDEO_RECORD_TOGGLE = 26,    ///< start or stop video
    ARCOMMANDS_MAPPER_MINI_BUTTON_ACTION_MAX
} eARCOMMANDS_MAPPER_MINI_BUTTON_ACTION;


/**
 * @brief The action (mapped on an axis)
 */
typedef enum
{
    ARCOMMANDS_MAPPER_MINI_AXIS_ACTION_ROLL = 0,    ///< roll
    ARCOMMANDS_MAPPER_MINI_AXIS_ACTION_PITCH = 1,    ///< pitch
    ARCOMMANDS_MAPPER_MINI_AXIS_ACTION_YAW = 2,    ///< yaw
    ARCOMMANDS_MAPPER_MINI_AXIS_ACTION_GAZ = 3,    ///< gaz
    ARCOMMANDS_MAPPER_MINI_AXIS_ACTION_MAX
} eARCOMMANDS_MAPPER_MINI_AXIS_ACTION;


/**
 * @brief The piloting mode of the product
 */
typedef enum
{
    ARCOMMANDS_MAPPER_MINI_MODE_QUAD = 0,    ///< Quadricopter mode
    ARCOMMANDS_MAPPER_MINI_MODE_PLANE = 1,    ///< Plane mode
    ARCOMMANDS_MAPPER_MINI_MODE_MAX
} eARCOMMANDS_MAPPER_MINI_MODE;

#define ARCOMMANDS_FLAG_MAPPER_MINI_MODE_QUAD (UINT32_C(1) << ARCOMMANDS_MAPPER_MINI_MODE_QUAD)    ///< Quadricopter mode
#define ARCOMMANDS_FLAG_MAPPER_MINI_MODE_PLANE (UINT32_C(1) << ARCOMMANDS_MAPPER_MINI_MODE_PLANE)    ///< Plane mode

// Feature MiniDrone

/**
 * @brief Drone Flying Mode
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE_QUADRICOPTER = 0,    ///< Fly as a quadrictopter
    ARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE_PLANE_FORWARD = 1,    ///< Fly as a plane in forward mode
    ARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE_PLANE_BACKWARD = 2,    ///< Fly as a plane in backward mode
    ARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE_MAX
} eARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE;


/**
 * @brief Plane Gear Box
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE_GEAR_1 = 0,    ///< Gear 1. Low speed
    ARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE_GEAR_2 = 1,    ///< Gear 2. Middle speed
    ARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE_GEAR_3 = 2,    ///< Gear 3. High speed
    ARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE_MAX
} eARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE;


/**
 * @brief Drone flying state
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDED = 0,    ///< Landed state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_TAKINGOFF = 1,    ///< Taking off state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_HOVERING = 2,    ///< Hovering state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_FLYING = 3,    ///< Flying state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDING = 4,    ///< Landing state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY = 5,    ///< Emergency state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_ROLLING = 6,    ///< Rolling state
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_INIT = 7,    ///< Initializing state (user should let the drone steady for a while)
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_MAX
} eARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE;


/**
 * @brief Drone alert state
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE = 0,    ///< No alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_USER = 1,    ///< User emergency alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CUT_OUT = 2,    ///< Cut out alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY = 3,    ///< Critical battery alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY = 4,    ///< Low battery alert
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_MAX
} eARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE;


/**
 * @brief Drone Flying Mode
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE_QUADRICOPTER = 0,    ///< Fly as a quadrictopter
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE_PLANE_FORWARD = 1,    ///< Fly as a plane in forward mode
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE_PLANE_BACKWARD = 2,    ///< Fly as a plane in backward mode
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE_MAX
} eARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE;


/**
 * @brief Plane Gear Box
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE_GEAR_1 = 0,    ///< Gear 1. Low speed
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE_GEAR_2 = 1,    ///< Gear 2. Middle speed
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE_GEAR_3 = 2,    ///< Gear 3. High speed
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE_MAX
} eARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE;


/**
 * @brief 
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE_EASY = 0,    ///< The flight envelope of Mambo FPV has been divided in three piloting modes.\nThe first one corresponds to the well-known flying mode currently used for\nMambo, which is based in an horizontal stabilisation (performed via the\nvertical camera and the acceleration information) and a vertical acceleration\n(by means of the ultrasound, the barometer and the vertical accelerometer) in\norder for the drone to stay in fixed point position when no piloting commands\nare sent by the user.
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE_MEDIUM = 1,    ///< The second piloting mode consists of deactivating the horizontal stabilisation.\nThus, in this flying mode, when no piloting command is received, the drone will\ntry to stay at 0° tilt angle instead of responding to a 0 m/s horizontal speed\nreference. This behaviour will result in a slight horizontal drift.
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE_DIFFICULT = 2,    ///< The third piloting mode also adds the vertical stabilisation deactivation and,\ntherefore, a slight vertical drift. When flying in the third mode, a closed\nloop height control is no longer performed in order for the drone to keep a\ncertain height and vertical speed. Instead, the vertical command coming from\nthe user will directly generate an open loop acceleration command.
    ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE_MAX
} eARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE;


/**
 * @brief Direction for the flip
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_FRONT = 0,    ///< Flip direction front
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_BACK = 1,    ///< Flip direction back
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_RIGHT = 2,    ///< Flip direction right
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_LEFT = 3,    ///< Flip direction left
    ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_MAX
} eARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION;


/**
 * @brief State of device picture recording
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY = 0,    ///< The picture recording is ready
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY = 1,    ///< The picture recording is busy
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE = 2,    ///< The picture recording is not available
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE;


/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN = 1,    ///< Unknown generic error
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO = 2,    ///< Picture camera is out of order
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL = 3,    ///< Memory full ; cannot save one additional picture
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY = 4,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR;


/**
 * @brief Last event of picture recording
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN = 0,    ///< Picture taken and saved
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED = 1,    ///< Picture failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT;


/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN = 1,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY = 2,    ///< Picture recording is busy ; only when state is failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE = 3,    ///< Picture recording not available ; only when state is failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL = 4,    ///< Memory full ; only when state is failed
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY = 5,    ///< Battery is too low to record.
    ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR;


/**
 * @brief Piloting modes.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE_EASY = 0,    ///< The flight envelope of Mambo FPV has been divided in three piloting modes.\nThe first one corresponds to the well-known flying mode currently used for\nMambo, which is based in an horizontal stabilisation (performed via the\nvertical camera and the acceleration information) and a vertical acceleration\n(by means of the ultrasound, the barometer and the vertical accelerometer) in\norder for the drone to stay in fixed point position when no piloting commands\nare sent by the user.
    ARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE_MEDIUM = 1,    ///< The second piloting mode consists of deactivating the horizontal stabilisation.\nThus, in this flying mode, when no piloting command is received, the drone will\ntry to stay at 0° tilt angle instead of responding to a 0 m/s horizontal speed\nreference. This behaviour will result in a slight horizontal drift.
    ARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE_DIFFICULT = 2,    ///< The third piloting mode also adds the vertical stabilisation deactivation and,\ntherefore, a slight vertical drift. When flying in the third mode, a closed\nloop height control is no longer performed in order for the drone to keep a\ncertain height and vertical speed. Instead, the vertical command coming from\nthe user will directly generate an open loop acceleration command.
    ARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE_MAX
} eARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE;


/**
 * @brief 
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE_EASY = 0,    ///< The flight envelope of Mambo FPV has been divided in three piloting modes.\nThe first one corresponds to the well-known flying mode currently used for\nMambo, which is based in an horizontal stabilisation (performed via the\nvertical camera and the acceleration information) and a vertical acceleration\n(by means of the ultrasound, the barometer and the vertical accelerometer) in\norder for the drone to stay in fixed point position when no piloting commands\nare sent by the user.
    ARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE_MEDIUM = 1,    ///< The second piloting mode consists of deactivating the horizontal stabilisation.\nThus, in this flying mode, when no piloting command is received, the drone will\ntry to stay at 0° tilt angle instead of responding to a 0 m/s horizontal speed\nreference. This behaviour will result in a slight horizontal drift.
    ARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE_DIFFICULT = 2,    ///< The third piloting mode also adds the vertical stabilisation deactivation and,\ntherefore, a slight vertical drift. When flying in the third mode, a closed\nloop height control is no longer performed in order for the drone to keep a\ncertain height and vertical speed. Instead, the vertical command coming from\nthe user will directly generate an open loop acceleration command.
    ARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE_MAX
} eARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE;


/**
 * @brief Usb Light state.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE_FIXED = 0,    ///< Fixed state at given intensity.
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE_BLINKED = 1,    ///< Blinked state.
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE_OSCILLATED = 2,    ///< Oscillated state.
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE_MAX
} eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE;


/**
 * @brief Usb Claw state.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE_OPENED = 0,    ///< Claw is fully opened.
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE_OPENING = 1,    ///< Claw open in progress.
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE_CLOSED = 2,    ///< Claw is fully closed.
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE_CLOSING = 3,    ///< Claw close in progress.
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE_MAX
} eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE;


/**
 * @brief USB Claw state.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE_READY = 0,    ///< Gun is ready to fire.
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE_BUSY = 1,    ///< Gun is busy (ie not ready to fire).
    ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE_MAX
} eARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE;


/**
 * @brief Usb Light mode.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE_FIXED = 0,    ///< Turn light in fixed state at a given intensity.
    ARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE_BLINKED = 1,    ///< Turn light in blinked state.
    ARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE_OSCILLATED = 2,    ///< Turn light in oscillated state.
    ARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE_MAX
} eARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE;


/**
 * @brief USB Claw action.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION_OPEN = 0,    ///< Open Claw.
    ARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION_CLOSE = 1,    ///< Close Claw.
    ARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION_MAX
} eARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION;


/**
 * @brief USB Gun action.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_USBACCESSORY_GUNCONTROL_ACTION_FIRE = 0,    ///< Fire.
    ARCOMMANDS_MINIDRONE_USBACCESSORY_GUNCONTROL_ACTION_MAX
} eARCOMMANDS_MINIDRONE_USBACCESSORY_GUNCONTROL_ACTION;


/**
 * @brief Power mode of the camera.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE_LOW = 0,    ///< Low power: most hardware is powered off, wake up via USB resume.\n\nUsed when charging.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE_MEDIUM = 1,    ///< Medium power: video hardware is powered off.\n\nUsed when drone is not flying during more than 3 minutes.\nNote that it can still stream the SD content.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE_NORMAL = 2,    ///< Normal power: all features are available.\n\nUsed when flying.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE_MAX
} eARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE;


/**
 * @brief State of the camera.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE_UNPLUGGED = 0,    ///< Minicam is unplugged.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE_PLUGGED = 1,    ///< Minicam is plugged, but not ready.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE_READY = 2,    ///< Minicam is ready.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE_MAX
} eARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE;


/**
 * @brief State of device picture recording.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE_READY = 0,    ///< Picture recording is ready.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE_BUSY = 1,    ///< Picture recording is busy.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE_NOT_AVAILABLE = 2,    ///< Picture recording is not available.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE_MAX
} eARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE;


/**
 * @brief Result of device picture recording.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_SUCCESS = 0,    ///< Success.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_FULL_DEVICE = 1,    ///< Device is full.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_CONTINUOUS_SHOOTING = 2,    ///< Continuous shooting is already running.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_FULL_QUEUE = 3,    ///< Over snapshot max queue size.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_ERROR = 4,    ///< Couldn't take picture.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_NO_SD = 5,    ///< SD card doesn't exist.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_SD_BAD_FORMAT = 6,    ///< SD card format error.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_SD_FORMATTING = 7,    ///< SD card is formatting.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_MAX
} eARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT;


/**
 * @brief State of device video recording.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE_STOPPED = 0,    ///< Video is stopped.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE_STARTED = 1,    ///< Video is started.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE_NOTAVAILABLE = 2,    ///< The video recording is not available.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE_MAX
} eARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE;


/**
 * @brief Error to explain the state.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_OK = 0,    ///< No Error.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_UNKNOWN = 1,    ///< Unknown generic error.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_CAMERA_KO = 2,    ///< Video camera is out of order.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_MEMORYFULL = 3,    ///< Memory full ; cannot save one additional video.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_LOWBATTERY = 4,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_NO_SD = 5,    ///< SD card doesn't exist.
    ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_MAX
} eARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR;


/**
 * @brief Type of the electric frequency.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_ELECTRICFREQUENCY_FREQUENCY_FIFTY_HERTZ = 0,    ///< Electric frequency of the country is 50hz.
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_ELECTRICFREQUENCY_FREQUENCY_SIXTY_HERTZ = 1,    ///< Electric frequency of the country is 60hz.
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_ELECTRICFREQUENCY_FREQUENCY_MAX
} eARCOMMANDS_MINIDRONE_VIDEOSETTINGS_ELECTRICFREQUENCY_FREQUENCY;


/**
 * @brief Video resolution type.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_VIDEORESOLUTION_TYPE_VGA = 0,    ///< 16/9 VGA streaming (640 x 360).
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_VIDEORESOLUTION_TYPE_HD = 1,    ///< HD streaming (1280 x 720).
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_VIDEORESOLUTION_TYPE_MAX
} eARCOMMANDS_MINIDRONE_VIDEOSETTINGS_VIDEORESOLUTION_TYPE;


/**
 * @brief Type of the electric frequency.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_FIFTY_HERTZ = 0,    ///< Electric frequency of the country is 50hz.
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_SIXTY_HERTZ = 1,    ///< Electric frequency of the country is 60hz.
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_MAX
} eARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY;


/**
 * @brief Video resolution type.
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE_VGA = 0,    ///< 16/9 VGA streaming (640 x 360).
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE_HD = 1,    ///< HD streaming (1280 x 720).
    ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE_MAX
} eARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE;


/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_MINIDRONE_MINICAM_VIDEO_RECORD_STOP = 0,    ///< Stop the video recording.
    ARCOMMANDS_MINIDRONE_MINICAM_VIDEO_RECORD_START = 1,    ///< Start the video recording.
    ARCOMMANDS_MINIDRONE_MINICAM_VIDEO_RECORD_MAX
} eARCOMMANDS_MINIDRONE_MINICAM_VIDEO_RECORD;

// Feature powerup

/**
 * @brief 
 */
typedef enum
{
    ARCOMMANDS_POWERUP_PILOTING_MOTORMODE_MODE_NORMAL = 0,    ///< The motors will only start on user action after being in state user take off
    ARCOMMANDS_POWERUP_PILOTING_MOTORMODE_MODE_FORCED = 1,    ///< Motors will use the current pcmd values without considering the flying state
    ARCOMMANDS_POWERUP_PILOTING_MOTORMODE_MODE_MAX
} eARCOMMANDS_POWERUP_PILOTING_MOTORMODE_MODE;


/**
 * @brief JS alert state
 */
typedef enum
{
    ARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE = 0,    ///< No alert
    ARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY = 1,    ///< Critical battery alert
    ARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY = 2,    ///< Low battery alert
    ARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE_MAX
} eARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE;


/**
 * @brief Drone flying state
 */
typedef enum
{
    ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDED = 0,    ///< Landed state
    ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_TAKINGOFF = 1,    ///< Taking off state
    ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_FLYING = 2,    ///< Flying state
    ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_RECOVERY = 3,    ///< Recovery state
    ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY = 4,    ///< Emergency state
    ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_USERTAKEOFF = 5,    ///< User take off state. Waiting for user action to take off.
    ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_INIT = 6,    ///< Initializing state (user should let the drone steady for a while)
    ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_MAX
} eARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE;


/**
 * @brief 
 */
typedef enum
{
    ARCOMMANDS_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE_NORMAL = 0,    ///< The motors will only start on user action after being in state user take off
    ARCOMMANDS_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE_FORCED = 1,    ///< Motors will use the current pcmd values without considering the flying state
    ARCOMMANDS_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE_MAX
} eARCOMMANDS_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE;


/**
 * @brief Variety of setting that can be customized
 */
typedef enum
{
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_MAX_ROLL = 0,    ///< Max roll value. In degree.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ROLL_KP = 1,    ///< How fast the plane reaches the desired roll angle. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ROLL_RATE_KP = 2,    ///< How fast the plane reaches the desired roll rate. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_MAX_PITCH = 3,    ///< Max pitch value. In degree.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_MIN_PITCH = 4,    ///< Min pitch value. In degree.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_PITCH_KP = 5,    ///< How fast the plane reaches the desired pitch angle. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_PITCH_RATE_KP = 6,    ///< How fast the plane reaches the desired pitch rate. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_YAW_KP = 7,    ///< How fast the plane reaches the desired yaw angle. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_YAW_RATE_KP = 8,    ///< How fast the plane reaches the desired yaw rate. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ROLL_TO_THROTTLE_RATE = 9,    ///< Portion of thrust that is added to motors according to the roll/yaw\ncommand to compensate a dive during turn. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ANGLE_OF_ATTACK = 10,    ///< Angle of attack of a plane needed horizontal flight.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ALT_HOLD = 11,    ///< Altitude hold during autopilot. 0 for false, other value for true.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ALT_HOLD_THROTTLE = 12,    ///< Altitude hold throttle. Expressed in percentage divided by 100 (from 0 to 1).
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_DR_RSSI_EDGE = 13,    ///< Rssi value that indicates that the airplane is close to the pilot.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_RECOVERY_DURATION_LIMIT = 14,    ///< Limit time for return home duration. In seconds.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_WIND_SPEED = 15,    ///< Wind speed in m/s. Should be sent before flight.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_PLANE_SPEED = 16,    ///< Target plane speed in m/s. Should be sent before flight.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_MAX
} eARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING;


/**
 * @brief Variety of setting that can be customized
 */
typedef enum
{
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_MAX_ROLL = 0,    ///< Max roll value. In degree.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ROLL_KP = 1,    ///< How fast the plane reaches the desired roll angle. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ROLL_RATE_KP = 2,    ///< How fast the plane reaches the desired roll rate. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_MAX_PITCH = 3,    ///< Max pitch value. In degree.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_MIN_PITCH = 4,    ///< Min pitch value. In degree.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_PITCH_KP = 5,    ///< How fast the plane reaches the desired pitch angle. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_PITCH_RATE_KP = 6,    ///< How fast the plane reaches the desired pitch rate. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_YAW_KP = 7,    ///< How fast the plane reaches the desired yaw angle. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_YAW_RATE_KP = 8,    ///< How fast the plane reaches the desired yaw rate. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ROLL_TO_THROTTLE_RATE = 9,    ///< Portion of thrust that is added to motors according to the roll/yaw\ncommand to compensate a dive during turn. No unit.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ANGLE_OF_ATTACK = 10,    ///< Angle of attack of a plane needed horizontal flight.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ALT_HOLD = 11,    ///< Altitude hold during autopilot. 0 for false, other value for true.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ALT_HOLD_THROTTLE = 12,    ///< Altitude hold throttle. Expressed in percentage divided by 100 (from 0 to 1).
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_DR_RSSI_EDGE = 13,    ///< Rssi value that indicates that the airplane is close to the pilot.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_RECOVERY_DURATION_LIMIT = 14,    ///< Limit time for return home duration. In seconds.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_WIND_SPEED = 15,    ///< Wind speed in m/s.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_PLANE_SPEED = 16,    ///< Target plane speed in m/s.
    ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_MAX
} eARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING;


/**
 * @brief Command to record video
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIARECORD_VIDEOV2_RECORD_STOP = 0,    ///< Stop the video recording
    ARCOMMANDS_POWERUP_MEDIARECORD_VIDEOV2_RECORD_START = 1,    ///< Start the video recording
    ARCOMMANDS_POWERUP_MEDIARECORD_VIDEOV2_RECORD_MAX
} eARCOMMANDS_POWERUP_MEDIARECORD_VIDEOV2_RECORD;


/**
 * @brief State of device picture recording
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY = 0,    ///< The picture recording is ready
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY = 1,    ///< The picture recording is busy
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE = 2,    ///< The picture recording is not available
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE;


/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN = 1,    ///< Unknown generic error
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO = 2,    ///< Picture camera is out of order
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL = 3,    ///< Memory full ; cannot save one additional picture
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY = 4,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR;


/**
 * @brief State of device video recording
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STOPPED = 0,    ///< Video is stopped
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STARTED = 1,    ///< Video is started
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_NOTAVAILABLE = 2,    ///< The video recording is not available
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_MAX
} eARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE;


/**
 * @brief Error to explain the state
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_UNKNOWN = 1,    ///< Unknown generic error
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_CAMERA_KO = 2,    ///< Video camera is out of order
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MEMORYFULL = 3,    ///< Memory full ; cannot save one additional video
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_LOWBATTERY = 4,    ///< Battery is too low to start/keep recording.
    ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MAX
} eARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR;


/**
 * @brief Last event of picture recording
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN = 0,    ///< Picture taken and saved
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED = 1,    ///< Picture failed
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT;


/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN = 1,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY = 2,    ///< Picture recording is busy ; only when state is failed
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE = 3,    ///< Picture recording not available ; only when state is failed
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL = 4,    ///< Memory full ; only when state is failed
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY = 5,    ///< Battery is too low to record.
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR;


/**
 * @brief Event of video recording
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_START = 0,    ///< Video start
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_STOP = 1,    ///< Video stop and saved
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_FAILED = 2,    ///< Video failed
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_MAX
} eARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT;


/**
 * @brief Error to explain the event
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_OK = 0,    ///< No Error
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_UNKNOWN = 1,    ///< Unknown generic error ; only when state is failed
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_BUSY = 2,    ///< Video recording is busy ; only when state is failed
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_NOTAVAILABLE = 3,    ///< Video recording not available ; only when state is failed
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MEMORYFULL = 4,    ///< Memory full
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_LOWBATTERY = 5,    ///< Battery is too low to record.
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_AUTOSTOPPED = 6,    ///< Video was auto stopped
    ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MAX
} eARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR;


/**
 * @brief The type of wifi selection (auto, manual)
 */
typedef enum
{
    ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_TYPE_AUTO = 0,    ///< Auto selection
    ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_TYPE_MANUAL = 1,    ///< Manual selection
    ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_TYPE_MAX
} eARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_TYPE;


/**
 * @brief The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
 */
typedef enum
{
    ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND_ALL = 2,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND_MAX
} eARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND;


/**
 * @brief The type of wifi selection settings
 */
typedef enum
{
    ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_ALL = 0,    ///< Auto selection
    ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_2_4GHZ = 1,    ///< Auto selection 2.4ghz
    ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_5GHZ = 2,    ///< Auto selection 5 ghz
    ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL = 3,    ///< Manual selection
    ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MAX
} eARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE;


/**
 * @brief The actual wifi band state
 */
typedef enum
{
    ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ALL = 2,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_MAX
} eARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND;


/**
 * @brief The band(s) : 2.4 Ghz, 5 Ghz, or both
 */
typedef enum
{
    ARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND_ALL = 2,    ///< Both 2.4 and 5 GHz bands
    ARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND_MAX
} eARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND;


/**
 * @brief The band : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_MAX
} eARCOMMANDS_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND;


/**
 * @brief The band of this channel : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_MAX
} eARCOMMANDS_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND;


/**
 * @brief Current video streaming status.
 */
typedef enum
{
    ARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENABLED = 0,    ///< Video streaming is enabled.
    ARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_DISABLED = 1,    ///< Video streaming is disabled.
    ARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ERROR = 2,    ///< Video streaming failed to start.
    ARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_MAX
} eARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED;


/**
 * @brief Video mode
 */
typedef enum
{
    ARCOMMANDS_POWERUP_VIDEOSETTINGS_VIDEOMODE_MODE_QUALITY = 0,    ///< Maximize video quality (VGA 30fps).
    ARCOMMANDS_POWERUP_VIDEOSETTINGS_VIDEOMODE_MODE_PERFORMANCE = 1,    ///< Maximize video performance (QVGA 24fps).
    ARCOMMANDS_POWERUP_VIDEOSETTINGS_VIDEOMODE_MODE_MAX
} eARCOMMANDS_POWERUP_VIDEOSETTINGS_VIDEOMODE_MODE;


/**
 * @brief Video mode
 */
typedef enum
{
    ARCOMMANDS_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE_QUALITY = 0,    ///< Maximize video quality (VGA 30fps).
    ARCOMMANDS_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE_PERFORMANCE = 1,    ///< Maximize video performance (QVGA 24fps).
    ARCOMMANDS_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE_MAX
} eARCOMMANDS_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE;

// Feature rc

/**
 * @brief RC Receiver state.
 */
typedef enum
{
    ARCOMMANDS_RC_RECEIVER_STATE_CONNECTED = 0,    ///< RC drone receiver connected to a RC.
    ARCOMMANDS_RC_RECEIVER_STATE_DISCONNECTED = 1,    ///< RC drone receiver not connected to a RC.
    ARCOMMANDS_RC_RECEIVER_STATE_MAX
} eARCOMMANDS_RC_RECEIVER_STATE;


/**
 * @brief Channel action.
 */
typedef enum
{
    ARCOMMANDS_RC_CHANNEL_ACTION_INVALID = 0,    ///< Invalid/Unused channel.
    ARCOMMANDS_RC_CHANNEL_ACTION_ROLL = 1,    ///< Roll axis channel.
    ARCOMMANDS_RC_CHANNEL_ACTION_PITCH = 2,    ///< Pitch axis channel.
    ARCOMMANDS_RC_CHANNEL_ACTION_YAW = 3,    ///< Yaw axis channel.
    ARCOMMANDS_RC_CHANNEL_ACTION_GAZ = 4,    ///< Gaz / Throttle / Altitude axis channel.
    ARCOMMANDS_RC_CHANNEL_ACTION_TAKEOFF_LAND = 5,    ///< Takeoff / Land channel.
    ARCOMMANDS_RC_CHANNEL_ACTION_EMERGENCY = 6,    ///< Emergency channel.
    ARCOMMANDS_RC_CHANNEL_ACTION_RETURN_HOME = 7,    ///< Return Home channel.
    ARCOMMANDS_RC_CHANNEL_ACTION_PILOTING_MODE = 8,    ///< RC Piloting mode.\nAuto mode: used for doing flightplans and for assisted flying\nwith a non-RC controller.\nEasy manual mode: used for assisted flying with a RC controller.\nManual mode: used for non-assisted flying with a RC controller and\nfor directly controlling the servomotors.
    ARCOMMANDS_RC_CHANNEL_ACTION_TAKE_CONTROL = 9,    ///< RC take control.\nWhen take control is activated the RC controller, if\navailable, becomes the main controller.
    ARCOMMANDS_RC_CHANNEL_ACTION_MAX
} eARCOMMANDS_RC_CHANNEL_ACTION;

#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_INVALID (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_INVALID)    ///< Invalid/Unused channel.
#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_ROLL (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_ROLL)    ///< Roll axis channel.
#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_PITCH (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_PITCH)    ///< Pitch axis channel.
#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_YAW (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_YAW)    ///< Yaw axis channel.
#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_GAZ (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_GAZ)    ///< Gaz / Throttle / Altitude axis channel.
#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_TAKEOFF_LAND (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_TAKEOFF_LAND)    ///< Takeoff / Land channel.
#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_EMERGENCY (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_EMERGENCY)    ///< Emergency channel.
#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_RETURN_HOME (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_RETURN_HOME)    ///< Return Home channel.
#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_PILOTING_MODE (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_PILOTING_MODE)    ///< RC Piloting mode.\nAuto mode: used for doing flightplans and for assisted flying\nwith a non-RC controller.\nEasy manual mode: used for assisted flying with a RC controller.\nManual mode: used for non-assisted flying with a RC controller and\nfor directly controlling the servomotors.
#define ARCOMMANDS_FLAG_RC_CHANNEL_ACTION_TAKE_CONTROL (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_ACTION_TAKE_CONTROL)    ///< RC take control.\nWhen take control is activated the RC controller, if\navailable, becomes the main controller.


/**
 * @brief Calibration type.
 */
typedef enum
{
    ARCOMMANDS_RC_CALIBRATION_TYPE_NONE = 0,    ///< No calibration.
    ARCOMMANDS_RC_CALIBRATION_TYPE_NEUTRAL = 1,    ///< All neutral channels calibration.
    ARCOMMANDS_RC_CALIBRATION_TYPE_MIN_MAX = 2,    ///< Min/Max specific channel calibration.
    ARCOMMANDS_RC_CALIBRATION_TYPE_MAX
} eARCOMMANDS_RC_CALIBRATION_TYPE;


/**
 * @brief Channel physical type.
 */
typedef enum
{
    ARCOMMANDS_RC_CHANNEL_TYPE_INVALID = 0,    ///< Invalid channel physical type.
    ARCOMMANDS_RC_CHANNEL_TYPE_SIGNED_AXIS = 1,    ///< Signed axis type.
    ARCOMMANDS_RC_CHANNEL_TYPE_UNSIGNED_AXIS = 2,    ///< Unsigned axis type.
    ARCOMMANDS_RC_CHANNEL_TYPE_MONOSTABLE_BUTTON = 3,    ///< Monostable button type.
    ARCOMMANDS_RC_CHANNEL_TYPE_BISTABLE_BUTTON = 4,    ///< Bistable button type.
    ARCOMMANDS_RC_CHANNEL_TYPE_TRISTATE_BUTTON = 5,    ///< Tristate button type.
    ARCOMMANDS_RC_CHANNEL_TYPE_ROTARY_BUTTON = 6,    ///< Rotary button type.
    ARCOMMANDS_RC_CHANNEL_TYPE_MAX
} eARCOMMANDS_RC_CHANNEL_TYPE;

#define ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_INVALID (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_TYPE_INVALID)    ///< Invalid channel physical type.
#define ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_SIGNED_AXIS (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_TYPE_SIGNED_AXIS)    ///< Signed axis type.
#define ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_UNSIGNED_AXIS (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_TYPE_UNSIGNED_AXIS)    ///< Unsigned axis type.
#define ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_MONOSTABLE_BUTTON (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_TYPE_MONOSTABLE_BUTTON)    ///< Monostable button type.
#define ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_BISTABLE_BUTTON (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_TYPE_BISTABLE_BUTTON)    ///< Bistable button type.
#define ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_TRISTATE_BUTTON (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_TYPE_TRISTATE_BUTTON)    ///< Tristate button type.
#define ARCOMMANDS_FLAG_RC_CHANNEL_TYPE_ROTARY_BUTTON (UINT32_C(1) << ARCOMMANDS_RC_CHANNEL_TYPE_ROTARY_BUTTON)    ///< Rotary button type.

// Feature SkyController

/**
 * @brief Wifi status
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_CONNECTED = 0,    ///< Connected
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_ERROR = 1,    ///< Error
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_DISCONNECTED = 2,    ///< Disconnected
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_MAX
} eARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS;


/**
 * @brief The band of this channel : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_MAX
} eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND;


/**
 * @brief The band of this channel : 2.4 GHz or 5 GHz
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND_MAX
} eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND;


/**
 * @brief Type of environment
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT_INDOOR = 0,    ///< indoor environment
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT_OUTDOOR = 1,    ///< outdoor environment
    ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT_MAX
} eARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT;


/**
 * @brief Connection status
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_NOTCONNECTED = 0,    ///< Not Connected
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_CONNECTING = 1,    ///< Connecting to Drone
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_CONNECTED = 2,    ///< Connected to Drone
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_DISCONNECTING = 3,    ///< Disconnecting from Drone
    ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_MAX
} eARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS;


/**
 * @brief Variant of the product
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT_BEBOP = 0,    ///< SkyController of the bebop generation.\n(Bebop battery, original key layout, red/blue/yellow)
    ARCOMMANDS_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT_BEBOP2 = 1,    ///< SkyController of the bebop2 generation.\n(Bebop2 battery, updated key layout, black)
    ARCOMMANDS_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT_MAX
} eARCOMMANDS_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT;


/**
 * @brief Current battery state
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_CHARGING = 0,    ///< Battery is charging
    ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_CHARGED = 1,    ///< Battery is fully charged
    ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_DISCHARGING = 2,    ///< Battery is discharging (normal case when on and unplugged)
    ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_DISCHARGING_LOW = 3,    ///< Battery is low (Can still work for a few minutes)
    ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_DISCHARGING_CRITICAL = 4,    ///< Battery is critically low (the product will automatically shut down if not plugged)
    ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_MAX
} eARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE;


/**
 * @brief The type of wifi selection (only manual at the moment)
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE_MANUAL = 0,    ///< Manual selection
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE;


/**
 * @brief The allowed band : 2.4 Ghz or 5 Ghz
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND;


/**
 * @brief The type of security for the network
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISECURITY_SECURITY_TYPE_OPEN = 0,    ///< Wifi is not protected (default)
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISECURITY_SECURITY_TYPE_WPA2 = 1,    ///< Wifi is protected by wpa2
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISECURITY_SECURITY_TYPE_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISECURITY_SECURITY_TYPE;


/**
 * @brief The type of wifi selection (only manual at the moment)
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL = 0,    ///< Manual selection
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE;


/**
 * @brief The allowed band : 2.4 Ghz or 5 Ghz
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND;


/**
 * @brief The type of security for the network
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE_OPEN = 0,    ///< Wifi is not protected (default)
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE_WPA2 = 1,    ///< Wifi is protected by wpa2
    ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE_MAX
} eARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE;


/**
 * @brief The type (axis/button) of the control
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE_AXIS = 0,    ///< An analog axis (one of the 4 joysticks)
    ARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE_BUTTON = 1,    ///< A button (including small joystick clicks)
    ARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE_MAX
} eARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE;


/**
 * @brief The new piloting source
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE_SKYCONTROLLER = 0,    ///< Use the SkyController joysticks
    ARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE_CONTROLLER = 1,    ///< Use the Tablet (or smartphone, or whatever) controls\nDisables the SkyController joysticks
    ARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE_MAX
} eARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE;


/**
 * @brief The source
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE_SKYCONTROLLER = 0,    ///< Use the SkyController joysticks
    ARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE_CONTROLLER = 1,    ///< Use the Tablet (or smartphone, or whatever) controls\nDisables the SkyController joysticks
    ARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE_MAX
} eARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE;


/**
 * @brief The global status of the calibration
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_UNRELIABLE = 0,    ///< A calibration is needed
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_ASSESSING = 1,    ///< A calibration is applied, but still need to be checked
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_CALIBRATED = 2,    ///< The sensor is properly calibrated
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_MAX
} eARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS;


/**
 * @brief The calibration state
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_NOTCALIBRATED = 0,    ///< A calibration is needed
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_CALIBRATINGX = 1,    ///< A calibration is in progress on the X axis
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_CALIBRATINGY = 2,    ///< A calibration is in progress on the Y axis
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_CALIBRATINGZ = 3,    ///< A calibration is in progress on the Z axis
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_CALIBRATED = 4,    ///< The sensor is calibrated
    ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_MAX
} eARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE;


/**
 * @brief Reason of the shutdown of the product
 */
typedef enum
{
    ARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON_POWEROFF_BUTTON = 0,    ///< The power off button has been pressed
    ARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON_UPDATE = 1,    ///< The product is going to be updated
    ARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON_LOW_BATTERY = 2,    ///< The product battery is too low.
    ARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON_FACTORY_RESET = 3,    ///< The product is going to be factory reset
    ARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON_MAX
} eARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON;

// Feature thermal_cam

/**
 * @brief Camera state
 */
typedef enum
{
    ARCOMMANDS_THERMAL_CAM_STATE_ACTIVATED = 0,    ///< Camera is activated
    ARCOMMANDS_THERMAL_CAM_STATE_DEACTIVATED = 1,    ///< Camera is deactivated
    ARCOMMANDS_THERMAL_CAM_STATE_PENDING = 2,    ///< Activation is pending
    ARCOMMANDS_THERMAL_CAM_STATE_MAX
} eARCOMMANDS_THERMAL_CAM_STATE;


/**
 * @brief Thermal range
 */
typedef enum
{
    ARCOMMANDS_THERMAL_CAM_RANGE_HIGH = 0,    ///< High range (from 0 to 400°C)
    ARCOMMANDS_THERMAL_CAM_RANGE_LOW = 1,    ///< Low range (from 0 to 120°C)
    ARCOMMANDS_THERMAL_CAM_RANGE_MAX
} eARCOMMANDS_THERMAL_CAM_RANGE;

#define ARCOMMANDS_FLAG_THERMAL_CAM_RANGE_HIGH (UINT32_C(1) << ARCOMMANDS_THERMAL_CAM_RANGE_HIGH)    ///< High range (from 0 to 400°C)
#define ARCOMMANDS_FLAG_THERMAL_CAM_RANGE_LOW (UINT32_C(1) << ARCOMMANDS_THERMAL_CAM_RANGE_LOW)    ///< Low range (from 0 to 120°C)

// Feature wifi

/**
 * @brief The band : 2.4 Ghz or 5 Ghz
 */
typedef enum
{
    ARCOMMANDS_WIFI_BAND_2_4_GHZ = 0,    ///< 2.4 GHz band
    ARCOMMANDS_WIFI_BAND_5_GHZ = 1,    ///< 5 GHz band
    ARCOMMANDS_WIFI_BAND_MAX
} eARCOMMANDS_WIFI_BAND;

#define ARCOMMANDS_FLAG_WIFI_BAND_2_4_GHZ (UINT32_C(1) << ARCOMMANDS_WIFI_BAND_2_4_GHZ)    ///< 2.4 GHz band
#define ARCOMMANDS_FLAG_WIFI_BAND_5_GHZ (UINT32_C(1) << ARCOMMANDS_WIFI_BAND_5_GHZ)    ///< 5 GHz band


/**
 * @brief The wifi selection type available
 */
typedef enum
{
    ARCOMMANDS_WIFI_SELECTION_TYPE_AUTO_ALL = 0,    ///< Auto selection on all channels
    ARCOMMANDS_WIFI_SELECTION_TYPE_AUTO_2_4_GHZ = 1,    ///< Auto selection 2.4ghz
    ARCOMMANDS_WIFI_SELECTION_TYPE_AUTO_5_GHZ = 2,    ///< Auto selection 5 ghz
    ARCOMMANDS_WIFI_SELECTION_TYPE_MANUAL = 3,    ///< manual selection
    ARCOMMANDS_WIFI_SELECTION_TYPE_MAX
} eARCOMMANDS_WIFI_SELECTION_TYPE;


/**
 * @brief The type of wifi security (open, wpa2)
 */
typedef enum
{
    ARCOMMANDS_WIFI_SECURITY_TYPE_OPEN = 0,    ///< Wifi is not protected by any security (default)
    ARCOMMANDS_WIFI_SECURITY_TYPE_WPA2 = 1,    ///< Wifi is protected by wpa2
    ARCOMMANDS_WIFI_SECURITY_TYPE_MAX
} eARCOMMANDS_WIFI_SECURITY_TYPE;


/**
 * @brief Type of the key sent
 */
typedef enum
{
    ARCOMMANDS_WIFI_SECURITY_KEY_TYPE_PLAIN = 0,    ///< Key is plain text, not encrypted
    ARCOMMANDS_WIFI_SECURITY_KEY_TYPE_MAX
} eARCOMMANDS_WIFI_SECURITY_KEY_TYPE;


/**
 * @brief Type of environment
 */
typedef enum
{
    ARCOMMANDS_WIFI_ENVIRONMENT_INDOOR = 0,    ///< indoor environment
    ARCOMMANDS_WIFI_ENVIRONMENT_OUTDOOR = 1,    ///< outdoor environment
    ARCOMMANDS_WIFI_ENVIRONMENT_MAX
} eARCOMMANDS_WIFI_ENVIRONMENT;

#define ARCOMMANDS_FLAG_WIFI_ENVIRONMENT_INDOOR (UINT32_C(1) << ARCOMMANDS_WIFI_ENVIRONMENT_INDOOR)    ///< indoor environment
#define ARCOMMANDS_FLAG_WIFI_ENVIRONMENT_OUTDOOR (UINT32_C(1) << ARCOMMANDS_WIFI_ENVIRONMENT_OUTDOOR)    ///< outdoor environment


/**
 * @brief Type of country selection
 */
typedef enum
{
    ARCOMMANDS_WIFI_COUNTRY_SELECTION_MANUAL = 0,    ///< Manual selection.
    ARCOMMANDS_WIFI_COUNTRY_SELECTION_AUTO = 1,    ///< Automatic selection.
    ARCOMMANDS_WIFI_COUNTRY_SELECTION_MAX
} eARCOMMANDS_WIFI_COUNTRY_SELECTION;

// Feature generic

/**
 * @brief Drone settings
 */
typedef struct
{
    struct
    {
        uint8_t isSet;
        float current;
    } MaxAltitude;

    struct
    {
        uint8_t isSet;
        float current;
    } MaxTilt;

    struct
    {
        uint8_t isSet;
        float value;
    } MaxDistance;

    struct
    {
        uint8_t isSet;
        uint8_t shouldNotFlyOver;
    } NoFlyOverMaxDistance;

    struct
    {
        uint8_t isSet;
        float current;
    } MaxVerticalSpeed;

    struct
    {
        uint8_t isSet;
        float current;
    } MaxRotationSpeed;

    struct
    {
        uint8_t isSet;
        float current;
    } MaxPitchRollRotationSpeed;

    struct
    {
        uint8_t isSet;
        uint16_t delay;
    } ReturnHomeDelay;

    struct
    {
        uint8_t isSet;
        eARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE type;
    } HomeType;

    struct
    {
        uint8_t isSet;
        eARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE mode;
    } VideoStabilizationMode;

    struct
    {
        uint8_t isSet;
        uint8_t value;
    } BankedTurn;

} ARCOMMANDS_Generic_DroneSettings_t;


/**
 * @brief Drone settings changed
 */
typedef struct
{
    struct
    {
        uint8_t isSet;
        float current;
        float min;
        float max;
    } MaxAltitudeChanged;

    struct
    {
        uint8_t isSet;
        float current;
        float min;
        float max;
    } MaxTiltChanged;

    struct
    {
        uint8_t isSet;
        float current;
        float min;
        float max;
    } MaxDistanceChanged;

    struct
    {
        uint8_t isSet;
        uint8_t shouldNotFlyOver;
    } NoFlyOverMaxDistanceChanged;

    struct
    {
        uint8_t isSet;
        float current;
        float min;
        float max;
    } MaxVerticalSpeedChanged;

    struct
    {
        uint8_t isSet;
        float current;
        float min;
        float max;
    } MaxRotationSpeedChanged;

    struct
    {
        uint8_t isSet;
        float current;
        float min;
        float max;
    } MaxPitchRollRotationSpeedChanged;

    struct
    {
        uint8_t isSet;
        uint16_t delay;
    } ReturnHomeDelayChanged;

    struct
    {
        uint8_t isSet;
        eARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE type;
    } HomeTypeChanged;

    struct
    {
        uint8_t isSet;
        eARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE mode;
    } VideoStabilizationModeChanged;

    struct
    {
        uint8_t isSet;
        uint8_t state;
    } BankedTurnChanged;

} ARCOMMANDS_Generic_DroneSettingsChanged_t;

// Feature animation
// Feature ARDrone3
// Feature common
// Feature controller_info
// Feature debug
// Feature drone_manager
// Feature follow_me
// Feature JumpingSumo
// Feature mapper
// Feature mapper_mini
// Feature MiniDrone
// Feature powerup
// Feature rc
// Feature SkyController
// Feature thermal_cam
// Feature wifi

#endif /* _LIBARCOMMANDS_ARCOMMANDS_TYPES_H_ */
